# generated by fastapi-codegen:
#   filename:  api/ssapi-swagger.yaml
#   timestamp: 2025-04-10T18:08:42+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, Literal, Optional
from uuid import UUID

from pydantic import BaseModel, Field, constr

from sarif.models import CallPath, CodeLocation, ConfidenceLevel
from sarif.validator.reachability.callgraph import CallGraph


class Error(BaseModel):
    fields: Optional[Dict[str, str]] = None
    message: str


class POVMatchRequest(BaseModel):
    pov_id: UUID
    fuzzer_name: constr(max_length=4096) = Field(
        ..., description="Fuzz Tooling fuzzer that exercises this vuln\n\n4KiB max size"
    )
    sanitizer: constr(max_length=4096) = Field(
        ...,
        description="Fuzz Tooling Sanitizer that exercises this vuln\n\n4KiB max size",
    )
    testcase: str = Field(
        ...,
        description="Base64 encoded vuln trigger\n\n2MiB max size before Base64 encoding",
    )
    crash_log: str = Field(..., description="Crash log from the POV\n\n2MiB max size")


class SARIFMatchRequest(BaseModel):
    metadata: Dict[str, Any] = Field(
        ...,
        description="String to string map containing data that should be attached to outputs like log messages and OpenTelemetry trace attributes for traceability",
    )
    sarif: Dict[str, Any] = Field(
        ..., description="SARIF Report compliant with provided schema"
    )
    sarif_id: UUID


class PatchMatchRequest(BaseModel):
    pov_id: UUID = Field(..., description="patched pov id")
    patch_id: UUID = Field(..., description="patch id")
    diff: str = Field(..., description="patch diff")


class PoVSarifMatchRequest(BaseModel):
    pov_match_request: POVMatchRequest
    sarif_match_request: SARIFMatchRequest


class PoVSarifMatchResponse(Enum):
    pending = "pending"
    matched = "matched"
    unmatched = "unmatched"
    failed = "failed"


class PoVPatchSarifMatchRequest(BaseModel):
    pov_match_request: POVMatchRequest
    patch_match_request: PatchMatchRequest
    sarif_match_request: SARIFMatchRequest


class PoVPatchSarifMatchResponse(Enum):
    pending = "pending"
    matched = "matched"
    unmatched = "unmatched"
    failed = "failed"


# class SarifReachabilityResult(BaseModel):
#     code_location: CodeLocation
#     reachable: bool
#     reachable_harnesses: list[str]
#     callgraphs: dict[str, dict]


# class SarifAnalysisResult(BaseModel):
#     sarif_id: UUID
#     rule_id: str
#     reachability_results: list[SarifReachabilityResult]


class SarifReachabilityResult(BaseModel):
    code_location: CodeLocation
    confidence_level: ConfidenceLevel
    callgraph: dict  # jsonable python dict of CallGraph. See sarif.validator.reachability.callgraph.CallGraph.to_json()


class SarifAnalysisResult(BaseModel):
    sarif_id: UUID
    rule_id: str
    reachable_harness: str
    reachability_results: list[SarifReachabilityResult]


class SarifAssessmentResult(Enum):
    CORRECT = "correct"
    INCORRECT = "incorrect"
