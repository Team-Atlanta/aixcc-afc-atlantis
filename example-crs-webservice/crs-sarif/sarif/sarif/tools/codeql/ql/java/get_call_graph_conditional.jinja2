import java
import safe_callable

predicate allCalls(Callable caller, Callable callee) {
  caller.polyCalls(callee)
}

int getCallCountThreshold() { result = 500000 }

int getTotalCallCount() {
    result = count(SafeFunction caller, SafeFunction callee |
        not isSystemFunction(caller) and
        not isSystemFunction(callee) and
        allCalls(caller, callee)
    )
}

predicate shouldUseHarnessOnly() {
    getTotalCallCount() > getCallCountThreshold()
}

predicate isHarnessFunction(Callable f) {
    f.getFile().getAbsolutePath() in ["{{harness_paths | join('", "')}}"]
}

from SafeCallable caller, SafeCallable callee
where
    not isSystemFunction(caller) and
    not isSystemFunction(callee) and
    allCalls(caller, callee) and
    (
        (not shouldUseHarnessOnly()) or
        (shouldUseHarnessOnly() and 
         exists(Callable harness | 
            isHarnessFunction(harness) and
            allCalls*(harness, caller)
         )
        )
    )
    
select
  caller as from_func,
  caller.getSafeAbsolutePath() as from_file_abs,
  caller.getSafeStartLineString() as from_start_line,
  caller.getSafeEndLineString() as from_end_line,
  caller.getSafeDeclaringTypeSimpleName() as from_class,
  caller.getSafeFullSignature() as from_sig,
  caller.getSafeMethodDesc() as from_method_desc,
  callee as to_func,
  callee.getSafeAbsolutePath() as to_file_abs,
  callee.getSafeStartLineString() as to_start_line,
  callee.getSafeEndLineString() as to_end_line,
  callee.getSafeDeclaringTypeSimpleName() as to_class,
  callee.getSafeFullSignature() as to_sig,
  callee.getSafeMethodDesc() as to_method_desc,
  caller.hasDirectCall(callee) as is_direct