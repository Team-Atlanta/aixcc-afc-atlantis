import java

predicate isSystemCallable(Callable c) {
  exists(string qname | 
    qname = c.getDeclaringType().getQualifiedName() and
    (qname.matches("java.%") or qname.matches("javax.%"))
  )
}

predicate allCalls(Callable caller, Callable callee) {
  caller.polyCalls(callee)
}

from Callable caller, Callable root
where
  root.getDeclaringType().getFile().getBaseName() in ["{{source_filenames | join('", "')}}"] and
  allCalls*(root, caller) and
  not isSystemCallable(caller) and
  {% if sink_function %}
    caller.getName() = "{{sink_function}}" and
  {% else %}
    exists(int line | 
        line = {{start_line}} and
        caller.getBody().getLocation().getStartLine() <= line and
        line <= caller.getBody().getLocation().getEndLine()
    ) and
   {% endif %}
  caller.getDeclaringType().getFile().getBaseName() = "{{sink_filename}}"

select caller.getName() as func_name, caller.getDeclaringType().getFile().getBaseName() as func_file_name