377:static ngx_int_t
378:ngx_http_userid_set_uid(ngx_http_request_t *r, ngx_http_userid_ctx_t *ctx,
379:    ngx_http_userid_conf_t *conf)
380:{
381:    u_char           *cookie, *p;
382:    size_t            len;
383:    ngx_str_t         src, dst;
384:    ngx_table_elt_t  *set_cookie, *p3p;
385:
386:    if (ngx_http_userid_create_uid(r, ctx, conf) != NGX_OK) {
387:        return NGX_ERROR;
388:    }
389:
390:    if (ctx->uid_set[3] == 0) {
391:        return NGX_OK;
392:    }
393:
394:    len = conf->name.len + 1 + ngx_base64_encoded_length(16) + conf->path.len;
395:
396:    if (conf->expires) {
397:        len += sizeof(expires) - 1 + 2;
398:    }
399:
400:    if (conf->domain.len) {
401:        len += conf->domain.len;
402:    }
403:
404:    if (conf->flags & NGX_HTTP_USERID_COOKIE_SECURE) {
405:        len += sizeof("; secure") - 1;
406:    }
407:
408:    if (conf->flags & NGX_HTTP_USERID_COOKIE_HTTPONLY) {
409:        len += sizeof("; httponly") - 1;
410:    }
411:
412:    if (conf->flags & NGX_HTTP_USERID_COOKIE_SAMESITE_STRICT) {
413:        len += sizeof("; samesite=strict") - 1;
414:    }
415:
416:    if (conf->flags & NGX_HTTP_USERID_COOKIE_SAMESITE_LAX) {
417:        len += sizeof("; samesite=lax") - 1;
418:    }
419:
420:    if (conf->flags & NGX_HTTP_USERID_COOKIE_SAMESITE_NONE) {
421:        len += sizeof("; samesite=none") - 1;
422:    }
423:
424:    cookie = ngx_pnalloc(r->pool, len);
425:    if (cookie == NULL) {
426:        return NGX_ERROR;
427:    }
428:
429:    p = ngx_copy(cookie, conf->name.data, conf->name.len);
430:    *p++ = '=';
431:
432:    if (ctx->uid_got[3] == 0 || ctx->reset) {
433:        src.len = 16;
434:        src.data = (u_char *) ctx->uid_set;
435:        dst.data = p;
436:
437:        ngx_encode_base64(&dst, &src);
438:
439:        p += dst.len;
440:
441:        if (conf->mark) {
442:            *(p - 2) = conf->mark;
443:        }
444:
445:    } else {
446:        p = ngx_cpymem(p, ctx->cookie.data, 22);
447:        *p++ = conf->mark;
448:        *p++ = '=';
449:    }
450:
451:    if (conf->expires == NGX_HTTP_USERID_MAX_EXPIRES) {
452:        p = ngx_cpymem(p, expires, sizeof(expires) - 1);
453:
454:    } else if (conf->expires) {
455:        p = ngx_cpymem(p, expires, sizeof("; expires=") - 1);
456:        p = ngx_http_cookie_time(p, ngx_time() + conf->expires);
457:    }
458:
459:    p = ngx_copy(p, conf->domain.data, conf->domain.len);
460:
461:    p = ngx_copy(p, conf->path.data, conf->path.len);
462:
463:    if (conf->flags & NGX_HTTP_USERID_COOKIE_SECURE) {
464:        p = ngx_cpymem(p, "; secure", sizeof("; secure") - 1);
465:    }
466:
467:    if (conf->flags & NGX_HTTP_USERID_COOKIE_HTTPONLY) {
468:        p = ngx_cpymem(p, "; httponly", sizeof("; httponly") - 1);
469:    }
470:
471:    if (conf->flags & NGX_HTTP_USERID_COOKIE_SAMESITE_STRICT) {
472:        p = ngx_cpymem(p, "; samesite=strict", sizeof("; samesite=strict") - 1);
473:    }
474:
475:    if (conf->flags & NGX_HTTP_USERID_COOKIE_SAMESITE_LAX) {
476:        p = ngx_cpymem(p, "; samesite=lax", sizeof("; samesite=lax") - 1);
477:    }
478:
479:    if (conf->flags & NGX_HTTP_USERID_COOKIE_SAMESITE_NONE) {
480:        p = ngx_cpymem(p, "; samesite=none", sizeof("; samesite=none") - 1);
481:    }
482:
483:    set_cookie = ngx_list_push(&r->headers_out.headers);
484:    if (set_cookie == NULL) {
485:        return NGX_ERROR;
486:    }
487:
488:    set_cookie->hash = 1;
489:    ngx_str_set(&set_cookie->key, "Set-Cookie");
490:    set_cookie->value.len = p - cookie;
491:    set_cookie->value.data = cookie;
492:
493:    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
494:                   "uid cookie: \"%V\"", &set_cookie->value);
495:
496:    if (conf->p3p.len == 0) {
497:        return NGX_OK;
498:    }
499:
500:    p3p = ngx_list_push(&r->headers_out.headers);
501:    if (p3p == NULL) {
502:        return NGX_ERROR;
503:    }
504:
505:    p3p->hash = 1;
506:    ngx_str_set(&p3p->key, "P3P");
507:    p3p->value = conf->p3p;
508:
509:    return NGX_OK;
510:}
