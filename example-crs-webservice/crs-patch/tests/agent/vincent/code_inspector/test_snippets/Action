30:/**
31: * Object that contributes additional information, behaviors, and UIs to {@link ModelObject}
32: * (more specifically {@link Actionable} objects, which most interesting {@link ModelObject}s are.)
33: *
34: * <p>
35: * {@link Action}s added to a model object creates additional URL subspace under the parent model object,
36: * through which it can interact with users. {@link Action}s are also capable of exposing themselves
37: * to the left hand side menu of a {@link ModelObject} (for example to {@link Project}, {@link Build}, and etc.)
38: *
39: * <p>
40: * Some actions use the latter without the former (for example, to add a link to an external website),
41: * while others do the former without the latter (for example, to just draw some graphs in {@code floatingBox.jelly}),
42: * and still some others do both.
43: *
44: * <h2>Views</h2>
45: * <p>
46: * If an action has a view named {@code floatingBox.jelly},
47: * it will be displayed as a floating box on the top page of
48: * the target {@link ModelObject}. (For example, this is how
49: * the JUnit test result trend shows up in the project top page.
50: * See {@code TestResultProjectAction}.)
51: *
52: * <p>
53: * On the target {@link ModelObject} page, actions are rendered as an item in the side panel
54: * by the "/lib/hudson:actions" jelly tag, but you can override this for your action by
55: * writing {@code action.jelly}. See the "actions" tag for what the default handling is and
56: * tweak from there. One of the use cases of this is to show nested actions, like where
57: * Jenkins show the option to wipe out the workspace inside the workspace link:
58: *
59: * <pre>{@code
60: * <l:task icon="icon-folder icon-md"  href="${url}/ws/" title="${%Workspace}">
61: *   <l:task icon="icon-delete icon-md"  href="${url}/wipeOutWorkspace" title="${%Wipe Out Workspace}" />
62: * </l:task>
63: * }</pre>
64: *
65: * <h2>Persistence</h2>
66: * <p>
67: * Actions are often persisted as a part of {@link Actionable}
68: * (for example with {@link Build}) via XStream. In some other cases,
69: * {@link Action}s are transient and not persisted (such as
70: * when it's used with {@link Job}).
71: * <p>
72: * The {@link Actionable#replaceAction(Action)}, {@link Actionable#addOrReplaceAction(Action)}, and
73: * {@link Actionable#removeAction(Action)} methods use {@link Object#equals} to determine whether to update
74: * or replace or remove an {@link Action}. As such, {@link Action} subclasses that provide a deep
75: * {@link Object#equals} will assist in reducing the need for unnecessary persistence.
76: *
77: * @author Kohsuke Kawaguchi
78: */
79:public interface Action extends ModelObject {
80:    /**
81:     * Gets the name of the icon.
82:     *
83:     * @return
84:     *      If the icon name is prefixed with "symbol-", a Jenkins Symbol
85:     *      will be used.
86:     *      <p>
87:     *      If just a file name (like "abc.gif") is returned, it will be
88:     *      interpreted as a file name inside {@code /images/24x24}.
89:     *      This is useful for using one of the stock images.
90:     *      <p>
91:     *      If an absolute file name that starts from '/' is returned (like
92:     *      "/plugin/foo/abc.gif"), then it will be interpreted as a path
93:     *      from the context root of Jenkins. This is useful to pick up
94:     *      image files from a plugin.
95:     *      <p>
96:     *      Finally, return null to hide it from the task list. This is normally not very useful,
97:     *      but this can be used for actions that only contribute {@code floatBox.jelly}
98:     *      and no task list item. The other case where this is useful is
99:     *      to avoid showing links that require a privilege when the user is anonymous.
100:     * @see <a href="https://www.jenkins.io/doc/developer/views/symbols/">Jenkins Symbols</a>
101:     * @see Functions#isAnonymous()
102:     * @see Functions#getIconFilePath(Action)
103:     */
104:    @CheckForNull String getIconFileName();
105:
106:    /**
107:     * Gets the string to be displayed.
108:     *
109:     * The convention is to capitalize the first letter of each word,
110:     * such as "Test Result".
111:     *
112:     * @return Can be null in case the action is hidden.
113:     */
114:    @Override
115:    @CheckForNull String getDisplayName();
116:
117:    /**
118:     * Gets the URL path name.
119:     *
120:     * <p>
121:     * For example, if this method returns "xyz", and if the parent object
122:     * (that this action is associated with) is bound to /foo/bar/zot,
123:     * then this action object will be exposed to /foo/bar/zot/xyz.
124:     *
125:     * <p>
126:     * This method should return a string that's unique among other {@link Action}s.
127:     *
128:     * <p>
129:     * The returned string can be an absolute URL, like "http://www.sun.com/",
130:     * which is useful for directly connecting to external systems.
131:     *
132:     * <p>
133:     * If the returned string starts with '/', like '/foo', then it's assumed to be
134:     * relative to the context path of the Jenkins webapp.
135:     *
136:     * @return
137:     *      null if this action object doesn't need to be bound to web
138:     *      (when you do that, be sure to also return null from {@link #getIconFileName()}.
139:     * @see Functions#getActionUrl(String, Action)
140:     */
141:    @CheckForNull String getUrlName();
142:}
