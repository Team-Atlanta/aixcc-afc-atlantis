# generated by fastapi-codegen:
#   filename:  docs/api/crs-patch.json
#   timestamp: 2025-03-19T11:53:33+00:00

from __future__ import annotations

import base64
from enum import Enum
from typing import Any, Dict, Optional
from uuid import UUID

from crete.atoms.detection import BlobInfo as CreteBlobInfo
from crete.atoms.detection import Detection
from pydantic import BaseModel, Field
from python_aixcc_challenge.detection.models import AIxCCChallengeBlobInfo


class TaskType(Enum):
    full = "full"
    delta = "delta"


class Status(Enum):
    waiting = "waiting"
    processing = "processing"
    succeeded = "succeeded"
    failed = "failed"
    errored = "errored"


class PatchStatus(BaseModel):
    pov_id: UUID = Field(..., description="POV ID")
    status: Status
    patch_diff: Optional[str] = Field(
        None,
        description="Base64 encoded patch in unified diff format\n\nnull indicates the status is not succeeded",
    )


class Error(BaseModel):
    fields: Optional[Dict[str, str]] = None
    message: str


class PatchRequest(BaseModel):
    project_name: str = Field(..., description="OSS Fuzz project name")
    blobs: list[BlobInfo] = Field(..., description="List of blobs")
    pov_id: UUID = Field(..., description="POV ID")
    sarif_report: Optional[str] = Field(
        None,
        description="SARIF report",
    )
    type: TaskType

    """
    mode: Optional[AIxCCChallengeMode]
    vulnerability_identifier: str
    project_name: str
    language: Language  # This is necessary for crash analysis module
    blobs: List[BlobInfo] = []
    sarif_report: Optional[SarifReport] = None
    """

    def to_run_pov_detection(self) -> Detection:
        """
        This is used to create a detection object to `run_pov`.
        """
        return Detection(
            mode=None,
            vulnerability_identifier=str(self.pov_id),
            project_name=self.project_name,
            language="c",
            blobs=[blob.to_blob_info() for blob in self.blobs],
            sarif_report=None,
        )


class BlobInfo(BaseModel):
    harness_name: str = Field(..., description="Harness name to pass the data file")
    sanitizer_name: str = Field(
        ..., description="Sanitizer name to reproduce the vulnerability"
    )
    blob_data: str = Field(..., description="Base64 encoded vuln trigger")

    def to_challenge_blob_info(self) -> AIxCCChallengeBlobInfo:
        return AIxCCChallengeBlobInfo(
            harness_name=self.harness_name,
            sanitizer_name=self.sanitizer_name,
            blob=self.blob_data,
        )

    def to_blob_info(self) -> CreteBlobInfo:
        return CreteBlobInfo(
            harness_name=self.harness_name,
            sanitizer_name=self.sanitizer_name,
            blob=base64.b64decode(self.blob_data),
        )


class SubmissionStatus(Enum):
    accepted = "accepted"
    passed = "passed"
    failed = "failed"
    deadline_exceeded = "deadline_exceeded"
    errored = "errored"
    duplicated = "duplicated"


class Config(BaseModel):
    id: str
    module: str

    @classmethod
    def from_dict(cls, data: dict[str, Any]) -> Config:
        return cls(**data)
