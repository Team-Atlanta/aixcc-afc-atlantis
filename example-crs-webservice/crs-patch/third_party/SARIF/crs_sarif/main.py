# generated by fastapi-codegen:
#   filename:  ssapi-swagger.yaml
#   timestamp: 2025-04-09T04:08:41+00:00

from __future__ import annotations

import asyncio
import logging
import os
import typing
from contextlib import asynccontextmanager
from pathlib import Path

import urllib3
from fastapi import FastAPI
from fastapi.responses import JSONResponse

from crs_sarif.models.models import (
    Error,
    PatchMatchRequest,
    POVMatchRequest,
    SARIFMatchRequest,
)
from crs_sarif.services.analyser import AnalyserService
from crs_sarif.services.blobgen import blobgen
from crs_sarif.services.matcher import match_patch, match_pov, match_sarif
from crs_sarif.utils.context import CRSEnv
from crs_sarif.utils.dir_setting import CRSDirSetting
from crs_sarif.utils.redis_util import RedisUtil
from crs_sarif.utils.vapi_client import VapiClient
from libCRS.otel import install_otel_logger
from sarif.context import SarifEnv, SarifServerManager
from sarif.models import CP, Harness
from sarif.validator.reachability.base import BaseReachabilityAnalyser
from sarif.validator.reachability.codeql import CodeQLReachabilityAnalyser

logger = logging.getLogger(__name__)


async def _wait_for_essential_sarif_build(build_shared_dir: Path):
    logger.info("Waiting for sarif build")

    done_file = build_shared_dir / "ESSENTIAL_DONE"
    wait_time = 0
    while not done_file.exists():
        await asyncio.sleep(1)
        wait_time += 1
        if wait_time % 300 == 0:
            logger.info(
                f"Still waiting for essential SARIF build... ({wait_time/60:.1f} minutes elapsed)"
            )

    logger.info("Essential SARIF build done")


async def _wait_for_aux_sarif_build(build_shared_dir: Path):
    logger.info("Waiting for aux build")

    done_file = build_shared_dir / "AUX_DONE"
    wait_time = 0
    while not done_file.exists():
        await asyncio.sleep(1)
        wait_time += 1
        if wait_time % 300 == 0:
            logger.info(
                f"Still waiting for aux SARIF build... ({wait_time/60:.1f} minutes elapsed)"
            )

    logger.info("Aux SARIF build done")


async def _wait_for_poc_gen_build(build_shared_dir: Path):
    logger.info("Waiting for poc gen build")

    done_file = build_shared_dir / "POC_GEN_DONE"
    wait_time = 0
    while not done_file.exists():
        await asyncio.sleep(1)
        wait_time += 1
        if wait_time % 300 == 0:
            logger.info(
                f"Still waiting for poc gen build... ({wait_time/60:.1f} minutes elapsed)"
            )

    logger.info("Poc gen build done")


async def init_aux_analyser():
    logger.info("Initializing aux analyser")

    await _wait_for_aux_sarif_build(CRSEnv().build_shared_dir)

    await CRSDirSetting._download_aux_build_shared_dir()

    if (CRSEnv().build_shared_dir / "AUX_FAILED").exists():
        logger.warning("Aux build failed. Do not use SVF for this project.")
        return

    analyser_service = AnalyserService()

    if len(analyser_service.aux_analysers) > 0:
        await analyser_service.init_aux_callgraphs()
        await analyser_service.merge_aux_callgraphs()
        await analyser_service.dump_reachability_results()
        await analyser_service.update_analysis_results()


async def init_analyser():
    logger.info("Initializing analyser")

    await _wait_for_essential_sarif_build(CRSEnv().build_shared_dir)

    await CRSDirSetting._download_essential_build_shared_dir()

    # Init Joern server
    SarifServerManager()

    # Update harness abs path
    # CRSEnv().update_sarif_harness_paths_joern()
    await CRSEnv().update_sarif_harness_paths_codeql()

    # Intialize reachability analysers
    analyser_service = AnalyserService()

    # Save initial static reachability results and sarif analysis results
    await analyser_service.init_callgraphs()
    await analyser_service.dump_reachability_results()
    try:
        await analyser_service.update_analysis_results()
    except urllib3.exceptions.MaxRetryError as e:
        logger.exception(f"Error sending analysis results to VAPI: {e}")

    # Start tasks (dynamic call graph update)
    await analyser_service.start_tasks()

    CRSEnv().analyser_init_done = True

    logger.info("Analyser initialized")

    asyncio.create_task(init_llm_poc_gen())
    asyncio.create_task(init_aux_analyser())


async def init_llm_poc_gen():
    logger.info("Initializing llm-poc-gen")

    await _wait_for_poc_gen_build(CRSEnv().build_shared_dir)

    await CRSDirSetting._download_poc_gen_build_shared_dir()

    CRSEnv().llm_poc_gen_init_done = True

    logger.info("llm-poc-gen initialized")

    sarif_match_requests = RedisUtil().get_all_sarif_match_requests()
    for sarif_match_request in sarif_match_requests:
        logger.info(
            f"Running blobgen for sarif match request: sarif_id={sarif_match_request.sarif_id}"
        )
        await blobgen(sarif_match_request.sarif, sarif_match_request.sarif_id)


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Initialize services
    install_otel_logger(action_name="crs-sarif")

    # Intialize context
    CRSEnv()
    cp = CP(
        name=CRSEnv().project_name,
        language=(
            "java" if CRSEnv().project_language == "jvm" else CRSEnv().project_language
        ),
        oss_fuzz_lang=CRSEnv().project_language,
        harnesses=[
            Harness(
                name=harness.name,
                path=harness.src_path,
            )
            for harness in CRSEnv().cp.harnesses.values()
        ],
    )
    logger.info(f"CP: {cp.model_dump_json()}")
    SarifEnv(cp=cp, env_mode="crs", debug_mode="release")

    # Initialize repo sources
    CRSDirSetting._extract_repo_tarballs()

    # Initialize API and DB
    VapiClient()
    RedisUtil()

    # Initialize analyser
    asyncio.create_task(init_analyser())

    yield
    # Cleanup services
    # await analyser_service.stop_tasks()


app = FastAPI(
    title="SARIF System API",
    version="1.0.0",
    lifespan=lifespan,
)


@app.post(
    "/match/patch/",
    response_model=None,
    responses={"400": {"model": Error}, "500": {"model": Error}},
)
async def post_match_patch_(body: PatchMatchRequest = None) -> typing.Optional[Error]:
    """
    Request Patch-SARIF match
    """
    await match_patch(body)

    return JSONResponse(
        status_code=200, content={"message": "patch to sarif match started"}
    )


@app.post(
    "/match/pov/",
    response_model=None,
    responses={"400": {"model": Error}, "500": {"model": Error}},
)
async def post_match_pov_(body: POVMatchRequest = None) -> JSONResponse:
    """
    Request POV-SARIF match
    """
    await match_pov(body)

    return JSONResponse(
        status_code=200, content={"message": "pov to sarif match started"}
    )


@app.post(
    "/match/sarif/",
    response_model=None,
    responses={"400": {"model": Error}, "500": {"model": Error}},
)
async def post_match_sarif_(body: SARIFMatchRequest = None) -> JSONResponse:
    """
    Request POV-SARIF match
    """
    tasks = []

    if CRSEnv().project_language in ["c", "cpp", "c++"]:
        tasks.append(asyncio.create_task(blobgen(body.sarif, body.sarif_id)))
    tasks.append(asyncio.create_task(match_sarif(body)))

    await asyncio.gather(*tasks)

    return JSONResponse(
        status_code=200, content={"message": "sarif to pov match started"}
    )
