javax.xml.xpath.XPathEvaluationResult<?> javax.xml.xpath.XPath.evaluateExpression(java.lang.String, java.lang.Object)
long java.nio.file.Files.copy(java.io.InputStream, java.nio.file.Path, java.nio.file.CopyOption...)
java.lang.Class<?> java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)
int com.code_intelligence.jazzer.runtime.TraceDataFlowNativeCallbacks.traceSubIntWrapper(int, int, int)
java.lang.Object java.io.ObjectInputStream.readObject()
boolean java.lang.String.matches(java.lang.String)
long java.nio.file.Files.copy(java.nio.file.Path, java.io.OutputStream)
java.lang.Object javax.script.ScriptEngine.eval(java.lang.String, javax.script.ScriptContext)
void java.util.Scanner.<init>(java.io.InputStream)
java.lang.Class<?> java.lang.Class.forName(java.lang.Module, java.lang.String)
boolean java.sql.Statement.execute(java.lang.String)
javax.persistence.Query javax.persistence.EntityManager.createNativeQuery(java.lang.String)
boolean java.sql.Statement.execute(java.lang.String, java.lang.String[])
java.lang.Object javax.xml.xpath.XPath.evaluateExpression(java.lang.String, org.xml.sax.InputSource, java.lang.Class<java.lang.Object>)
java.lang.Object javax.script.ScriptEngine.eval(java.lang.String, javax.script.Bindings)
java.lang.String javax.xml.xpath.XPath.evaluate(java.lang.String, org.xml.sax.InputSource)
void java.io.FileOutputStream.<init>(java.io.File)
void java.util.Scanner.<init>(java.nio.file.Path, java.lang.String)
long java.sql.Statement.executeLargeUpdate(java.lang.String)
java.lang.Object java.io.ObjectInputStream.readObjectOverride()
java.lang.Object javax.naming.Context.lookup(java.lang.String)
long[] java.sql.Statement.executeLargeBatch()
void java.io.FileOutputStream.<init>(java.lang.String)
void java.io.FileReader.<init>(java.io.FileDescriptor)
void java.net.SocketImpl.connect(java.net.SocketAddress, int)
java.lang.Object javax.script.ScriptEngine.eval(java.lang.String)
java.lang.String java.lang.System.mapLibraryName(java.lang.String)
java.util.List<java.lang.String> java.nio.file.Files.readAllLines(java.nio.file.Path)
void java.util.Scanner.<init>(java.lang.String)
java.io.BufferedReader java.nio.file.Files.newBufferedReader(java.nio.file.Path)
void java.util.Scanner.<init>(java.io.InputStream, java.lang.String)
long java.sql.Statement.executeLargeUpdate(java.lang.String, int)
java.lang.String java.lang.String.replaceAll(java.lang.String, java.lang.String)
java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.String)
void java.lang.System.loadLibrary(java.lang.String)
void java.io.FileInputStream.<init>(java.io.File)
java.nio.channels.FileChannel java.nio.channels.FileChannel.open(java.nio.file.Path, java.nio.file.OpenOption...)
void java.io.FileOutputStream.<init>(java.io.FileDescriptor)
int com.code_intelligence.jazzer.runtime.TraceDataFlowNativeCallbacks.traceMulIntWrapper(int, int, int)
boolean java.nio.channels.SocketChannel.connect(java.net.SocketAddress)
void java.util.Scanner.<init>(java.io.File)
int com.code_intelligence.jazzer.runtime.TraceDataFlowNativeCallbacks.traceDivIntWrapper(int, int, int)
int java.sql.Statement.executeUpdate(java.lang.String)
void java.io.FileWriter.<init>(java.lang.String, boolean)
java.nio.file.Path java.nio.file.Files.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset, java.nio.file.OpenOption...)
void java.io.FileOutputStream.<init>(java.io.File, boolean)
java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.Module, java.lang.String)
void java.lang.Runtime.load(java.lang.String)
void java.io.ObjectInputStream.<init>(java.io.InputStream)
java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader, javax.script.ScriptContext)
java.nio.channels.SeekableByteChannel java.nio.file.Files.newByteChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...)
java.lang.Object javax.naming.Context.lookupLink(java.lang.String)
java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader, javax.script.Bindings)
long java.sql.Statement.executeLargeUpdate(java.lang.String, int[])
long java.sql.Statement.executeLargeUpdate(java.lang.String, java.lang.String[])
void java.util.Scanner.<init>(java.lang.Readable)
java.lang.String javax.xml.xpath.XPath.evaluate(java.lang.String, java.lang.Object)
javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(java.lang.String, javax.naming.directory.Attributes)
javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(javax.naming.Name, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)
void java.io.FileInputStream.<init>(java.io.FileDescriptor)
java.lang.Process java.lang.ProcessImpl.start(java.lang.String[], java.util.Map<java.lang.String, java.lang.String>, java.lang.String, java.lang.ProcessBuilder.Redirect[], boolean)
java.lang.Process java.lang.ProcessBuilder.start()
void java.util.Scanner.<init>(java.nio.file.Path)
void java.util.Scanner.<init>(java.lang.ReadableByteChannel, java.lang.String)
java.util.regex.Pattern java.util.regex.Pattern.compile(java.lang.String)
java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader)
java.io.BufferedWriter java.nio.file.Files.newBufferedWriter(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption...)
java.lang.String java.nio.file.Files.readString(java.nio.file.Path path)
java.io.OutputStream java.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)
java.lang.Object java.io.ObjectInputStream.readUnshared()
java.io.BufferedReader java.nio.file.Files.newBufferedReader(java.nio.file.Path, java.nio.charset.Charset)
void java.io.FileInputStream.<init>(java.lang.String)
void java.net.SocketImpl.connect(java.net.InetAddress, int)
void java.io.FileWriter.<init>(java.io.File)
java.nio.channels.SeekableByteChannel java.nio.file.Files.newByteChannel(java.nio.file.Path, java.nio.file.OpenOption...)
void java.io.FileWriter.<init>(java.lang.String)
java.nio.file.Path java.nio.file.Files.readSymbolicLink(java.nio.file.Path)
javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(java.lang.String, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)
java.lang.String[] java.lang.String.split(java.lang.String, int)
void java.net.SocketImpl.connect(java.lang.String, int)
java.lang.Object javax.xml.xpath.XPath.evaluate(java.lang.String, org.xml.sax.InputSource, javax.xml.namespace.QName)
boolean java.sql.Statement.execute(java.lang.String, int[])
int java.sql.Statement.executeUpdate(java.lang.String, java.lang.String[])
java.nio.file.Path java.nio.file.Files.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.file.OpenOption...)
javax.persistence.Query javax.persistence.EntityManager.createNativeQuery(java.lang.String, java.lang.String)
boolean java.util.regex.Pattern.matches(java.lang.String, java.lang.CharSequence)
java.nio.file.Path java.nio.file.Files.write(java.nio.file.Path, java.lang.Iterable<? extends java.lang.CharSequence>, java.nio.file.OpenOption...)
java.nio.file.Path java.nio.file.Files.copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)
javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(java.lang.String, javax.naming.directory.Attributes, java.lang.String[])
byte[] java.nio.file.Files.readAllBytes(java.nio.file.Path)
java.lang.Object javax.xml.xpath.XPath.evaluate(java.lang.String, java.lang.Object, javax.xml.namespace.QName)
java.sql.ResultSet java.sql.Statement.executeQuery(java.lang.String)
void java.util.Scanner.<init>(java.io.File, java.lang.String)
int java.sql.Statement.executeUpdate(java.lang.String, int)
java.lang.Class<?> java.lang.Class.forName(java.lang.String)
int[] java.sql.Statement.executeBatch()
java.lang.String java.nio.file.Files.readString(java.nio.file.Path path, java.nio.charset.Charset cs)
void java.io.FileReader.<init>(java.lang.String)
void java.util.Scanner.<init>(java.lang.ReadableByteChannel)
java.nio.file.Path java.nio.file.Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)
void java.lang.System.load(java.lang.String)
java.lang.String[] java.lang.String.split(java.lang.String)
java.io.BufferedWriter java.nio.file.Files.newBufferedWriter(java.nio.file.Path, java.nio.file.OpenOption...)
int java.sql.Statement.executeUpdate(java.lang.String, int[])
java.util.regex.Pattern java.util.regex.Pattern.compile(java.lang.String, int)
int com.code_intelligence.jazzer.runtime.TraceDataFlowNativeCallbacks.traceAddIntWrapper(int, int, int)
java.nio.file.Path java.nio.file.Files.move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)
void java.lang.Runtime.loadLibrary(java.lang.String)
java.util.List<java.lang.String> java.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)
javax.persistence.Query javax.persistence.EntityManager.createNativeQuery(java.lang.String, java.lang.Class<?>)
boolean java.sql.Statement.execute(java.lang.String, int)
java.nio.channels.FileChannel java.nio.channels.FileChannel.open(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...)
java.lang.Object javax.xml.xpath.XPath.evaluateExpression(java.lang.String, java.lang.Object, java.lang.Class<java.lang.Object>)
void java.io.FileReader.<init>(java.io.File)
java.lang.String java.lang.ClassLoader.findLibrary(java.lang.String)
java.nio.file.Path java.nio.file.Files.write(java.nio.file.Path, java.lang.Iterable<? extends java.lang.CharSequence>, java.nio.charset.Charset, java.nio.file.OpenOption...)
void java.io.FileWriter.<init>(java.io.FileDescriptor)
javax.xml.xpath.XPathEvaluationResult<?> javax.xml.xpath.XPath.evaluateExpression(java.lang.String, org.xml.sax.InputSource)
java.io.InputStream java.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)
java.lang.String java.lang.String.replaceFirst(java.lang.String, java.lang.String)
javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls)
javax.xml.xpath.XPathExpression javax.xml.xpath.XPath.compile(java.lang.String)
void java.io.FileWriter.<init>(java.io.File, boolean)
void java.io.FileOutputStream.<init>(java.lang.String, boolean)
java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.String, boolean)
