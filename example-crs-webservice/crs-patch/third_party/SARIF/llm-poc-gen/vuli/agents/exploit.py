import logging
from typing import TypedDict

from langgraph.graph import END, START, StateGraph
from langgraph.graph.state import CompiledGraph
from vuli.blobgen import BlobGeneratorResult, PoVGenerator
from vuli.codereader import BaseReader
from vuli.cp import CP
from vuli.model_manager import ModelManager
from vuli.struct import CodePoint, Sanitizer


class State(TypedDict):
    code_table: dict
    harness_id: str
    path: list[CodePoint]
    prev: BlobGeneratorResult
    point: str
    sanitizer: Sanitizer
    crash: bool = False


class Exploit:
    def __init__(self, generator: PoVGenerator):
        self._logger = logging.getLogger("exploit")
        self._generator = generator
        self._reader = BaseReader(CP().source_dir)

    def compile(self) -> CompiledGraph:
        graph = StateGraph(State)
        graph.add_node("prepare", self.prepare)
        graph.add_node("generate_blob", self.generate_blob)
        graph.add_edge(START, "prepare")
        graph.add_edge("prepare", "generate_blob")
        graph.add_edge("generate_blob", END)
        return graph.compile()

    def prepare(self, state: dict) -> dict:
        if not isinstance(state.get("code_table", None), dict):
            raise RuntimeError("Invalid Input (code_table)")
        if not isinstance(state.get("harness_id", None), str):
            raise RuntimeError("Invalid Input (harness_id)")
        if not isinstance(state.get("path", None), list):
            raise RuntimeError("Invalid Input (path)")
        if not isinstance(state.get("prev", None), BlobGeneratorResult):
            raise RuntimeError("Invalid Input (prev)")
        if not isinstance(state.get("point", None), str):
            raise RuntimeError("Invalid Input (point)")
        if not isinstance(state.get("sanitizer", None), Sanitizer):
            raise RuntimeError("Invalid Input (sanitizer)")

        state["crash"] = False
        return state

    def generate_blob(self, state: dict) -> dict:
        code: str = BaseReader(CP().source_dir).read_by_table(state["code_table"])
        result: BlobGeneratorResult = self._generator.generate(
            code,
            state["harness_id"],
            ModelManager().get_all_model_names(),
            state["path"],
            state["point"],
            state["prev"],
            state["sanitizer"],
        )
        improve: bool = result.eval.score == 1.0
        if improve:
            state["crash"] = True
            state["prev"] = result
        self._logger.info(
            f"Generation Done[improve: {improve}, blob:{result.blob}, model:{result.model_name}, score:{result.eval.score}, last:{result.localized[0]}]"
        )
        return state
