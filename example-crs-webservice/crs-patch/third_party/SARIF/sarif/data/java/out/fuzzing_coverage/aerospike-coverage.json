{
    "func_coverages": [
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "onEnable",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/metrics/MetricsPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "onSnapshot",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "onNodeClose",
            "desc": "(Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "onDisable",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "open",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "writeCluster",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "writeNode",
            "desc": "(Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "writeConn",
            "desc": "(Lcom/aerospike/client/cluster/ConnectionStats;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "writeLine",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsWriter",
            "file_name": "MetricsWriter.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/metrics/LatencyType",
            "file_name": "LatencyType.java",
            "func_name": "getMax",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/metrics/LatencyType",
            "file_name": "LatencyType.java",
            "func_name": "getString",
            "desc": "(I)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/metrics/LatencyType",
            "file_name": "LatencyType.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/metrics/NodeMetrics",
            "file_name": "NodeMetrics.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/metrics/MetricsPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/NodeMetrics",
            "file_name": "NodeMetrics.java",
            "func_name": "addLatency",
            "desc": "(Lcom/aerospike/client/metrics/LatencyType;J)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/NodeMetrics",
            "file_name": "NodeMetrics.java",
            "func_name": "getLatencyBuckets",
            "desc": "(I)Lcom/aerospike/client/metrics/LatencyBuckets;"
        },
        {
            "class_name": "com/aerospike/client/metrics/MetricsPolicy",
            "file_name": "MetricsPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/metrics/LatencyBuckets",
            "file_name": "LatencyBuckets.java",
            "func_name": "<init>",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/LatencyBuckets",
            "file_name": "LatencyBuckets.java",
            "func_name": "getMax",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/metrics/LatencyBuckets",
            "file_name": "LatencyBuckets.java",
            "func_name": "getBucket",
            "desc": "(I)J"
        },
        {
            "class_name": "com/aerospike/client/metrics/LatencyBuckets",
            "file_name": "LatencyBuckets.java",
            "func_name": "add",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/metrics/LatencyBuckets",
            "file_name": "LatencyBuckets.java",
            "func_name": "getIndex",
            "desc": "(J)I"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "create",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/cdt/ListOrder;Z[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "setOrder",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/cdt/ListOrder;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "append",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Ljava/lang/String;Lcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "appendItems",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Ljava/lang/String;Ljava/util/List;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "insert",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Ljava/lang/String;ILcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "insertItems",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Ljava/lang/String;ILjava/util/List;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "increment",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Ljava/lang/String;ILcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "pop",
            "desc": "(Ljava/lang/String;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "popRange",
            "desc": "(Ljava/lang/String;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "remove",
            "desc": "(Ljava/lang/String;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeRange",
            "desc": "(Ljava/lang/String;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "set",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Ljava/lang/String;ILcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "trim",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "clear",
            "desc": "(Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "sort",
            "desc": "(Ljava/lang/String;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeByValue",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeByValueList",
            "desc": "(Ljava/lang/String;Ljava/util/List;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeByValueRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeByValueRelativeRankRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeByIndex",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeByIndexRange",
            "desc": "(Ljava/lang/String;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeByRank",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "removeByRankRange",
            "desc": "(Ljava/lang/String;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "size",
            "desc": "(Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "get",
            "desc": "(Ljava/lang/String;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getRange",
            "desc": "(Ljava/lang/String;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getByValue",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getByValueRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getByValueList",
            "desc": "(Ljava/lang/String;Ljava/util/List;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getByValueRelativeRankRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getByIndex",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getByIndexRange",
            "desc": "(Ljava/lang/String;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getByRank",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOperation",
            "file_name": "ListOperation.java",
            "func_name": "getByRankRange",
            "desc": "(Ljava/lang/String;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapWriteMode",
            "file_name": "MapWriteMode.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;III)V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapWriteMode",
            "file_name": "MapWriteMode.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapPolicy",
            "file_name": "MapPolicy.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cdt/MapOrder;I)V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapPolicy",
            "file_name": "MapPolicy.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "create",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/cdt/MapOrder;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "setMapPolicy",
            "desc": "(Lcom/aerospike/client/cdt/MapPolicy;Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "put",
            "desc": "(Lcom/aerospike/client/cdt/MapPolicy;Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "putItems",
            "desc": "(Lcom/aerospike/client/cdt/MapPolicy;Ljava/lang/String;Ljava/util/Map;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "increment",
            "desc": "(Lcom/aerospike/client/cdt/MapPolicy;Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "decrement",
            "desc": "(Lcom/aerospike/client/cdt/MapPolicy;Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "clear",
            "desc": "(Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByKey",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByKeyList",
            "desc": "(Ljava/lang/String;Ljava/util/List;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByKeyRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByKeyRelativeIndexRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByValue",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByValueList",
            "desc": "(Ljava/lang/String;Ljava/util/List;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByValueRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByValueRelativeRankRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByIndex",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByIndexRange",
            "desc": "(Ljava/lang/String;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByRank",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "removeByRankRange",
            "desc": "(Ljava/lang/String;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "size",
            "desc": "(Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByKey",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByKeyRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByKeyList",
            "desc": "(Ljava/lang/String;Ljava/util/List;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByKeyRelativeIndexRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByValue",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByValueRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;Lcom/aerospike/client/Value;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByValueList",
            "desc": "(Ljava/lang/String;Ljava/util/List;I[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByValueRelativeRankRange",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByIndex",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByIndexRange",
            "desc": "(Ljava/lang/String;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByRank",
            "desc": "(Ljava/lang/String;II[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOperation",
            "file_name": "MapOperation.java",
            "func_name": "getByRankRange",
            "desc": "(Ljava/lang/String;III[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListSortFlags",
            "file_name": "ListSortFlags.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/CDT",
            "file_name": "CDT.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/CDT",
            "file_name": "CDT.java",
            "func_name": "packRangeOperation",
            "desc": "(IILcom/aerospike/client/Value;Lcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)[B"
        },
        {
            "class_name": "com/aerospike/client/cdt/CDT",
            "file_name": "CDT.java",
            "func_name": "init",
            "desc": "(Lcom/aerospike/client/util/Packer;[Lcom/aerospike/client/cdt/CTX;III)V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapWriteFlags",
            "file_name": "MapWriteFlags.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListPolicy",
            "file_name": "ListPolicy.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cdt/ListOrder;I)V"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListPolicy",
            "file_name": "ListPolicy.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListReturnType",
            "file_name": "ListReturnType.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOrder",
            "file_name": "ListOrder.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;II)V"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOrder",
            "file_name": "ListOrder.java",
            "func_name": "getFlag",
            "desc": "(Z)I"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListOrder",
            "file_name": "ListOrder.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/ListWriteFlags",
            "file_name": "ListWriteFlags.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "listIndex",
            "desc": "(I)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "listIndexCreate",
            "desc": "(ILcom/aerospike/client/cdt/ListOrder;Z)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "listRank",
            "desc": "(I)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "listValue",
            "desc": "(Lcom/aerospike/client/Value;)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "mapIndex",
            "desc": "(I)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "mapRank",
            "desc": "(I)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "mapKey",
            "desc": "(Lcom/aerospike/client/Value;)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "mapKeyCreate",
            "desc": "(Lcom/aerospike/client/Value;Lcom/aerospike/client/cdt/MapOrder;)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "mapValue",
            "desc": "(Lcom/aerospike/client/Value;)Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "toBytes",
            "desc": "([Lcom/aerospike/client/cdt/CTX;)[B"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "fromBytes",
            "desc": "([B)[Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "toBase64",
            "desc": "([Lcom/aerospike/client/cdt/CTX;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "fromBase64",
            "desc": "(Ljava/lang/String;)[Lcom/aerospike/client/cdt/CTX;"
        },
        {
            "class_name": "com/aerospike/client/cdt/CTX",
            "file_name": "CTX.java",
            "func_name": "<init>",
            "desc": "(ILcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOrder",
            "file_name": "MapOrder.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;III)V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapOrder",
            "file_name": "MapOrder.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cdt/MapReturnType",
            "file_name": "MapReturnType.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/task/RegisterTask",
            "file_name": "RegisterTask.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/task/RegisterTask",
            "file_name": "RegisterTask.java",
            "func_name": "queryStatus",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/task/ExecuteTask",
            "file_name": "ExecuteTask.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/query/Statement;J)V"
        },
        {
            "class_name": "com/aerospike/client/task/ExecuteTask",
            "file_name": "ExecuteTask.java",
            "func_name": "getTaskId",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/task/ExecuteTask",
            "file_name": "ExecuteTask.java",
            "func_name": "queryStatus",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/task/Task",
            "file_name": "Task.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/task/Task",
            "file_name": "Task.java",
            "func_name": "waitTillComplete",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/task/Task",
            "file_name": "Task.java",
            "func_name": "taskWait",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/task/Task",
            "file_name": "Task.java",
            "func_name": "isDone",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/task/IndexTask",
            "file_name": "IndexTask.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Ljava/lang/String;Ljava/lang/String;Z)V"
        },
        {
            "class_name": "com/aerospike/client/task/IndexTask",
            "file_name": "IndexTask.java",
            "func_name": "queryStatus",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/task/IndexTask",
            "file_name": "IndexTask.java",
            "func_name": "buildStatusCommand",
            "desc": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/task/IndexTask",
            "file_name": "IndexTask.java",
            "func_name": "parseStatusResponse",
            "desc": "(Ljava/lang/String;Ljava/lang/String;Z)I"
        },
        {
            "class_name": "com/aerospike/client/task/IndexTask",
            "file_name": "IndexTask.java",
            "func_name": "buildExistsCommand",
            "desc": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/task/IndexTask",
            "file_name": "IndexTask.java",
            "func_name": "parseExistsResponse",
            "desc": "(Ljava/lang/String;Ljava/lang/String;)I"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$UserCommand",
            "file_name": "AdminCommand.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$UserCommand",
            "file_name": "AdminCommand.java",
            "func_name": "queryUser",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;)Lcom/aerospike/client/admin/User;"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$UserCommand",
            "file_name": "AdminCommand.java",
            "func_name": "queryUsers",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$UserCommand",
            "file_name": "AdminCommand.java",
            "func_name": "parseBlock",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$UserCommand",
            "file_name": "AdminCommand.java",
            "func_name": "parseRoles",
            "desc": "(Lcom/aerospike/client/admin/User;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$UserCommand",
            "file_name": "AdminCommand.java",
            "func_name": "parseInfo",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/admin/User",
            "file_name": "User.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/admin/User",
            "file_name": "User.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/admin/User",
            "file_name": "User.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/admin/User",
            "file_name": "User.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$RoleCommand",
            "file_name": "AdminCommand.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$RoleCommand",
            "file_name": "AdminCommand.java",
            "func_name": "queryRole",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;)Lcom/aerospike/client/admin/Role;"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$RoleCommand",
            "file_name": "AdminCommand.java",
            "func_name": "queryRoles",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$RoleCommand",
            "file_name": "AdminCommand.java",
            "func_name": "parseBlock",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$RoleCommand",
            "file_name": "AdminCommand.java",
            "func_name": "parsePrivileges",
            "desc": "(Lcom/aerospike/client/admin/Role;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$RoleCommand",
            "file_name": "AdminCommand.java",
            "func_name": "parseWhitelist",
            "desc": "(I)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$LoginCommand",
            "file_name": "AdminCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand$LoginCommand",
            "file_name": "AdminCommand.java",
            "func_name": "login",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "<init>",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "authenticate",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Connection;[B)Z"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "authenticateSession",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Connection;[B)Z"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "setAuthenticate",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;[B)I"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "createUser",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "dropUser",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "setPassword",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;[BLjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "changePassword",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;[BLjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "grantRoles",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "revokeRoles",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "createRole",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;Ljava/util/List;II)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "dropRole",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "grantPrivileges",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "revokePrivileges",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "setWhitelist",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "setQuotas",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;II)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "writeRoles",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "writePrivileges",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "writeWhitelist",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "writeSize",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "writeHeader",
            "desc": "(BI)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "writeField",
            "desc": "(BI)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "writeFieldHeader",
            "desc": "(BI)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "executeCommand",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "executeQuery",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/AdminPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "readBlocks",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)I"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "hashPassword",
            "desc": "(Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/admin/AdminCommand",
            "file_name": "AdminCommand.java",
            "func_name": "parseBlock",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/admin/Privilege",
            "file_name": "Privilege.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/admin/PrivilegeCode",
            "file_name": "PrivilegeCode.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;IILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/admin/PrivilegeCode",
            "file_name": "PrivilegeCode.java",
            "func_name": "canScope",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/admin/PrivilegeCode",
            "file_name": "PrivilegeCode.java",
            "func_name": "fromId",
            "desc": "(I)Lcom/aerospike/client/admin/PrivilegeCode;"
        },
        {
            "class_name": "com/aerospike/client/admin/PrivilegeCode",
            "file_name": "PrivilegeCode.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/admin/PrivilegeCode",
            "file_name": "PrivilegeCode.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/admin/Role",
            "file_name": "Role.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/admin/Role",
            "file_name": "Role.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/admin/Role",
            "file_name": "Role.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/admin/Role",
            "file_name": "Role.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$7",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncBatch;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$7",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$7",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$6",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncBatch;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$6",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "([Lcom/aerospike/client/Key;[Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$6",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$5",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncBatch;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$5",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onRecord",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$5",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$5",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$4",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncBatch;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$4",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "([Lcom/aerospike/client/Key;[Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$4",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$8",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncBatch;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$8",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "([Lcom/aerospike/client/Key;[Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$8",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$3",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncBatch;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$3",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onExists",
            "desc": "(Lcom/aerospike/client/Key;Z)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$3",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$3",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$2",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncBatch;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$2",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "([Lcom/aerospike/client/Key;[Z)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$2",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$1",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/AsyncMonitor;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$1",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch$1",
            "file_name": "TestAsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate",
            "file_name": "TestAsyncOperate.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate",
            "file_name": "TestAsyncOperate.java",
            "func_name": "asyncOperateList",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate",
            "file_name": "TestAsyncOperate.java",
            "func_name": "asyncOperateMap",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$WriteHandler",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncPutGet;Lcom/aerospike/client/AerospikeClient;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;Lcom/aerospike/client/Bin;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$WriteHandler",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$WriteHandler",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "init",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "assertBinEqual",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;Ljava/lang/String;I)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "assertRecordFound",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "assertBetween",
            "desc": "(JJJ)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "assertEquals",
            "desc": "(ZZ)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "assertGreaterThanZero",
            "desc": "(J)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "assertNotNull",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "assertNull",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "assertTrue",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "setError",
            "desc": "(Ljava/lang/Exception;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "waitTillComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "notifyComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsync",
            "file_name": "TestAsync.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncScan$1",
            "file_name": "TestAsyncScan.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncScan;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncScan$1",
            "file_name": "TestAsyncScan.java",
            "func_name": "onRecord",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncScan$1",
            "file_name": "TestAsyncScan.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncScan$1",
            "file_name": "TestAsyncScan.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$1",
            "file_name": "TestAsyncOperate.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncOperate;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$1",
            "file_name": "TestAsyncOperate.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;Z)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$1",
            "file_name": "TestAsyncOperate.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncScan",
            "file_name": "TestAsyncScan.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncScan",
            "file_name": "TestAsyncScan.java",
            "func_name": "asyncScan",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$2",
            "file_name": "TestAsyncOperate.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncOperate;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$2",
            "file_name": "TestAsyncOperate.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;Z)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$2",
            "file_name": "TestAsyncOperate.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$ReadHandler",
            "file_name": "TestAsyncOperate.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncOperate;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$ReadHandler",
            "file_name": "TestAsyncOperate.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$ReadHandler",
            "file_name": "TestAsyncOperate.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery$2",
            "file_name": "TestAsyncQuery.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncQuery;Ljava/util/concurrent/atomic/AtomicInteger;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery$2",
            "file_name": "TestAsyncQuery.java",
            "func_name": "onRecord",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery$2",
            "file_name": "TestAsyncQuery.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery$2",
            "file_name": "TestAsyncQuery.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery$1",
            "file_name": "TestAsyncQuery.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncQuery;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery$1",
            "file_name": "TestAsyncQuery.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery$1",
            "file_name": "TestAsyncQuery.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/AsyncMonitor",
            "file_name": "AsyncMonitor.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/AsyncMonitor",
            "file_name": "AsyncMonitor.java",
            "func_name": "setError",
            "desc": "(Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/test/async/AsyncMonitor",
            "file_name": "AsyncMonitor.java",
            "func_name": "waitTillComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/AsyncMonitor",
            "file_name": "AsyncMonitor.java",
            "func_name": "notifyComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "initialize",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "asyncBatchExistsArray",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "asyncBatchExistsSequence",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "asyncBatchGetArray",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "asyncBatchGetSequence",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "asyncBatchGetHeaders",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "asyncBatchReadComplex",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "asyncBatchListReadOperate",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncBatch",
            "file_name": "TestAsyncBatch.java",
            "func_name": "assertBatchBinEqual",
            "desc": "(Lcom/aerospike/client/BatchRecord;Ljava/lang/String;I)Z"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$1",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncPutGet;Lcom/aerospike/client/Bin;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$1",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$1",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "asyncPutGetInline",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "asyncPutGetWithRetry",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery",
            "file_name": "TestAsyncQuery.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery",
            "file_name": "TestAsyncQuery.java",
            "func_name": "initialize",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery",
            "file_name": "TestAsyncQuery.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery",
            "file_name": "TestAsyncQuery.java",
            "func_name": "asyncQuery",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncQuery",
            "file_name": "TestAsyncQuery.java",
            "func_name": "runQuery",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$MapHandler",
            "file_name": "TestAsyncOperate.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncOperate;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$MapHandler",
            "file_name": "TestAsyncOperate.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncOperate$MapHandler",
            "file_name": "TestAsyncOperate.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$1$1",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncPutGet$1;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$1$1",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$1$1",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$ReadHandler",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/async/TestAsyncPutGet;Lcom/aerospike/client/AerospikeClient;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;Lcom/aerospike/client/Bin;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$ReadHandler",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/async/TestAsyncPutGet$ReadHandler",
            "file_name": "TestAsyncPutGet.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer$1$1",
            "file_name": "NettyMockServer.java",
            "func_name": "<init>",
            "desc": "(Lcom/aixcc/aerospike/harnesses/one/NettyMockServer$1;)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer$1$1",
            "file_name": "NettyMockServer.java",
            "func_name": "channelRead0",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;[B)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer",
            "file_name": "NettyMockServer.java",
            "func_name": "getResponse",
            "desc": "()[B"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer",
            "file_name": "NettyMockServer.java",
            "func_name": "setResponse",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer",
            "file_name": "NettyMockServer.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer",
            "file_name": "NettyMockServer.java",
            "func_name": "startServer",
            "desc": "()V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer",
            "file_name": "NettyMockServer.java",
            "func_name": "stopServer",
            "desc": "()V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/AerospikeOne",
            "file_name": "AerospikeOne.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/AerospikeOne",
            "file_name": "AerospikeOne.java",
            "func_name": "fuzzerInitialize",
            "desc": "()V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/AerospikeOne",
            "file_name": "AerospikeOne.java",
            "func_name": "fuzzerTestOneInput",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/AerospikeOne",
            "file_name": "AerospikeOne.java",
            "func_name": "fuzz",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/AerospikeOne",
            "file_name": "AerospikeOne.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/AerospikeOne$1",
            "file_name": "AerospikeOne.java",
            "func_name": "<init>",
            "desc": "(Lcom/aixcc/aerospike/harnesses/one/AerospikeOne;)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/AerospikeOne$1",
            "file_name": "AerospikeOne.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/AerospikeOne$1",
            "file_name": "AerospikeOne.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer$1",
            "file_name": "NettyMockServer.java",
            "func_name": "<init>",
            "desc": "(Lcom/aixcc/aerospike/harnesses/one/NettyMockServer;)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer$1",
            "file_name": "NettyMockServer.java",
            "func_name": "initChannel",
            "desc": "(Lio/netty/channel/socket/SocketChannel;)V"
        },
        {
            "class_name": "com/aixcc/aerospike/harnesses/one/NettyMockServer$1",
            "file_name": "NettyMockServer.java",
            "func_name": "intTo8ByteArray",
            "desc": "(J)[B"
        },
        {
            "class_name": "com/aerospike/test/SuiteAsync",
            "file_name": "SuiteAsync.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteAsync",
            "file_name": "SuiteAsync.java",
            "func_name": "init",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteAsync",
            "file_name": "SuiteAsync.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteAsync",
            "file_name": "SuiteAsync.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteAll",
            "file_name": "SuiteAll.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteSync",
            "file_name": "SuiteSync.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteSync",
            "file_name": "SuiteSync.java",
            "func_name": "init",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteSync",
            "file_name": "SuiteSync.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteSync",
            "file_name": "SuiteSync.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/SuiteEmpty",
            "file_name": "SuiteEmpty.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/ClientPolicy",
            "file_name": "ClientPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/BatchDeletePolicy",
            "file_name": "BatchDeletePolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/AuthMode",
            "file_name": "AuthMode.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/TCPKeepAlive",
            "file_name": "TCPKeepAlive.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/BatchWritePolicy",
            "file_name": "BatchWritePolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/Policy",
            "file_name": "Policy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/Policy",
            "file_name": "Policy.java",
            "func_name": "setTimeout",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/policy/Policy",
            "file_name": "Policy.java",
            "func_name": "setTimeouts",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/policy/Policy",
            "file_name": "Policy.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/policy/Policy",
            "file_name": "Policy.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/policy/TlsPolicy",
            "file_name": "TlsPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/InfoPolicy",
            "file_name": "InfoPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/QueryPolicy",
            "file_name": "QueryPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/BatchReadPolicy",
            "file_name": "BatchReadPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/ReadModeAP",
            "file_name": "ReadModeAP.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/Replica",
            "file_name": "Replica.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/AdminPolicy",
            "file_name": "AdminPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/BatchPolicy",
            "file_name": "BatchPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/BatchPolicy",
            "file_name": "BatchPolicy.java",
            "func_name": "ReadDefault",
            "desc": "()Lcom/aerospike/client/policy/BatchPolicy;"
        },
        {
            "class_name": "com/aerospike/client/policy/BatchPolicy",
            "file_name": "BatchPolicy.java",
            "func_name": "WriteDefault",
            "desc": "()Lcom/aerospike/client/policy/BatchPolicy;"
        },
        {
            "class_name": "com/aerospike/client/policy/RecordExistsAction",
            "file_name": "RecordExistsAction.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/ReadModeSC",
            "file_name": "ReadModeSC.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/BatchUDFPolicy",
            "file_name": "BatchUDFPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/WritePolicy",
            "file_name": "WritePolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/WritePolicy",
            "file_name": "WritePolicy.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/policy/WritePolicy",
            "file_name": "WritePolicy.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/policy/CommitLevel",
            "file_name": "CommitLevel.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/ScanPolicy",
            "file_name": "ScanPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/policy/GenerationPolicy",
            "file_name": "GenerationPolicy.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaAerospikeLib$index",
            "file_name": "LuaAerospikeLib.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaAerospikeLib$index",
            "file_name": "LuaAerospikeLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib$nextLuaValue",
            "file_name": "LuaListLib.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/Iterator;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib$nextLuaValue",
            "file_name": "LuaListLib.java",
            "func_name": "call",
            "desc": "()Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaOutputStream",
            "file_name": "LuaOutputStream.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/query/ResultSet;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaOutputStream",
            "file_name": "LuaOutputStream.java",
            "func_name": "read",
            "desc": "()Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaOutputStream",
            "file_name": "LuaOutputStream.java",
            "func_name": "write",
            "desc": "(Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaOutputStream",
            "file_name": "LuaOutputStream.java",
            "func_name": "readable",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaOutputStream",
            "file_name": "LuaOutputStream.java",
            "func_name": "writeable",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaOutputStream",
            "file_name": "LuaOutputStream.java",
            "func_name": "toLuaString",
            "desc": "()Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaJavaBlob",
            "file_name": "LuaJavaBlob.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaJavaBlob",
            "file_name": "LuaJavaBlob.java",
            "func_name": "luaToObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;[BII)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getMap",
            "desc": "(Ljava/util/Map;)Lcom/aerospike/client/lua/LuaMap;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getList",
            "desc": "(Ljava/util/List;)Lcom/aerospike/client/lua/LuaList;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getJavaBlob",
            "desc": "(Ljava/lang/Object;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getBlob",
            "desc": "([B)Lcom/aerospike/client/lua/LuaBytes;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getString",
            "desc": "(Ljava/lang/String;)Lorg/luaj/vm2/LuaString;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getLong",
            "desc": "(J)Lorg/luaj/vm2/LuaNumber;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getDouble",
            "desc": "(D)Lorg/luaj/vm2/LuaNumber;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getBoolean",
            "desc": "(Z)Lorg/luaj/vm2/LuaBoolean;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUnpacker",
            "file_name": "LuaUnpacker.java",
            "func_name": "getGeoJSON",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/lua/LuaGeoJSON;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib$MetaLib",
            "file_name": "LuaBytesLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib$MetaLib",
            "file_name": "LuaBytesLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib$listcode",
            "file_name": "LuaListLib.java",
            "func_name": "<init>",
            "desc": "(Lorg/luaj/vm2/LuaTable;ILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib$listcode",
            "file_name": "LuaListLib.java",
            "func_name": "invoke",
            "desc": "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$read",
            "file_name": "LuaStreamLib.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$read",
            "file_name": "LuaStreamLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "registerPackage",
            "desc": "(Ljava/lang/String;Lorg/luaj/vm2/LuaTable;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "getPackage",
            "desc": "(Ljava/lang/String;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "loadPackage",
            "desc": "(Lcom/aerospike/client/query/Statement;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "loadSystemPackage",
            "desc": "(Ljava/lang/ClassLoader;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "unloadPackage",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "load",
            "desc": "(Lorg/luaj/vm2/lib/LibFunction;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "call",
            "desc": "(Ljava/lang/String;[Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "getFunction",
            "desc": "(Ljava/lang/String;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "getLuaValue",
            "desc": "(Ljava/lang/Object;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "getLuaList",
            "desc": "([Lcom/aerospike/client/Value;)Lcom/aerospike/client/lua/LuaList;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInstance",
            "file_name": "LuaInstance.java",
            "func_name": "getLuaMap",
            "desc": "(Ljava/util/Map;)Lcom/aerospike/client/lua/LuaMap;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib$create",
            "file_name": "LuaListLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib$create",
            "file_name": "LuaListLib.java",
            "func_name": "invoke",
            "desc": "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUtil",
            "file_name": "LuaUtil.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaUtil",
            "file_name": "LuaUtil.java",
            "func_name": "luaToObject",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib$MetaLib",
            "file_name": "LuaMapLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib$MetaLib",
            "file_name": "LuaMapLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInputStream",
            "file_name": "LuaInputStream.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/concurrent/BlockingQueue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInputStream",
            "file_name": "LuaInputStream.java",
            "func_name": "read",
            "desc": "()Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInputStream",
            "file_name": "LuaInputStream.java",
            "func_name": "write",
            "desc": "(Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInputStream",
            "file_name": "LuaInputStream.java",
            "func_name": "readable",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInputStream",
            "file_name": "LuaInputStream.java",
            "func_name": "writeable",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaInputStream",
            "file_name": "LuaInputStream.java",
            "func_name": "toLuaString",
            "desc": "()Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib$bytesbool",
            "file_name": "LuaBytesLib.java",
            "func_name": "<init>",
            "desc": "(Lorg/luaj/vm2/LuaTable;ILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib$bytesbool",
            "file_name": "LuaBytesLib.java",
            "func_name": "invoke",
            "desc": "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib$create",
            "file_name": "LuaMapLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib$create",
            "file_name": "LuaMapLib.java",
            "func_name": "invoke",
            "desc": "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$readable",
            "file_name": "LuaStreamLib.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$readable",
            "file_name": "LuaStreamLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib",
            "file_name": "LuaBytesLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib",
            "file_name": "LuaBytesLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;[BI)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "size",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getByte",
            "desc": "(I)B"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setByte",
            "desc": "(IB)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setCapacity",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setType",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getString",
            "desc": "(II)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getBytes",
            "desc": "(II)Lcom/aerospike/client/lua/LuaBytes;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getBigInt16",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getLittleInt16",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getBigInt32",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getLittleInt32",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getBigInt64",
            "desc": "(I)J"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getLittleInt64",
            "desc": "(I)J"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "getVarInt",
            "desc": "(I)[I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setString",
            "desc": "(ILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setBytes",
            "desc": "(ILcom/aerospike/client/lua/LuaBytes;I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setBigInt16",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setLittleInt16",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setBigInt32",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setLittleInt32",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setBigInt64",
            "desc": "(IJ)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setLittleInt64",
            "desc": "(IJ)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "setVarInt",
            "desc": "(II)I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendString",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendBigInt16",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendLittleInt16",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendBigInt32",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendLittleInt32",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendBigInt64",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendLittleInt64",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendVarInt",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendBytes",
            "desc": "(Lcom/aerospike/client/lua/LuaBytes;I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "appendByte",
            "desc": "(B)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "ensureCapacity",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "resetSize",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytes",
            "file_name": "LuaBytes.java",
            "func_name": "luaToObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib",
            "file_name": "LuaListLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib",
            "file_name": "LuaListLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib$bytescode",
            "file_name": "LuaBytesLib.java",
            "func_name": "<init>",
            "desc": "(Lorg/luaj/vm2/LuaTable;ILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib$bytescode",
            "file_name": "LuaBytesLib.java",
            "func_name": "invoke",
            "desc": "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib$nextLuaValue",
            "file_name": "LuaMapLib.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/Iterator;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib$nextLuaValue",
            "file_name": "LuaMapLib.java",
            "func_name": "invoke",
            "desc": "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$writeable",
            "file_name": "LuaStreamLib.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$writeable",
            "file_name": "LuaStreamLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaAerospikeLib",
            "file_name": "LuaAerospikeLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaAerospikeLib",
            "file_name": "LuaAerospikeLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib$create",
            "file_name": "LuaBytesLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaBytesLib$create",
            "file_name": "LuaBytesLib.java",
            "func_name": "invoke",
            "desc": "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaAerospikeLib$log",
            "file_name": "LuaAerospikeLib.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaAerospikeLib$log",
            "file_name": "LuaAerospikeLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;Lorg/luaj/vm2/LuaValue;Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "getInstance",
            "desc": "()Lcom/aerospike/client/lua/LuaInstance;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "putInstance",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "loadPackageFromFile",
            "desc": "(Ljava/lang/String;)Lorg/luaj/vm2/Prototype;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "loadPackageFromResource",
            "desc": "(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/String;)Lorg/luaj/vm2/Prototype;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "compile",
            "desc": "(Ljava/lang/String;Ljava/io/InputStream;)Lorg/luaj/vm2/Prototype;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "clearPackage",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "clearPackages",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaCache",
            "file_name": "LuaCache.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib",
            "file_name": "LuaStreamLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib",
            "file_name": "LuaStreamLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$tostring",
            "file_name": "LuaStreamLib.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$tostring",
            "file_name": "LuaStreamLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib$MetaLib",
            "file_name": "LuaListLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaListLib$MetaLib",
            "file_name": "LuaListLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaConfig",
            "file_name": "LuaConfig.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaConfig",
            "file_name": "LuaConfig.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;Ljava/util/Map;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "size",
            "desc": "()Lorg/luaj/vm2/LuaInteger;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "toLuaString",
            "desc": "()Lorg/luaj/vm2/LuaString;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "get",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "put",
            "desc": "(Lorg/luaj/vm2/LuaValue;Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "entrySetIterator",
            "desc": "()Ljava/util/Iterator;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "keySetIterator",
            "desc": "()Ljava/util/Iterator;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "valuesIterator",
            "desc": "()Ljava/util/Iterator;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "remove",
            "desc": "(Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "clone",
            "desc": "()Lcom/aerospike/client/lua/LuaMap;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "merge",
            "desc": "(Lcom/aerospike/client/lua/LuaMap;Lorg/luaj/vm2/LuaFunction;)Lcom/aerospike/client/lua/LuaMap;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "diff",
            "desc": "(Lcom/aerospike/client/lua/LuaMap;)Lcom/aerospike/client/lua/LuaMap;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMap",
            "file_name": "LuaMap.java",
            "func_name": "luaToObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "size",
            "desc": "()Lorg/luaj/vm2/LuaInteger;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "toLuaString",
            "desc": "()Lorg/luaj/vm2/LuaString;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "get",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "set",
            "desc": "(Lorg/luaj/vm2/LuaValue;Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "iterator",
            "desc": "()Ljava/util/Iterator;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "insert",
            "desc": "(Lorg/luaj/vm2/LuaValue;Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "append",
            "desc": "(Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "prepend",
            "desc": "(Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "take",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lcom/aerospike/client/lua/LuaList;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "remove",
            "desc": "(Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "drop",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lcom/aerospike/client/lua/LuaList;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "trim",
            "desc": "(Lorg/luaj/vm2/LuaValue;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "clone",
            "desc": "()Lcom/aerospike/client/lua/LuaList;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "concat",
            "desc": "(Lcom/aerospike/client/lua/LuaList;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "merge",
            "desc": "(Lcom/aerospike/client/lua/LuaList;)Lcom/aerospike/client/lua/LuaList;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "luaToObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "ensureSize",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaList",
            "file_name": "LuaList.java",
            "func_name": "subList",
            "desc": "(II)Lcom/aerospike/client/lua/LuaList;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib",
            "file_name": "LuaMapLib.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib",
            "file_name": "LuaMapLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaGeoJSON",
            "file_name": "LuaGeoJSON.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaGeoJSON",
            "file_name": "LuaGeoJSON.java",
            "func_name": "luaToObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib$mapcode",
            "file_name": "LuaMapLib.java",
            "func_name": "<init>",
            "desc": "(Lorg/luaj/vm2/LuaTable;ILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaMapLib$mapcode",
            "file_name": "LuaMapLib.java",
            "func_name": "invoke",
            "desc": "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$write",
            "file_name": "LuaStreamLib.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/lua/LuaStreamLib$write",
            "file_name": "LuaStreamLib.java",
            "func_name": "call",
            "desc": "(Lorg/luaj/vm2/LuaValue;Lorg/luaj/vm2/LuaValue;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "init",
            "desc": "(Lcom/aerospike/client/operation/HLLPolicy;Ljava/lang/String;II)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "add",
            "desc": "(Lcom/aerospike/client/operation/HLLPolicy;Ljava/lang/String;Ljava/util/List;II)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "setUnion",
            "desc": "(Lcom/aerospike/client/operation/HLLPolicy;Ljava/lang/String;Ljava/util/List;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "refreshCount",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "fold",
            "desc": "(Ljava/lang/String;I)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "getCount",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "getUnion",
            "desc": "(Ljava/lang/String;Ljava/util/List;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "getUnionCount",
            "desc": "(Ljava/lang/String;Ljava/util/List;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "getIntersectCount",
            "desc": "(Ljava/lang/String;Ljava/util/List;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "getSimilarity",
            "desc": "(Ljava/lang/String;Ljava/util/List;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLOperation",
            "file_name": "HLLOperation.java",
            "func_name": "describe",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitWriteFlags",
            "file_name": "BitWriteFlags.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/operation/BitPolicy",
            "file_name": "BitPolicy.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/operation/BitPolicy",
            "file_name": "BitPolicy.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLWriteFlags",
            "file_name": "HLLWriteFlags.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "resize",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;II)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "insert",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;I[B)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "remove",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;II)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "set",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;II[B)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "or",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;II[B)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "xor",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;II[B)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "and",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;II[B)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "not",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;II)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "lshift",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;III)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "rshift",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;III)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "add",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;IIJZLcom/aerospike/client/operation/BitOverflowAction;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "subtract",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;IIJZLcom/aerospike/client/operation/BitOverflowAction;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "setInt",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Ljava/lang/String;IIJ)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "get",
            "desc": "(Ljava/lang/String;II)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "count",
            "desc": "(Ljava/lang/String;II)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "lscan",
            "desc": "(Ljava/lang/String;IIZ)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "rscan",
            "desc": "(Ljava/lang/String;IIZ)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "getInt",
            "desc": "(Ljava/lang/String;IIZ)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "packMath",
            "desc": "(ILcom/aerospike/client/operation/BitPolicy;IIJZLcom/aerospike/client/operation/BitOverflowAction;)[B"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOperation",
            "file_name": "BitOperation.java",
            "func_name": "packGetInt",
            "desc": "(IIZ)[B"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLPolicy",
            "file_name": "HLLPolicy.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/operation/HLLPolicy",
            "file_name": "HLLPolicy.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/operation/BitResizeFlags",
            "file_name": "BitResizeFlags.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOverflowAction",
            "file_name": "BitOverflowAction.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;II)V"
        },
        {
            "class_name": "com/aerospike/client/operation/BitOverflowAction",
            "file_name": "BitOverflowAction.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionStatus",
            "file_name": "PartitionStatus.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "equal",
            "desc": "(Ljava/lang/String;Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/query/Filter;"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "contains",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/query/IndexCollectionType;Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/query/Filter;"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "range",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/query/IndexCollectionType;JJ[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/query/Filter;"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "geoWithinRegion",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/query/IndexCollectionType;Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/query/Filter;"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "geoWithinRadius",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/query/IndexCollectionType;DDD[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/query/Filter;"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "geoContains",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/query/IndexCollectionType;Ljava/lang/String;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/query/Filter;"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/query/IndexCollectionType;ILcom/aerospike/client/Value;Lcom/aerospike/client/Value;[Lcom/aerospike/client/cdt/CTX;)V"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "getCollectionType",
            "desc": "()Lcom/aerospike/client/query/IndexCollectionType;"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "getPackedCtx",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/query/Filter",
            "file_name": "Filter.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordCommand",
            "file_name": "QueryRecordCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;JLcom/aerospike/client/query/RecordSet;JZ)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordCommand",
            "file_name": "QueryRecordCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordCommand",
            "file_name": "QueryRecordCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordCommand",
            "file_name": "QueryRecordCommand.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/KeyRecord",
            "file_name": "KeyRecord.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/client/query/KeyRecord",
            "file_name": "KeyRecord.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/query/KeyRecord",
            "file_name": "KeyRecord.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/query/KeyRecord",
            "file_name": "KeyRecord.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet$RecordSetIterator",
            "file_name": "RecordSet.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/query/RecordSet;)V"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet$RecordSetIterator",
            "file_name": "RecordSet.java",
            "func_name": "hasNext",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet$RecordSetIterator",
            "file_name": "RecordSet.java",
            "func_name": "next",
            "desc": "()Lcom/aerospike/client/query/KeyRecord;"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet$RecordSetIterator",
            "file_name": "RecordSet.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryValidate",
            "file_name": "QueryValidate.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryValidate",
            "file_name": "QueryValidate.java",
            "func_name": "validateBegin",
            "desc": "(Lcom/aerospike/client/cluster/Node;Ljava/lang/String;I)J"
        },
        {
            "class_name": "com/aerospike/client/query/QueryValidate",
            "file_name": "QueryValidate.java",
            "func_name": "validate",
            "desc": "(Lcom/aerospike/client/cluster/Node;Ljava/lang/String;JI)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker$NodePartitions",
            "file_name": "PartitionTracker.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Node;I)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker$NodePartitions",
            "file_name": "PartitionTracker.java",
            "func_name": "addPartition",
            "desc": "(Lcom/aerospike/client/query/PartitionStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor",
            "file_name": "QueryExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;[Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor",
            "file_name": "QueryExecutor.java",
            "func_name": "initializeThreads",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor",
            "file_name": "QueryExecutor.java",
            "func_name": "startThreads",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor",
            "file_name": "QueryExecutor.java",
            "func_name": "threadCompleted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor",
            "file_name": "QueryExecutor.java",
            "func_name": "stopThreads",
            "desc": "(Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor",
            "file_name": "QueryExecutor.java",
            "func_name": "checkForException",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor$QueryThread",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/query/QueryPartitionExecutor;Lcom/aerospike/client/command/MultiCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor$QueryThread",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor$QueryThread",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "stop",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionCommand",
            "file_name": "QueryPartitionCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/query/Statement;JLcom/aerospike/client/query/RecordSet;Lcom/aerospike/client/query/PartitionTracker;Lcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionCommand",
            "file_name": "QueryPartitionCommand.java",
            "func_name": "execute",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionCommand",
            "file_name": "QueryPartitionCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionCommand",
            "file_name": "QueryPartitionCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionCommand",
            "file_name": "QueryPartitionCommand.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateExecutor",
            "file_name": "QueryAggregateExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;[Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateExecutor",
            "file_name": "QueryAggregateExecutor.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateExecutor",
            "file_name": "QueryAggregateExecutor.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/cluster/Node;JZ)Lcom/aerospike/client/command/MultiCommand;"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateExecutor",
            "file_name": "QueryAggregateExecutor.java",
            "func_name": "sendCancel",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateExecutor",
            "file_name": "QueryAggregateExecutor.java",
            "func_name": "sendCompleted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateExecutor",
            "file_name": "QueryAggregateExecutor.java",
            "func_name": "getResultSet",
            "desc": "()Lcom/aerospike/client/query/ResultSet;"
        },
        {
            "class_name": "com/aerospike/client/query/BVal",
            "file_name": "BVal.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setNamespace",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getNamespace",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setSetName",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getSetName",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setIndexName",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getIndexName",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setBinNames",
            "desc": "([Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getBinNames",
            "desc": "()[Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setFilter",
            "desc": "(Lcom/aerospike/client/query/Filter;)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getFilter",
            "desc": "()Lcom/aerospike/client/query/Filter;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setTaskId",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getTaskId",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setMaxRecords",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getMaxRecords",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setRecordsPerSecond",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getRecordsPerSecond",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setAggregateFunction",
            "desc": "(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Lcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getResourceLoader",
            "desc": "()Ljava/lang/ClassLoader;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getResourcePath",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getPackageName",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getFunctionName",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getFunctionArgs",
            "desc": "()[Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setOperations",
            "desc": "([Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "getOperations",
            "desc": "()[Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "setReturnData",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "returnData",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "prepareTaskId",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/query/Statement",
            "file_name": "Statement.java",
            "func_name": "isScan",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/Policy;[Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/query/PartitionFilter;J)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "setMaxRecords",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "initPartitions",
            "desc": "(I[B)[Lcom/aerospike/client/query/PartitionStatus;"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "init",
            "desc": "(Lcom/aerospike/client/policy/Policy;)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "setSleepBetweenRetries",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "assignPartitionsToNodes",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Ljava/lang/String;)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "findNode",
            "desc": "(Ljava/util/List;Lcom/aerospike/client/cluster/Node;)Lcom/aerospike/client/query/PartitionTracker$NodePartitions;"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "partitionUnavailable",
            "desc": "(Lcom/aerospike/client/query/PartitionTracker$NodePartitions;I)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "setDigest",
            "desc": "(Lcom/aerospike/client/query/PartitionTracker$NodePartitions;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "setLast",
            "desc": "(Lcom/aerospike/client/query/PartitionTracker$NodePartitions;Lcom/aerospike/client/Key;J)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "allowRecord",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "isComplete",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;)Z"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "shouldRetry",
            "desc": "(Lcom/aerospike/client/query/PartitionTracker$NodePartitions;Lcom/aerospike/client/AerospikeException;)Z"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "markRetrySequence",
            "desc": "(Lcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "markRetry",
            "desc": "(Lcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionTracker",
            "file_name": "PartitionTracker.java",
            "func_name": "partitionError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordExecutor",
            "file_name": "QueryRecordExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;[Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordExecutor",
            "file_name": "QueryRecordExecutor.java",
            "func_name": "execute",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordExecutor",
            "file_name": "QueryRecordExecutor.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/cluster/Node;JZ)Lcom/aerospike/client/command/MultiCommand;"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordExecutor",
            "file_name": "QueryRecordExecutor.java",
            "func_name": "sendCancel",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordExecutor",
            "file_name": "QueryRecordExecutor.java",
            "func_name": "sendCompleted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryRecordExecutor",
            "file_name": "QueryRecordExecutor.java",
            "func_name": "getRecordSet",
            "desc": "()Lcom/aerospike/client/query/RecordSet;"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/query/IQueryExecutor;I)V"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "next",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "iterator",
            "desc": "()Ljava/util/Iterator;"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "getKey",
            "desc": "()Lcom/aerospike/client/Key;"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "getRecord",
            "desc": "()Lcom/aerospike/client/Record;"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "put",
            "desc": "(Lcom/aerospike/client/query/KeyRecord;)Z"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "abort",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/RecordSet",
            "file_name": "RecordSet.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet",
            "file_name": "ResultSet.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/query/QueryAggregateExecutor;I)V"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet",
            "file_name": "ResultSet.java",
            "func_name": "next",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet",
            "file_name": "ResultSet.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet",
            "file_name": "ResultSet.java",
            "func_name": "iterator",
            "desc": "()Ljava/util/Iterator;"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet",
            "file_name": "ResultSet.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet",
            "file_name": "ResultSet.java",
            "func_name": "put",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet",
            "file_name": "ResultSet.java",
            "func_name": "abort",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet",
            "file_name": "ResultSet.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryListenerExecutor",
            "file_name": "QueryListenerExecutor.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryListenerExecutor",
            "file_name": "QueryListenerExecutor.java",
            "func_name": "execute",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;Lcom/aerospike/client/query/QueryListener;Lcom/aerospike/client/query/PartitionTracker;)V"
        },
        {
            "class_name": "com/aerospike/client/query/RegexFlag",
            "file_name": "RegexFlag.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/IndexCollectionType",
            "file_name": "IndexCollectionType.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateCommand",
            "file_name": "QueryAggregateCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;JLcom/aerospike/client/lua/LuaInstance;Ljava/util/concurrent/BlockingQueue;JZ)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateCommand",
            "file_name": "QueryAggregateCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateCommand",
            "file_name": "QueryAggregateCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryAggregateCommand",
            "file_name": "QueryAggregateCommand.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet$ResultSetIterator",
            "file_name": "ResultSet.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/query/ResultSet;Lcom/aerospike/client/query/ResultSet;)V"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet$ResultSetIterator",
            "file_name": "ResultSet.java",
            "func_name": "hasNext",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet$ResultSetIterator",
            "file_name": "ResultSet.java",
            "func_name": "next",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet$ResultSetIterator",
            "file_name": "ResultSet.java",
            "func_name": "remove",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/ResultSet$ResultSetIterator",
            "file_name": "ResultSet.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryListenerCommand",
            "file_name": "QueryListenerCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/query/Statement;JLcom/aerospike/client/query/QueryListener;Lcom/aerospike/client/query/PartitionTracker;Lcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryListenerCommand",
            "file_name": "QueryListenerCommand.java",
            "func_name": "execute",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryListenerCommand",
            "file_name": "QueryListenerCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/query/QueryListenerCommand",
            "file_name": "QueryListenerCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryListenerCommand",
            "file_name": "QueryListenerCommand.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;ILcom/aerospike/client/query/PartitionTracker;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "execute",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "waitTillComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "notifyCompleted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "threadCompleted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "stopThreads",
            "desc": "(Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "checkForException",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryPartitionExecutor",
            "file_name": "QueryPartitionExecutor.java",
            "func_name": "getRecordSet",
            "desc": "()Lcom/aerospike/client/query/RecordSet;"
        },
        {
            "class_name": "com/aerospike/client/query/IndexType",
            "file_name": "IndexType.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "all",
            "desc": "()Lcom/aerospike/client/query/PartitionFilter;"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "id",
            "desc": "(I)Lcom/aerospike/client/query/PartitionFilter;"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "after",
            "desc": "(Lcom/aerospike/client/Key;)Lcom/aerospike/client/query/PartitionFilter;"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "range",
            "desc": "(II)Lcom/aerospike/client/query/PartitionFilter;"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "<init>",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "getBegin",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "getCount",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "getDigest",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "getPartitions",
            "desc": "()[Lcom/aerospike/client/query/PartitionStatus;"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "setPartitions",
            "desc": "([Lcom/aerospike/client/query/PartitionStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/query/PartitionFilter",
            "file_name": "PartitionFilter.java",
            "func_name": "isDone",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor$QueryThread",
            "file_name": "QueryExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/query/QueryExecutor;Lcom/aerospike/client/command/MultiCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor$QueryThread",
            "file_name": "QueryExecutor.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/QueryExecutor$QueryThread",
            "file_name": "QueryExecutor.java",
            "func_name": "stop",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/ServerCommand",
            "file_name": "ServerCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/query/Statement;J)V"
        },
        {
            "class_name": "com/aerospike/client/query/ServerCommand",
            "file_name": "ServerCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/query/ServerCommand",
            "file_name": "ServerCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/query/ServerCommand",
            "file_name": "ServerCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/query/ServerCommand",
            "file_name": "ServerCommand.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "get",
            "desc": "()Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "getHeader",
            "desc": "()Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "put",
            "desc": "(Lcom/aerospike/client/Bin;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "append",
            "desc": "(Lcom/aerospike/client/Bin;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "prepend",
            "desc": "(Lcom/aerospike/client/Bin;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "add",
            "desc": "(Lcom/aerospike/client/Bin;)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "touch",
            "desc": "()Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "delete",
            "desc": "()Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "array",
            "desc": "([Lcom/aerospike/client/Operation;)[Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/Operation",
            "file_name": "Operation.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/Operation$Type;)V"
        },
        {
            "class_name": "com/aerospike/client/BatchRead",
            "file_name": "BatchRead.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/BatchReadPolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/BatchRead",
            "file_name": "BatchRead.java",
            "func_name": "getType",
            "desc": "()Lcom/aerospike/client/BatchRecord$Type;"
        },
        {
            "class_name": "com/aerospike/client/BatchRead",
            "file_name": "BatchRead.java",
            "func_name": "equals",
            "desc": "(Lcom/aerospike/client/BatchRecord;)Z"
        },
        {
            "class_name": "com/aerospike/client/BatchRead",
            "file_name": "BatchRead.java",
            "func_name": "size",
            "desc": "(Lcom/aerospike/client/policy/Policy;)I"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/Map;Lcom/aerospike/client/cdt/MapOrder;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "getOrder",
            "desc": "()Lcom/aerospike/client/cdt/MapOrder;"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$MapValue",
            "file_name": "Value.java",
            "func_name": "getMapOrder",
            "desc": "(Ljava/util/Map;)Lcom/aerospike/client/cdt/MapOrder;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/ClientPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getReadPolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/Policy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getWritePolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/WritePolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getScanPolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/ScanPolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getQueryPolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/QueryPolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getBatchPolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/BatchPolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getBatchParentPolicyWriteDefault",
            "desc": "()Lcom/aerospike/client/policy/BatchPolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getBatchWritePolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/BatchWritePolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getBatchDeletePolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/BatchDeletePolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getBatchUDFPolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/BatchUDFPolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getInfoPolicyDefault",
            "desc": "()Lcom/aerospike/client/policy/InfoPolicy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "isConnected",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getNodes",
            "desc": "()[Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getNodeNames",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getNode",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "enableMetrics",
            "desc": "(Lcom/aerospike/client/metrics/MetricsPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "disableMetrics",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getClusterStats",
            "desc": "(Lcom/aerospike/client/listener/ClusterStatsListener;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getCluster",
            "desc": "()Lcom/aerospike/client/cluster/Cluster;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "put",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/WriteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Bin;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "append",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/WriteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Bin;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "prepend",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/WriteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Bin;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "add",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/WriteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Bin;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "delete",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/BatchRecordSequenceListener;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/policy/BatchDeletePolicy;[Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "truncate",
            "desc": "(Lcom/aerospike/client/policy/InfoPolicy;Ljava/lang/String;Ljava/lang/String;Ljava/util/Calendar;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "touch",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/WriteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "exists",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/ExistsSequenceListener;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "get",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "getHeader",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "operate",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/BatchRecordSequenceListener;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/policy/BatchWritePolicy;[Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "scanAll",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/policy/ScanPolicy;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "scanNode",
            "desc": "(Lcom/aerospike/client/policy/ScanPolicy;Lcom/aerospike/client/cluster/Node;Ljava/lang/String;Ljava/lang/String;Lcom/aerospike/client/ScanCallback;[Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "scanPartitions",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/policy/ScanPolicy;Lcom/aerospike/client/query/PartitionFilter;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "register",
            "desc": "(Lcom/aerospike/client/policy/Policy;Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/String;Lcom/aerospike/client/Language;)Lcom/aerospike/client/task/RegisterTask;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "registerUdfString",
            "desc": "(Lcom/aerospike/client/policy/Policy;Ljava/lang/String;Ljava/lang/String;Lcom/aerospike/client/Language;)Lcom/aerospike/client/task/RegisterTask;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "removeUdf",
            "desc": "(Lcom/aerospike/client/policy/InfoPolicy;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "execute",
            "desc": "(Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/query/Statement;[Lcom/aerospike/client/Operation;)Lcom/aerospike/client/task/ExecuteTask;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "query",
            "desc": "(Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;Lcom/aerospike/client/query/PartitionFilter;Lcom/aerospike/client/query/QueryListener;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "queryNode",
            "desc": "(Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;Lcom/aerospike/client/cluster/Node;)Lcom/aerospike/client/query/RecordSet;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "queryPartitions",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;Lcom/aerospike/client/query/PartitionFilter;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "queryAggregate",
            "desc": "(Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;)Lcom/aerospike/client/query/ResultSet;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "queryAggregateNode",
            "desc": "(Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;Lcom/aerospike/client/cluster/Node;)Lcom/aerospike/client/query/ResultSet;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "createIndex",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/IndexListener;Lcom/aerospike/client/policy/Policy;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/aerospike/client/query/IndexType;Lcom/aerospike/client/query/IndexCollectionType;[Lcom/aerospike/client/cdt/CTX;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "dropIndex",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/IndexListener;Lcom/aerospike/client/policy/Policy;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "info",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/InfoListener;Lcom/aerospike/client/policy/InfoPolicy;Lcom/aerospike/client/cluster/Node;[Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "setXDRFilter",
            "desc": "(Lcom/aerospike/client/policy/InfoPolicy;Ljava/lang/String;Ljava/lang/String;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "createUser",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "dropUser",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "changePassword",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "grantRoles",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "revokeRoles",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "createRole",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;Ljava/util/List;II)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "dropRole",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "grantPrivileges",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "revokePrivileges",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "setWhitelist",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "setQuotas",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;II)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "queryUser",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;)Lcom/aerospike/client/admin/User;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "queryUsers",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "queryRole",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;Ljava/lang/String;)Lcom/aerospike/client/admin/Role;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "queryRoles",
            "desc": "(Lcom/aerospike/client/policy/AdminPolicy;)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "buildCreateIndexInfoCommand",
            "desc": "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/aerospike/client/query/IndexType;Lcom/aerospike/client/query/IndexCollectionType;[Lcom/aerospike/client/cdt/CTX;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "buildDropIndexInfoCommand",
            "desc": "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "sendInfoCommand",
            "desc": "(Lcom/aerospike/client/policy/Policy;Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "sendIndexInfoCommand",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/IndexListener;Lcom/aerospike/client/policy/Policy;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient",
            "file_name": "AerospikeClient.java",
            "func_name": "parseIndexErrorCode",
            "desc": "(Ljava/lang/String;)I"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "([Lcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$ValueArray",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$Backoff",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(B)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteValue",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$GeoJSONValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$InfinityValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$LongValue",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "([BII)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "getBytes",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "getOffset",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ByteSegmentValue",
            "file_name": "Value.java",
            "func_name": "getLength",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$Connection",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(ILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Bin",
            "file_name": "Bin.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/Bin",
            "file_name": "Bin.java",
            "func_name": "asBlob",
            "desc": "(Ljava/lang/String;Ljava/lang/Object;)Lcom/aerospike/client/Bin;"
        },
        {
            "class_name": "com/aerospike/client/Bin",
            "file_name": "Bin.java",
            "func_name": "asNull",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/Bin;"
        },
        {
            "class_name": "com/aerospike/client/Bin",
            "file_name": "Bin.java",
            "func_name": "asGeoJSON",
            "desc": "(Ljava/lang/String;Ljava/lang/String;)Lcom/aerospike/client/Bin;"
        },
        {
            "class_name": "com/aerospike/client/Bin",
            "file_name": "Bin.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Bin",
            "file_name": "Bin.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Bin",
            "file_name": "Bin.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$WildcardValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Language",
            "file_name": "Language.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$StringValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$ScanTerminated",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/Info$NameValueParser",
            "file_name": "Info.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/Info;)V"
        },
        {
            "class_name": "com/aerospike/client/Info$NameValueParser",
            "file_name": "Info.java",
            "func_name": "next",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/Info$NameValueParser",
            "file_name": "Info.java",
            "func_name": "parseValue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Info$NameValueParser",
            "file_name": "Info.java",
            "func_name": "getName",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Info$NameValueParser",
            "file_name": "Info.java",
            "func_name": "getValue",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Info$NameValueParser",
            "file_name": "Info.java",
            "func_name": "getStringBase64",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$IntegerValue",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$InvalidNode",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "getBytes",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$HLLValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "get",
            "desc": "(Ljava/lang/Object;)Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "getAsBlob",
            "desc": "(Ljava/lang/Object;)Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "getAsGeoJSON",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "getAsHLL",
            "desc": "([B)Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "getAsNull",
            "desc": "()Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "getFromRecordObject",
            "desc": "(Ljava/lang/Object;)Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/Value",
            "file_name": "Value.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/BatchWrite",
            "file_name": "BatchWrite.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/BatchWritePolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/BatchWrite",
            "file_name": "BatchWrite.java",
            "func_name": "getType",
            "desc": "()Lcom/aerospike/client/BatchRecord$Type;"
        },
        {
            "class_name": "com/aerospike/client/BatchWrite",
            "file_name": "BatchWrite.java",
            "func_name": "equals",
            "desc": "(Lcom/aerospike/client/BatchRecord;)Z"
        },
        {
            "class_name": "com/aerospike/client/BatchWrite",
            "file_name": "BatchWrite.java",
            "func_name": "size",
            "desc": "(Lcom/aerospike/client/policy/Policy;)I"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord$Type",
            "file_name": "BatchRecord.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Log$Standard",
            "file_name": "Log.java",
            "func_name": "log",
            "desc": "(Lcom/aerospike/client/Log$Level;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Log$Standard",
            "file_name": "Log.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/BatchResults",
            "file_name": "BatchResults.java",
            "func_name": "<init>",
            "desc": "([Lcom/aerospike/client/BatchRecord;Z)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BooleanValue",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient$1",
            "file_name": "AerospikeClient.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/AerospikeClient;Lcom/aerospike/client/listener/IndexListener;Ljava/lang/String;Ljava/lang/String;Z)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient$1",
            "file_name": "AerospikeClient.java",
            "func_name": "onSuccess",
            "desc": "(Ljava/util/Map;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeClient$1",
            "file_name": "AerospikeClient.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(F)V"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$FloatValue",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/Map;II)V"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getValue",
            "desc": "(Ljava/lang/String;)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getString",
            "desc": "(Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getDouble",
            "desc": "(Ljava/lang/String;)D"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getFloat",
            "desc": "(Ljava/lang/String;)F"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getLong",
            "desc": "(Ljava/lang/String;)J"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getInt",
            "desc": "(Ljava/lang/String;)I"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getShort",
            "desc": "(Ljava/lang/String;)S"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getByte",
            "desc": "(Ljava/lang/String;)B"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getBoolean",
            "desc": "(Ljava/lang/String;)Z"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getList",
            "desc": "(Ljava/lang/String;)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getMap",
            "desc": "(Ljava/lang/String;)Ljava/util/Map;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getUDFResult",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getUDFError",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getGeoJSON",
            "desc": "(Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getGeoJSONString",
            "desc": "(Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getGeoJSONValue",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/Value$GeoJSONValue;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getHLLValue",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/Value$HLLValue;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "getTimeToLive",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Record",
            "file_name": "Record.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/List;Lcom/aerospike/client/cdt/MapOrder;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$SortedMapValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$Serialize",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Operation$Type",
            "file_name": "Operation.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;IIZ)V"
        },
        {
            "class_name": "com/aerospike/client/Operation$Type",
            "file_name": "Operation.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(S)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ShortValue",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord",
            "file_name": "BatchRecord.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;IZZ)V"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord",
            "file_name": "BatchRecord.java",
            "func_name": "prepare",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord",
            "file_name": "BatchRecord.java",
            "func_name": "setRecord",
            "desc": "(Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord",
            "file_name": "BatchRecord.java",
            "func_name": "setError",
            "desc": "(IZ)V"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord",
            "file_name": "BatchRecord.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord",
            "file_name": "BatchRecord.java",
            "func_name": "getType",
            "desc": "()Lcom/aerospike/client/BatchRecord$Type;"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord",
            "file_name": "BatchRecord.java",
            "func_name": "equals",
            "desc": "(Lcom/aerospike/client/BatchRecord;)Z"
        },
        {
            "class_name": "com/aerospike/client/BatchRecord",
            "file_name": "BatchRecord.java",
            "func_name": "size",
            "desc": "(Lcom/aerospike/client/policy/Policy;)I"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "([BI)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$BytesValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "getMessage",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "getBaseMessage",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "keepConnection",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "setNode",
            "desc": "(Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "getPolicy",
            "desc": "()Lcom/aerospike/client/policy/Policy;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "setPolicy",
            "desc": "(Lcom/aerospike/client/policy/Policy;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "getResultCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "getIteration",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "setIteration",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "getInDoubt",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException",
            "file_name": "AerospikeException.java",
            "func_name": "setInDoubt",
            "desc": "(ZI)V"
        },
        {
            "class_name": "com/aerospike/client/Key",
            "file_name": "Key.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;[BLjava/lang/String;Lcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/Key",
            "file_name": "Key.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Key",
            "file_name": "Key.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Key",
            "file_name": "Key.java",
            "func_name": "computeDigest",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;)[B"
        },
        {
            "class_name": "com/aerospike/client/Key",
            "file_name": "Key.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$BatchRecordArray",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "([Lcom/aerospike/client/BatchRecord;Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "request",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)Ljava/util/HashMap;"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "<init>",
            "desc": "([BI)V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "sendCommand",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "resizeBuffer",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "parseSingleResponse",
            "desc": "(Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "parseMultiResponse",
            "desc": "()Ljava/util/HashMap;"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "parseName",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "checkError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "getValue",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "getNameValueParser",
            "desc": "()Lcom/aerospike/client/Info$NameValueParser;"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "skipToValue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "skipDelimiter",
            "desc": "(C)V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "parseInt",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "parseString",
            "desc": "(CCC)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "expect",
            "desc": "(C)V"
        },
        {
            "class_name": "com/aerospike/client/Info",
            "file_name": "Info.java",
            "func_name": "getTruncatedResponse",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Log$Level",
            "file_name": "Log.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BoolIntValue",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$QueryTerminated",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/Host$HostParser",
            "file_name": "Host.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Host$HostParser",
            "file_name": "Host.java",
            "func_name": "parseHosts",
            "desc": "(I)[Lcom/aerospike/client/Host;"
        },
        {
            "class_name": "com/aerospike/client/Host$HostParser",
            "file_name": "Host.java",
            "func_name": "parseServiceHosts",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/Host$HostParser",
            "file_name": "Host.java",
            "func_name": "parseHost",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Host$HostParser",
            "file_name": "Host.java",
            "func_name": "parseString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/ResultCode",
            "file_name": "ResultCode.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/ResultCode",
            "file_name": "ResultCode.java",
            "func_name": "keepConnection",
            "desc": "(I)Z"
        },
        {
            "class_name": "com/aerospike/client/ResultCode",
            "file_name": "ResultCode.java",
            "func_name": "getResultString",
            "desc": "(I)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "serialize",
            "desc": "(Ljava/lang/Object;)[B"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$BlobValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/BatchDelete",
            "file_name": "BatchDelete.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/BatchDeletePolicy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/BatchDelete",
            "file_name": "BatchDelete.java",
            "func_name": "getType",
            "desc": "()Lcom/aerospike/client/BatchRecord$Type;"
        },
        {
            "class_name": "com/aerospike/client/BatchDelete",
            "file_name": "BatchDelete.java",
            "func_name": "equals",
            "desc": "(Lcom/aerospike/client/BatchRecord;)Z"
        },
        {
            "class_name": "com/aerospike/client/BatchDelete",
            "file_name": "BatchDelete.java",
            "func_name": "size",
            "desc": "(Lcom/aerospike/client/policy/Policy;)I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$BatchExists",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "([ZLjava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$InvalidNamespace",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;I)V"
        },
        {
            "class_name": "com/aerospike/client/BatchUDF",
            "file_name": "BatchUDF.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/BatchUDFPolicy;Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[Lcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/BatchUDF",
            "file_name": "BatchUDF.java",
            "func_name": "getType",
            "desc": "()Lcom/aerospike/client/BatchRecord$Type;"
        },
        {
            "class_name": "com/aerospike/client/BatchUDF",
            "file_name": "BatchUDF.java",
            "func_name": "equals",
            "desc": "(Lcom/aerospike/client/BatchRecord;)Z"
        },
        {
            "class_name": "com/aerospike/client/BatchUDF",
            "file_name": "BatchUDF.java",
            "func_name": "size",
            "desc": "(Lcom/aerospike/client/policy/Policy;)I"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$Parse",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(D)V"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "toInteger",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$DoubleValue",
            "file_name": "Value.java",
            "func_name": "toLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$AsyncQueueFull",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$BatchRecords",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "([Lcom/aerospike/client/Record;Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/Host",
            "file_name": "Host.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;Ljava/lang/String;I)V"
        },
        {
            "class_name": "com/aerospike/client/Host",
            "file_name": "Host.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Host",
            "file_name": "Host.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Host",
            "file_name": "Host.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Host",
            "file_name": "Host.java",
            "func_name": "parseHosts",
            "desc": "(Ljava/lang/String;I)[Lcom/aerospike/client/Host;"
        },
        {
            "class_name": "com/aerospike/client/Host",
            "file_name": "Host.java",
            "func_name": "parseServiceHosts",
            "desc": "(Ljava/lang/String;)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$Timeout",
            "file_name": "AerospikeException.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Node;III)V"
        },
        {
            "class_name": "com/aerospike/client/AerospikeException$Timeout",
            "file_name": "AerospikeException.java",
            "func_name": "getMessage",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$NullValue",
            "file_name": "Value.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "estimateSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "write",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "validateKeyType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "getType",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "getObject",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "getLuaValue",
            "desc": "(Lcom/aerospike/client/lua/LuaInstance;)Lorg/luaj/vm2/LuaValue;"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/Value$ListValue",
            "file_name": "Value.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "setLevel",
            "desc": "(Lcom/aerospike/client/Log$Level;)V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "setCallback",
            "desc": "(Lcom/aerospike/client/Log$Callback;)V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "setCallbackStandard",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "isSet",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "warnEnabled",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "infoEnabled",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "debugEnabled",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "error",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "warn",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "info",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "debug",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "log",
            "desc": "(Lcom/aerospike/client/Log$Level;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/Log",
            "file_name": "Log.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$CmdInt",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$CmdInt",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "put",
            "desc": "(Lcom/aerospike/client/cdt/MapPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "putItems",
            "desc": "(Lcom/aerospike/client/cdt/MapPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "increment",
            "desc": "(Lcom/aerospike/client/cdt/MapPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "clear",
            "desc": "(Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByKey",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByKeyList",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByKeyRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByKeyRelativeIndexRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByValue",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByValueList",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByValueRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByValueRelativeRankRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByIndex",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByIndexRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByRank",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "removeByRankRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "size",
            "desc": "(Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByKey",
            "desc": "(ILcom/aerospike/client/exp/Exp$Type;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByKeyRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByKeyList",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByKeyRelativeIndexRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByValue",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByValueRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByValueList",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByValueRelativeRankRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByIndex",
            "desc": "(ILcom/aerospike/client/exp/Exp$Type;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByIndexRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByRank",
            "desc": "(ILcom/aerospike/client/exp/Exp$Type;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getByRankRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "addWrite",
            "desc": "(Lcom/aerospike/client/exp/Exp;[B[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "addRead",
            "desc": "(Lcom/aerospike/client/exp/Exp;[BLcom/aerospike/client/exp/Exp$Type;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/MapExp",
            "file_name": "MapExp.java",
            "func_name": "getValueType",
            "desc": "(I)Lcom/aerospike/client/exp/Exp$Type;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$ExpBytes",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$ExpBytes",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Def",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/exp/Exp;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Def",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "init",
            "desc": "(Lcom/aerospike/client/operation/HLLPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "add",
            "desc": "(Lcom/aerospike/client/operation/HLLPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "getCount",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "getUnion",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "getUnionCount",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "getIntersectCount",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "getSimilarity",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "describe",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "mayContain",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "addWrite",
            "desc": "(Lcom/aerospike/client/exp/Exp;[B)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/HLLExp",
            "file_name": "HLLExp.java",
            "func_name": "addRead",
            "desc": "(Lcom/aerospike/client/exp/Exp;[BLcom/aerospike/client/exp/Exp$Type;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Int",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Int",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "resize",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;ILcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "insert",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "remove",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "set",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "or",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "xor",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "and",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "not",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "lshift",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "rshift",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "add",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;ZLcom/aerospike/client/operation/BitOverflowAction;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "subtract",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;ZLcom/aerospike/client/operation/BitOverflowAction;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "setInt",
            "desc": "(Lcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "get",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "count",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "lscan",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "rscan",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "getInt",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;ZLcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "packMath",
            "desc": "(ILcom/aerospike/client/operation/BitPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;ZLcom/aerospike/client/operation/BitOverflowAction;)[B"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "packGetInt",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Z)[B"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "addWrite",
            "desc": "(Lcom/aerospike/client/exp/Exp;[B)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/BitExp",
            "file_name": "BitExp.java",
            "func_name": "addRead",
            "desc": "(Lcom/aerospike/client/exp/Exp;[BLcom/aerospike/client/exp/Exp$Type;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Module",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/exp/Exp;[BII)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Module",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Geo",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Geo",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$MapVal",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/Map;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$MapVal",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Float",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(D)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Float",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/ExpOperation",
            "file_name": "ExpOperation.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/ExpOperation",
            "file_name": "ExpOperation.java",
            "func_name": "write",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/exp/Expression;I)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/exp/ExpOperation",
            "file_name": "ExpOperation.java",
            "func_name": "read",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/exp/Expression;I)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/exp/ExpOperation",
            "file_name": "ExpOperation.java",
            "func_name": "createOperation",
            "desc": "(Lcom/aerospike/client/Operation$Type;Ljava/lang/String;Lcom/aerospike/client/exp/Expression;I)Lcom/aerospike/client/Operation;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$CmdStr",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(ILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$CmdStr",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Str",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Str",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$CmdExp",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(I[Lcom/aerospike/client/exp/Exp;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$CmdExp",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$ListVal",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$ListVal",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "build",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Expression;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "key",
            "desc": "(Lcom/aerospike/client/exp/Exp$Type;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "keyExists",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "bin",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/exp/Exp$Type;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "intBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "floatBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "stringBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "boolBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "blobBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "geoBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "listBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "mapBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "hllBin",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "binExists",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "binType",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "setName",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "deviceSize",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "memorySize",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "lastUpdate",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "sinceUpdate",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "voidTime",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "ttl",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "isTombstone",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "digestModulo",
            "desc": "(I)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "regexCompare",
            "desc": "(Ljava/lang/String;ILcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "geoCompare",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "geo",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "val",
            "desc": "(Ljava/util/Map;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "nil",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "inf",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "wildcard",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "not",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "and",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "or",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "exclusive",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "eq",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "ne",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "gt",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "ge",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "lt",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "le",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "add",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "sub",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "mul",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "div",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "pow",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "log",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "mod",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "abs",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "floor",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "ceil",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "toInt",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "toFloat",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "intAnd",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "intOr",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "intXor",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "intNot",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "lshift",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "rshift",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "arshift",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "count",
            "desc": "(Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "lscan",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "rscan",
            "desc": "(Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "min",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "max",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "cond",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "let",
            "desc": "([Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "def",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/exp/Exp;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "var",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "unknown",
            "desc": "()Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp",
            "file_name": "Exp.java",
            "func_name": "expr",
            "desc": "(Lcom/aerospike/client/exp/Expression;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Let",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "([Lcom/aerospike/client/exp/Exp;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Let",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Nil",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Bool",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Bool",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Infinity",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/ExpReadFlags",
            "file_name": "ExpReadFlags.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Cmd",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Cmd",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Wildcard",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "<init>",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "fromBytes",
            "desc": "([B)Lcom/aerospike/client/exp/Expression;"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "fromBase64",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/exp/Expression;"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "getBytes",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "getBase64",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "size",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "write",
            "desc": "(Lcom/aerospike/client/command/Command;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/exp/Expression",
            "file_name": "Expression.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Regex",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/exp/Exp;Ljava/lang/String;I)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Regex",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Type",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;II)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Type",
            "file_name": "Exp.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Blob",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Blob",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/ExpWriteFlags",
            "file_name": "ExpWriteFlags.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Bin",
            "file_name": "Exp.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/exp/Exp$Type;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/Exp$Bin",
            "file_name": "Exp.java",
            "func_name": "pack",
            "desc": "(Lcom/aerospike/client/util/Packer;)V"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "append",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "appendItems",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "insert",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "insertItems",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "increment",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "set",
            "desc": "(Lcom/aerospike/client/cdt/ListPolicy;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "clear",
            "desc": "(Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "sort",
            "desc": "(ILcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "removeByValue",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "removeByValueList",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "removeByValueRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "removeByValueRelativeRankRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "removeByIndex",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "removeByIndexRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "removeByRank",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "removeByRankRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "size",
            "desc": "(Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getByValue",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getByValueRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getByValueList",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getByValueRelativeRankRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getByIndex",
            "desc": "(ILcom/aerospike/client/exp/Exp$Type;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getByIndexRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getByRank",
            "desc": "(ILcom/aerospike/client/exp/Exp$Type;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getByRankRange",
            "desc": "(ILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "addWrite",
            "desc": "(Lcom/aerospike/client/exp/Exp;[B[Lcom/aerospike/client/cdt/CTX;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "addRead",
            "desc": "(Lcom/aerospike/client/exp/Exp;[BLcom/aerospike/client/exp/Exp$Type;)Lcom/aerospike/client/exp/Exp;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "getValueType",
            "desc": "(I)Lcom/aerospike/client/exp/Exp$Type;"
        },
        {
            "class_name": "com/aerospike/client/exp/ListExp",
            "file_name": "ListExp.java",
            "func_name": "packRangeOperation",
            "desc": "(IILcom/aerospike/client/exp/Exp;Lcom/aerospike/client/exp/Exp;[Lcom/aerospike/client/cdt/CTX;)[B"
        },
        {
            "class_name": "com/aerospike/test/util/LogTestName",
            "file_name": "LogTestName.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/util/LogTestName",
            "file_name": "LogTestName.java",
            "func_name": "starting",
            "desc": "(Lorg/junit/runner/Description;)V"
        },
        {
            "class_name": "com/aerospike/test/util/LogTestName",
            "file_name": "LogTestName.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/util/TestBase",
            "file_name": "TestBase.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/util/TestBase",
            "file_name": "TestBase.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/util/Args",
            "file_name": "Args.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/util/Args",
            "file_name": "Args.java",
            "func_name": "logUsage",
            "desc": "(Lorg/apache/commons/cli/Options;)V"
        },
        {
            "class_name": "com/aerospike/test/util/Args",
            "file_name": "Args.java",
            "func_name": "setServerSpecific",
            "desc": "(Lcom/aerospike/client/AerospikeClient;)V"
        },
        {
            "class_name": "com/aerospike/test/util/Args",
            "file_name": "Args.java",
            "func_name": "parseInt",
            "desc": "(Ljava/lang/String;Ljava/lang/String;)I"
        },
        {
            "class_name": "com/aerospike/test/util/Args",
            "file_name": "Args.java",
            "func_name": "parseBoolean",
            "desc": "(Ljava/lang/String;Ljava/lang/String;)Z"
        },
        {
            "class_name": "com/aerospike/test/util/Args",
            "file_name": "Args.java",
            "func_name": "parseString",
            "desc": "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/test/util/Args",
            "file_name": "Args.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/TestSync",
            "file_name": "TestSync.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/TestSync",
            "file_name": "TestSync.java",
            "func_name": "init",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/TestSync",
            "file_name": "TestSync.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/TestSync",
            "file_name": "TestSync.java",
            "func_name": "assertRecordFound",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/TestSync",
            "file_name": "TestSync.java",
            "func_name": "assertBinEqual",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;Ljava/lang/String;I)V"
        },
        {
            "class_name": "com/aerospike/test/sync/TestSync",
            "file_name": "TestSync.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/NodeValidator;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "createMinConnections",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "refresh",
            "desc": "(Lcom/aerospike/client/cluster/Peers;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "shouldLogin",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "login",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "signalLogin",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "verifyNodeName",
            "desc": "(Ljava/util/HashMap;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "verifyPeersGeneration",
            "desc": "(Ljava/util/HashMap;Lcom/aerospike/client/cluster/Peers;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "restart",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "verifyPartitionGeneration",
            "desc": "(Ljava/util/HashMap;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "verifyRebalanceGeneration",
            "desc": "(Ljava/util/HashMap;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "refreshPeers",
            "desc": "(Lcom/aerospike/client/cluster/Peers;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "findPeerNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Peers;Ljava/lang/String;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "refreshPartitions",
            "desc": "(Lcom/aerospike/client/cluster/Peers;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "refreshRacks",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "refreshFailed",
            "desc": "(Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "createConnections",
            "desc": "(Lcom/aerospike/client/cluster/Pool;I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "createConnection",
            "desc": "(Lcom/aerospike/client/cluster/Pool;I)Lcom/aerospike/client/cluster/Connection;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getConnection",
            "desc": "(Lcom/aerospike/client/command/SyncCommand;III)Lcom/aerospike/client/cluster/Connection;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "putConnection",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeConnection",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeConnectionOnError",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeIdleConnection",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "balanceConnections",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getConnectionStats",
            "desc": "()Lcom/aerospike/client/cluster/ConnectionStats;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getAsyncConnection",
            "desc": "(ILjava/nio/ByteBuffer;)Lcom/aerospike/client/async/AsyncConnection;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "reserveAsyncConnectionSlot",
            "desc": "(I)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "connectionOpened",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "putAsyncConnection",
            "desc": "(Lcom/aerospike/client/async/AsyncConnection;I)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeAsyncConnection",
            "desc": "(Lcom/aerospike/client/async/AsyncConnection;I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeAsyncIdleConnection",
            "desc": "(Lcom/aerospike/client/async/AsyncConnection;I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "decrAsyncConnection",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getAsyncPool",
            "desc": "(I)Lcom/aerospike/client/cluster/Node$AsyncPool;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "balanceAsyncConnections",
            "desc": "(Lcom/aerospike/client/async/EventLoop;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeIdleAsyncConnections",
            "desc": "(Lcom/aerospike/client/cluster/Node$AsyncPool;I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getAsyncConnectionStats",
            "desc": "()Lcom/aerospike/client/cluster/ConnectionStats;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "enableMetrics",
            "desc": "(Lcom/aerospike/client/metrics/MetricsPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getMetrics",
            "desc": "()Lcom/aerospike/client/metrics/NodeMetrics;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "addLatency",
            "desc": "(Lcom/aerospike/client/metrics/LatencyType;J)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "incrErrorRate",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "resetErrorRate",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "errorRateWithinLimit",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "validateErrorCount",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "addError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "addTimeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getErrorCount",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getTimeoutCount",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getHost",
            "desc": "()Lcom/aerospike/client/Host;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "isActive",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getName",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getAddress",
            "desc": "()Ljava/net/InetSocketAddress;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getSessionToken",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getPeersGeneration",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getPartitionGeneration",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "getRebalanceGeneration",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "hasRack",
            "desc": "(Ljava/lang/String;I)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "hasQueryShow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "hasBatchAny",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "hasPartitionQuery",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeConnections",
            "desc": "(Ljava/util/concurrent/atomic/AtomicInteger;I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeAsyncConnections",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "closeSyncConnections",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node",
            "file_name": "Node.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/TlsPolicy;Ljava/lang/String;Ljava/net/InetSocketAddress;ILcom/aerospike/client/cluster/Node;Lcom/aerospike/client/cluster/Pool;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "validateServerCertificate",
            "desc": "(Lcom/aerospike/client/policy/TlsPolicy;Ljava/lang/String;Ljava/security/cert/X509Certificate;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "write",
            "desc": "([BI)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "readFully",
            "desc": "([BIB)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "read",
            "desc": "([BII)I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "isClosed",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "setTimeout",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "getInputStream",
            "desc": "()Ljava/io/InputStream;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "getLastUsed",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "updateLastUsed",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection",
            "file_name": "Connection.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/RackParser",
            "file_name": "RackParser.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/RackParser",
            "file_name": "RackParser.java",
            "func_name": "getGeneration",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/RackParser",
            "file_name": "RackParser.java",
            "func_name": "getRacks",
            "desc": "()Ljava/util/HashMap;"
        },
        {
            "class_name": "com/aerospike/client/cluster/RackParser",
            "file_name": "RackParser.java",
            "func_name": "parseGeneration",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/RackParser",
            "file_name": "RackParser.java",
            "func_name": "parseRacks",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster$4",
            "file_name": "Cluster.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/async/EventState;JLjava/util/concurrent/atomic/AtomicBoolean;Ljava/util/concurrent/atomic/AtomicInteger;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster$4",
            "file_name": "Cluster.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster$3",
            "file_name": "Cluster.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/async/EventLoop;[Lcom/aerospike/client/async/EventLoopStats;[Lcom/aerospike/client/cluster/Node;[[Lcom/aerospike/client/cluster/ConnectionStats;Ljava/util/concurrent/atomic/AtomicInteger;[Lcom/aerospike/client/async/EventLoop;[Lcom/aerospike/client/cluster/NodeStats;Lcom/aerospike/client/listener/ClusterStatsListener;Lcom/aerospike/client/cluster/Cluster;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster$3",
            "file_name": "Cluster.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster$2",
            "file_name": "Cluster.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/async/EventLoop;[Lcom/aerospike/client/async/EventLoopStats;[Lcom/aerospike/client/cluster/Node;[[Lcom/aerospike/client/cluster/ConnectionStats;Ljava/util/concurrent/atomic/AtomicInteger;Lcom/aerospike/client/async/Monitor;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster$2",
            "file_name": "Cluster.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster$1",
            "file_name": "Cluster.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/async/EventLoop;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster$1",
            "file_name": "Cluster.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/PeerParser",
            "file_name": "PeerParser.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Connection;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/PeerParser",
            "file_name": "PeerParser.java",
            "func_name": "parsePeer",
            "desc": "()Lcom/aerospike/client/cluster/Peer;"
        },
        {
            "class_name": "com/aerospike/client/cluster/PeerParser",
            "file_name": "PeerParser.java",
            "func_name": "parseHosts",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/cluster/PeerParser",
            "file_name": "PeerParser.java",
            "func_name": "parseHost",
            "desc": "()Lcom/aerospike/client/Host;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partitions",
            "file_name": "Partitions.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Partitions;I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ThreadDaemonFactory",
            "file_name": "ThreadDaemonFactory.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ThreadDaemonFactory",
            "file_name": "ThreadDaemonFactory.java",
            "func_name": "newThread",
            "desc": "(Ljava/lang/Runnable;)Ljava/lang/Thread;"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Connection;Lcom/aerospike/client/cluster/Node;ILcom/aerospike/client/cluster/Connection$ReadTimeout;Z)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "drain",
            "desc": "([B)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "isComplete",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "abort",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "recover",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "drainHeader",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "drainDetail",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "copyHeaderBuf",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "getSize",
            "desc": "([B)I"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionRecover",
            "file_name": "ConnectionRecover.java",
            "func_name": "parseProto",
            "desc": "([BI)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Peer",
            "file_name": "Peer.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "seedNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/Host;Lcom/aerospike/client/cluster/Peers;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "validatePeers",
            "desc": "(Lcom/aerospike/client/cluster/Peers;Lcom/aerospike/client/cluster/Node;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "validateNode",
            "desc": "(Ljava/util/HashMap;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "getAddresses",
            "desc": "(Lcom/aerospike/client/Host;)[Ljava/net/InetAddress;"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "validateAddress",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Ljava/net/InetAddress;Ljava/lang/String;IZ)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "validatePartitionGeneration",
            "desc": "(Ljava/util/HashMap;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "setFeatures",
            "desc": "(Ljava/util/HashMap;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "validateClusterName",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Ljava/util/HashMap;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "setAddress",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Ljava/util/HashMap;Ljava/lang/String;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator",
            "file_name": "NodeValidator.java",
            "func_name": "setAliases",
            "desc": "(Ljava/net/InetAddress;Ljava/lang/String;I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ClusterStats",
            "file_name": "ClusterStats.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;[Lcom/aerospike/client/cluster/NodeStats;[Lcom/aerospike/client/async/EventLoopStats;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ClusterStats",
            "file_name": "ClusterStats.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeValidator$SwitchClear",
            "file_name": "NodeValidator.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Connection;[B)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "write",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)Lcom/aerospike/client/cluster/Partition;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "read",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)Lcom/aerospike/client/cluster/Partition;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getReplicaSC",
            "desc": "(Lcom/aerospike/client/policy/Policy;)Lcom/aerospike/client/policy/Replica;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getNodeBatchWrite",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/Key;Lcom/aerospike/client/policy/Replica;Lcom/aerospike/client/cluster/Node;I)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getNodeBatchRead",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/Key;Lcom/aerospike/client/policy/Replica;Lcom/aerospike/client/policy/Replica;Lcom/aerospike/client/cluster/Node;II)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/policy/Replica;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getPartitionId",
            "desc": "([B)I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getNodeQuery",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Partitions;Lcom/aerospike/client/query/PartitionStatus;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getNodeRead",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getNodeWrite",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "prepareRetryRead",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "prepareRetryWrite",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getSequenceNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getRackNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getMasterNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "getMasterProlesNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Partition",
            "file_name": "Partition.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Connection$ReadTimeout",
            "file_name": "Connection.java",
            "func_name": "<init>",
            "desc": "([BIIB)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Pool",
            "file_name": "Pool.java",
            "func_name": "<init>",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Pool",
            "file_name": "Pool.java",
            "func_name": "capacity",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Pool",
            "file_name": "Pool.java",
            "func_name": "excess",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Pool",
            "file_name": "Pool.java",
            "func_name": "offer",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Pool",
            "file_name": "Pool.java",
            "func_name": "poll",
            "desc": "()Lcom/aerospike/client/cluster/Connection;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Pool",
            "file_name": "Pool.java",
            "func_name": "closeIdle",
            "desc": "(Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Pool",
            "file_name": "Pool.java",
            "func_name": "size",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeStats",
            "file_name": "NodeStats.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/NodeStats",
            "file_name": "NodeStats.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/cluster/PartitionParser",
            "file_name": "PartitionParser.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Connection;Lcom/aerospike/client/cluster/Node;Ljava/util/HashMap;I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/PartitionParser",
            "file_name": "PartitionParser.java",
            "func_name": "getGeneration",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/PartitionParser",
            "file_name": "PartitionParser.java",
            "func_name": "isPartitionMapCopied",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/PartitionParser",
            "file_name": "PartitionParser.java",
            "func_name": "getPartitionMap",
            "desc": "()Ljava/util/HashMap;"
        },
        {
            "class_name": "com/aerospike/client/cluster/PartitionParser",
            "file_name": "PartitionParser.java",
            "func_name": "parseGeneration",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/PartitionParser",
            "file_name": "PartitionParser.java",
            "func_name": "parseReplicasAll",
            "desc": "(Lcom/aerospike/client/cluster/Node;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/PartitionParser",
            "file_name": "PartitionParser.java",
            "func_name": "decodeBitmap",
            "desc": "(Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/cluster/Partitions;III)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/PartitionParser",
            "file_name": "PartitionParser.java",
            "func_name": "copyPartitionMap",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionStats",
            "file_name": "ConnectionStats.java",
            "func_name": "<init>",
            "desc": "(IIII)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/ConnectionStats",
            "file_name": "ConnectionStats.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/ClientPolicy;[Lcom/aerospike/client/Host;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "forceSingleNode",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "initTendThread",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "addSeeds",
            "desc": "([Lcom/aerospike/client/Host;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "findSeed",
            "desc": "(Lcom/aerospike/client/Host;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "waitTillStabilized",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "tend",
            "desc": "(ZZ)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "seedNode",
            "desc": "(Lcom/aerospike/client/cluster/Peers;Z)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "addSeedAndPeers",
            "desc": "(Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/cluster/Peers;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "refreshPeers",
            "desc": "(Lcom/aerospike/client/cluster/Peers;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "createNode",
            "desc": "(Lcom/aerospike/client/cluster/NodeValidator;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "findNodesToRemove",
            "desc": "(I)Ljava/util/ArrayList;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "findNodeInPartitionMap",
            "desc": "(Lcom/aerospike/client/cluster/Node;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "addNodes",
            "desc": "(Ljava/util/HashMap;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "addNode",
            "desc": "(Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "removeNodes",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "removeNodesCopy",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "findNode",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "isConnected",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getRandomNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getNodes",
            "desc": "()[Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "validateNodes",
            "desc": "()[Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getNode",
            "desc": "(Ljava/lang/String;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "isConnCurrentTran",
            "desc": "(J)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "isConnCurrentTrim",
            "desc": "(J)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "recoverConnection",
            "desc": "(Lcom/aerospike/client/cluster/ConnectionRecover;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "processRecoverQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "enableMetrics",
            "desc": "(Lcom/aerospike/client/metrics/MetricsPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "disableMetrics",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getEventLoopArray",
            "desc": "()[Lcom/aerospike/client/async/EventLoop;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getStats",
            "desc": "(Lcom/aerospike/client/listener/ClusterStatsListener;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "interruptTendSleep",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "printPartitionMap",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "changePassword",
            "desc": "([B[B[B)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "setMaxErrorRate",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "setErrorRateWindow",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "supportsPartitionQuery",
            "desc": "([Lcom/aerospike/client/cluster/Node;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getThreadPool",
            "desc": "()Ljava/util/concurrent/ExecutorService;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getClusterName",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "validateClusterName",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getUser",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getPassword",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getPasswordHash",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "isActive",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "addTran",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getTranCount",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "addRetry",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "addRetries",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getRetryCount",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "addDelayQueueTimeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getDelayQueueTimeoutCount",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getThreadsInUse",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getRecoverQueueSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "getInvalidNodeCount",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "closeEventLoop",
            "desc": "(Ljava/util/concurrent/atomic/AtomicInteger;Lcom/aerospike/client/async/EventState;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "waitAsyncComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Cluster",
            "file_name": "Cluster.java",
            "func_name": "notifyAsyncComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "<init>",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "reserve",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "addFirst",
            "desc": "(Lcom/aerospike/client/async/AsyncConnection;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "excess",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "connectionClosed",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "signalRemove",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "handleRemove",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "removeClosed",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$AsyncPool",
            "file_name": "Node.java",
            "func_name": "closeConnections",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$1",
            "file_name": "Node.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Node;IILcom/aerospike/client/async/Monitor;Ljava/util/concurrent/atomic/AtomicInteger;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$1",
            "file_name": "Node.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$2",
            "file_name": "Node.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/async/EventLoop;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$2",
            "file_name": "Node.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$3",
            "file_name": "Node.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Node;Ljava/util/concurrent/atomic/AtomicInteger;Lcom/aerospike/client/async/EventState;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Node$3",
            "file_name": "Node.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Peers",
            "file_name": "Peers.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Peers",
            "file_name": "Peers.java",
            "func_name": "hasFailed",
            "desc": "(Lcom/aerospike/client/Host;)Z"
        },
        {
            "class_name": "com/aerospike/client/cluster/Peers",
            "file_name": "Peers.java",
            "func_name": "fail",
            "desc": "(Lcom/aerospike/client/Host;)V"
        },
        {
            "class_name": "com/aerospike/client/cluster/Peers",
            "file_name": "Peers.java",
            "func_name": "getInvalidCount",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/cluster/Peers",
            "file_name": "Peers.java",
            "func_name": "clusterInitError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Utf8",
            "file_name": "Utf8.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Utf8",
            "file_name": "Utf8.java",
            "func_name": "encodedLength",
            "desc": "(Ljava/lang/CharSequence;)I"
        },
        {
            "class_name": "com/aerospike/client/util/Utf8",
            "file_name": "Utf8.java",
            "func_name": "encodedLengthGeneral",
            "desc": "(Ljava/lang/CharSequence;I)I"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "<init>",
            "desc": "([BII)V"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getMap",
            "desc": "(Ljava/util/Map;)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getList",
            "desc": "(Ljava/util/List;)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getJavaBlob",
            "desc": "(Ljava/lang/Object;)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getBlob",
            "desc": "([B)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getString",
            "desc": "(Ljava/lang/String;)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getLong",
            "desc": "(J)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getDouble",
            "desc": "(D)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getBoolean",
            "desc": "(Z)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker$ObjectUnpacker",
            "file_name": "Unpacker.java",
            "func_name": "getGeoJSON",
            "desc": "(Ljava/lang/String;)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/ThreadLocalData",
            "file_name": "ThreadLocalData.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/ThreadLocalData",
            "file_name": "ThreadLocalData.java",
            "func_name": "getBuffer",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/util/ThreadLocalData",
            "file_name": "ThreadLocalData.java",
            "func_name": "resizeBuffer",
            "desc": "(I)[B"
        },
        {
            "class_name": "com/aerospike/client/util/ThreadLocalData",
            "file_name": "ThreadLocalData.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "sleep",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "getErrorMessage",
            "desc": "(Ljava/lang/Throwable;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "getStackTrace",
            "desc": "(Ljava/lang/Throwable;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "readFile",
            "desc": "(Ljava/io/File;)[B"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "readResource",
            "desc": "(Ljava/lang/ClassLoader;Ljava/lang/String;)[B"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "toBigIntegerArray",
            "desc": "(Ljava/lang/String;)[Ljava/math/BigInteger;"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "toTimeStamp",
            "desc": "(Ljava/lang/String;Ljava/lang/String;I)J"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "fromTimeStamp",
            "desc": "(JLjava/lang/String;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "toLong",
            "desc": "(Ljava/lang/Object;)J"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "toInt",
            "desc": "(Ljava/lang/Object;)I"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "toShort",
            "desc": "(Ljava/lang/Object;)S"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "toByte",
            "desc": "(Ljava/lang/Object;)B"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "toBoolean",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/util/Util",
            "file_name": "Util.java",
            "func_name": "getProcessCpuLoad",
            "desc": "()D"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "<init>",
            "desc": "([BII)V"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackList",
            "desc": "(I)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackMap",
            "desc": "(I)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackHashMap",
            "desc": "(I)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackTreeMap",
            "desc": "(I)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackMapAsList",
            "desc": "(I)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackBlob",
            "desc": "(I)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackObject",
            "desc": "([BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackObjectList",
            "desc": "([BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Unpacker",
            "file_name": "Unpacker.java",
            "func_name": "unpackObjectMap",
            "desc": "([BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "pack",
            "desc": "(Ljava/util/List;Lcom/aerospike/client/cdt/MapOrder;)[B"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packValueArray",
            "desc": "([Lcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packValueList",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packList",
            "desc": "(Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packArrayBegin",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packValueMap",
            "desc": "(Ljava/util/Map;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packMap",
            "desc": "(Ljava/util/List;Lcom/aerospike/client/cdt/MapOrder;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packMapBegin",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packBytes",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packParticleBytes",
            "desc": "([BII)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packBlob",
            "desc": "(Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packGeoJSON",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packByteArrayBegin",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packObject",
            "desc": "(Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packByteBuffer",
            "desc": "(Ljava/nio/ByteBuffer;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packLong",
            "desc": "(IJ)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packInt",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packString",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packParticleString",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packStringBegin",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packByteArray",
            "desc": "([BII)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packDouble",
            "desc": "(D)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packFloat",
            "desc": "(F)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packShort",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packRawShort",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packByte",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packBoolean",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packNil",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packInfinity",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "packWildcard",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "resize",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/util/Packer",
            "file_name": "Packer.java",
            "func_name": "toByteArray",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift",
            "file_name": "RandomShift.java",
            "func_name": "instance",
            "desc": "()Lcom/aerospike/client/util/RandomShift;"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift",
            "file_name": "RandomShift.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift",
            "file_name": "RandomShift.java",
            "func_name": "nextString",
            "desc": "(I)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift",
            "file_name": "RandomShift.java",
            "func_name": "nextBytes",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift",
            "file_name": "RandomShift.java",
            "func_name": "nextInt",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift",
            "file_name": "RandomShift.java",
            "func_name": "nextLong",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift",
            "file_name": "RandomShift.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Crypto",
            "file_name": "Crypto.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Crypto",
            "file_name": "Crypto.java",
            "func_name": "computeDigest",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Value;)[B"
        },
        {
            "class_name": "com/aerospike/client/util/Crypto",
            "file_name": "Crypto.java",
            "func_name": "decodeBase64",
            "desc": "([BII)[B"
        },
        {
            "class_name": "com/aerospike/client/util/Crypto",
            "file_name": "Crypto.java",
            "func_name": "encodeBase64",
            "desc": "([B)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/util/ThreadLocalData$1",
            "file_name": "ThreadLocalData.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/ThreadLocalData$1",
            "file_name": "ThreadLocalData.java",
            "func_name": "initialValue",
            "desc": "()[B"
        },
        {
            "class_name": "com/aerospike/client/util/Packer$BufferItem",
            "file_name": "Packer.java",
            "func_name": "<init>",
            "desc": "([BI)V"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift$1",
            "file_name": "RandomShift.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/RandomShift$1",
            "file_name": "RandomShift.java",
            "func_name": "initialValue",
            "desc": "()Lcom/aerospike/client/util/RandomShift;"
        },
        {
            "class_name": "com/aerospike/client/util/Version",
            "file_name": "Version.java",
            "func_name": "getServerVersion",
            "desc": "(Lcom/aerospike/client/policy/InfoPolicy;Lcom/aerospike/client/cluster/Node;)Lcom/aerospike/client/util/Version;"
        },
        {
            "class_name": "com/aerospike/client/util/Version",
            "file_name": "Version.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/util/Version",
            "file_name": "Version.java",
            "func_name": "isGreaterEqual",
            "desc": "(III)Z"
        },
        {
            "class_name": "com/aerospike/client/util/Version",
            "file_name": "Version.java",
            "func_name": "isLess",
            "desc": "(III)Z"
        },
        {
            "class_name": "com/aerospike/client/util/Version",
            "file_name": "Version.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/util/Version",
            "file_name": "Version.java",
            "func_name": "equals",
            "desc": "(Ljava/lang/Object;)Z"
        },
        {
            "class_name": "com/aerospike/client/util/Version",
            "file_name": "Version.java",
            "func_name": "hashCode",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/util/Pack",
            "file_name": "Pack.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/util/Pack",
            "file_name": "Pack.java",
            "func_name": "pack",
            "desc": "([Lcom/aerospike/client/cdt/CTX;)[B"
        },
        {
            "class_name": "com/aerospike/client/util/Pack",
            "file_name": "Pack.java",
            "func_name": "init",
            "desc": "(Lcom/aerospike/client/util/Packer;[Lcom/aerospike/client/cdt/CTX;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "callRead",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "callModify",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "get",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "count",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "lscan",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "rscan",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "getInt",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "resize",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "insert",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "remove",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "set",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "or",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "xor",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "and",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "not",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "lshift",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "rshift",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "add",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "subtract",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBitExp",
            "file_name": "TestBitExp.java",
            "func_name": "setInt",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "assertBitModifyOperations",
            "desc": "([B[B[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "assertThrows",
            "desc": "(Ljava/lang/Class;I[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitBin",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitSet",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitLShift",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitRShift",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitOr",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitXor",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitAnd",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitNot",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitAdd",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitSub",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitSetInt",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitGet",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "assertBitReadOperation",
            "desc": "([B[Ljava/lang/Long;[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitCount",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitLScan",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitRScan",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitGetInt",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "assertBitModifyRegion",
            "desc": "(III[B[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "assertBitModifyInsert",
            "desc": "(III[B[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitSetEx",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitLShiftEx",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitRShiftEx",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitAndEx",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitNotEx",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitInsertEx",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitAddEx",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitSubEx",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitNullBlob",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "operateBitResize",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateBit",
            "file_name": "TestOperateBit.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$4",
            "file_name": "TestExpOperation.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/sync/basic/TestExpOperation;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$4",
            "file_name": "TestExpOperation.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$5",
            "file_name": "TestExpOperation.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/sync/basic/TestExpOperation;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$5",
            "file_name": "TestExpOperation.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$6",
            "file_name": "TestExpOperation.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/sync/basic/TestExpOperation;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$6",
            "file_name": "TestExpOperation.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$7",
            "file_name": "TestExpOperation.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/sync/basic/TestExpOperation;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$7",
            "file_name": "TestExpOperation.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$1",
            "file_name": "TestExpOperation.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/sync/basic/TestExpOperation;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$1",
            "file_name": "TestExpOperation.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$2",
            "file_name": "TestExpOperation.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/sync/basic/TestExpOperation;Lcom/aerospike/client/exp/Expression;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$2",
            "file_name": "TestExpOperation.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$3",
            "file_name": "TestExpOperation.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/sync/basic/TestExpOperation;Lcom/aerospike/client/exp/Expression;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation$3",
            "file_name": "TestExpOperation.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap$1",
            "file_name": "TestOperateMap.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/test/sync/basic/TestOperateMap;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap$1",
            "file_name": "TestOperateMap.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "setUp",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReadEvalError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReadOnWriteEvalError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expWriteEvalError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expWritePolicyError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReturnsUnknown",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReturnsNil",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReturnsInt",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReturnsFloat",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReturnsString",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReturnsBlob",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReturnsBoolean",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expReturnsHLL",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpOperation",
            "file_name": "TestExpOperation.java",
            "func_name": "expMerge",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestScan",
            "file_name": "TestScan.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestScan",
            "file_name": "TestScan.java",
            "func_name": "scanParallel",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestScan",
            "file_name": "TestScan.java",
            "func_name": "scanSeries",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestScan",
            "file_name": "TestScan.java",
            "func_name": "scanCallback",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/Record;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestAdd",
            "file_name": "TestAdd.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestAdd",
            "file_name": "TestAdd.java",
            "func_name": "add",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "createData",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "printDebug",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertThrows",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Key;Ljava/lang/Class;I[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertSuccess",
            "desc": "(Ljava/lang/String;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;)Lcom/aerospike/client/Record;"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "checkBits",
            "desc": "(II)Z"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "relativeCountError",
            "desc": "(I)D"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertDescription",
            "desc": "(Ljava/lang/String;Ljava/util/List;II)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertInit",
            "desc": "(IIZ)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateHLLInit",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateHLLFlags",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "badReInit",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "isWithinRelativeError",
            "desc": "(JJD)Z"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertHLLCount",
            "desc": "(Ljava/lang/String;IJJ)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertAddInit",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateHLLAddInit",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateAddFlags",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertFold",
            "desc": "(Ljava/util/List;Ljava/util/List;I)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateFold",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateFoldExists",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertSetUnion",
            "desc": "(Ljava/util/List;IZZ)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateSetUnion",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateSetUnionFlags",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateRefreshCount",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateGetCount",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateGetUnion",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "getPut",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "absoluteSimilarityError",
            "desc": "(IID)D"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertHMHSimilarity",
            "desc": "(Ljava/lang/String;IIDDJJ)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "assertSimilarityOp",
            "desc": "(DLjava/util/List;Ljava/util/List;II)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateSimilarity",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateEmptySimilarity",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "operateIntersectHLL",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateHll",
            "file_name": "TestOperateHll.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestDeleteBin",
            "file_name": "TestDeleteBin.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestDeleteBin",
            "file_name": "TestDeleteBin.java",
            "func_name": "deleteBin",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperate",
            "file_name": "TestOperate.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperate",
            "file_name": "TestOperate.java",
            "func_name": "operate",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperate",
            "file_name": "TestOperate.java",
            "func_name": "operateDelete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestScan$Metrics",
            "file_name": "TestScan.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestGeneration",
            "file_name": "TestGeneration.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestGeneration",
            "file_name": "TestGeneration.java",
            "func_name": "generation",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestTouch",
            "file_name": "TestTouch.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestTouch",
            "file_name": "TestTouch.java",
            "func_name": "touch",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListMap",
            "file_name": "TestListMap.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListMap",
            "file_name": "TestListMap.java",
            "func_name": "listStrings",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListMap",
            "file_name": "TestListMap.java",
            "func_name": "listComplex",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListMap",
            "file_name": "TestListMap.java",
            "func_name": "mapStrings",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListMap",
            "file_name": "TestListMap.java",
            "func_name": "mapComplex",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListMap",
            "file_name": "TestListMap.java",
            "func_name": "listMapCombined",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListMap",
            "file_name": "TestListMap.java",
            "func_name": "sortedMapReplace",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListExp",
            "file_name": "TestListExp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListExp",
            "file_name": "TestListExp.java",
            "func_name": "setUp",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListExp",
            "file_name": "TestListExp.java",
            "func_name": "modifyWithContext",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestListExp",
            "file_name": "TestListExp.java",
            "func_name": "expReturnsList",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestAppend",
            "file_name": "TestAppend.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestAppend",
            "file_name": "TestAppend.java",
            "func_name": "append",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestAppend",
            "file_name": "TestAppend.java",
            "func_name": "prepend",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpire",
            "file_name": "TestExpire.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpire",
            "file_name": "TestExpire.java",
            "func_name": "expire",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestExpire",
            "file_name": "TestExpire.java",
            "func_name": "noExpire",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "hllExp",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "count",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "union",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "intersect",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "similarity",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "describe",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "mayContain",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestHLLExp",
            "file_name": "TestHLLExp.java",
            "func_name": "add",
            "desc": "(Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateList1",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateList2",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateList3",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateList4",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateList5",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateList6",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateList7",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateList8",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListSort",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListRemove",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListInverted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListGetRelative",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListRemoveRelative",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListPartial",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListInfinity",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListWildcard",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateNestedList",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateNestedListMap",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateList",
            "file_name": "TestOperateList.java",
            "func_name": "operateListCreateContext",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "writeRecords",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "batchExists",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "batchReads",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "batchReadHeaders",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "batchReadComplex",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "batchListReadOperate",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "assertBatchBinEqual",
            "desc": "(Ljava/util/List;Ljava/lang/String;I)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestBatch",
            "file_name": "TestBatch.java",
            "func_name": "assertBatchRecordExists",
            "desc": "(Ljava/util/List;Ljava/lang/String;I)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestServerInfo",
            "file_name": "TestServerInfo.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestServerInfo",
            "file_name": "TestServerInfo.java",
            "func_name": "serverInfo",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestServerInfo",
            "file_name": "TestServerInfo.java",
            "func_name": "GetServerConfig",
            "desc": "(Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestServerInfo",
            "file_name": "TestServerInfo.java",
            "func_name": "GetNamespaceConfig",
            "desc": "(Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestServerInfo",
            "file_name": "TestServerInfo.java",
            "func_name": "LogNameValueTokens",
            "desc": "(Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestReplace",
            "file_name": "TestReplace.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestReplace",
            "file_name": "TestReplace.java",
            "func_name": "replace",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestReplace",
            "file_name": "TestReplace.java",
            "func_name": "replaceOnly",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapPut",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapMixed",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapSwitch",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapRank",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapRemove",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapRemoveRange",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapClear",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapScore",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapGetByList",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapInverted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapRemoveByKeyListForNonExistingKey",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapGetRelative",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapRemoveRelative",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapPartial",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapInfinity",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapWildcard",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateNestedMap",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateDoubleNestedMap",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateNestedMapValue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestOperateMap",
            "file_name": "TestOperateMap.java",
            "func_name": "operateMapCreateContext",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestPutGet",
            "file_name": "TestPutGet.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestPutGet",
            "file_name": "TestPutGet.java",
            "func_name": "putGet",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestPutGet",
            "file_name": "TestPutGet.java",
            "func_name": "getHeader",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/basic/TestPutGet",
            "file_name": "TestPutGet.java",
            "func_name": "putGetBool",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/TouchCommand",
            "file_name": "TouchCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/TouchCommand",
            "file_name": "TouchCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/TouchCommand",
            "file_name": "TouchCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/TouchCommand",
            "file_name": "TouchCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/TouchCommand",
            "file_name": "TouchCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/TouchCommand",
            "file_name": "TouchCommand.java",
            "func_name": "parseResult",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/command/TouchCommand",
            "file_name": "TouchCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/WriteCommand",
            "file_name": "WriteCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Bin;Lcom/aerospike/client/Operation$Type;)V"
        },
        {
            "class_name": "com/aerospike/client/command/WriteCommand",
            "file_name": "WriteCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/WriteCommand",
            "file_name": "WriteCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/WriteCommand",
            "file_name": "WriteCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/WriteCommand",
            "file_name": "WriteCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/WriteCommand",
            "file_name": "WriteCommand.java",
            "func_name": "parseResult",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/command/WriteCommand",
            "file_name": "WriteCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$BatchCommand",
            "file_name": "Batch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/command/BatchStatus;Z)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$BatchCommand",
            "file_name": "Batch.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$BatchCommand",
            "file_name": "Batch.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$BatchCommand",
            "file_name": "Batch.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$BatchCommand",
            "file_name": "Batch.java",
            "func_name": "retryBatch",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;IIJII)Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$BatchCommand",
            "file_name": "Batch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchAttr",
            "file_name": "BatchAttr.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/policy/BatchWritePolicy;[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchAttr",
            "file_name": "BatchAttr.java",
            "func_name": "setRead",
            "desc": "(Lcom/aerospike/client/policy/BatchReadPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchAttr",
            "file_name": "BatchAttr.java",
            "func_name": "adjustRead",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchAttr",
            "file_name": "BatchAttr.java",
            "func_name": "setWrite",
            "desc": "(Lcom/aerospike/client/policy/BatchWritePolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchAttr",
            "file_name": "BatchAttr.java",
            "func_name": "adjustWrite",
            "desc": "([Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchAttr",
            "file_name": "BatchAttr.java",
            "func_name": "setUDF",
            "desc": "(Lcom/aerospike/client/policy/BatchUDFPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchAttr",
            "file_name": "BatchAttr.java",
            "func_name": "setDelete",
            "desc": "(Lcom/aerospike/client/policy/BatchDeletePolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/command/ScanPartitionCommand",
            "file_name": "ScanPartitionCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/ScanPolicy;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lcom/aerospike/client/ScanCallback;JLcom/aerospike/client/query/PartitionTracker;Lcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/command/ScanPartitionCommand",
            "file_name": "ScanPartitionCommand.java",
            "func_name": "execute",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ScanPartitionCommand",
            "file_name": "ScanPartitionCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/ScanPartitionCommand",
            "file_name": "ScanPartitionCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ScanPartitionCommand",
            "file_name": "ScanPartitionCommand.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/cluster/Node;Ljava/lang/String;JZ)V"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "executeAndValidate",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "isSingle",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "parseResult",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "parseGroup",
            "desc": "(I)Z"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "parseRecord",
            "desc": "()Lcom/aerospike/client/Record;"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "stop",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/MultiCommand",
            "file_name": "MultiCommand.java",
            "func_name": "isValid",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;Lcom/aerospike/client/cluster/Partition;Z)V"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "parseResult",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "handleNotFound",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "handleUdfError",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/ReadCommand",
            "file_name": "ReadCommand.java",
            "func_name": "getRecord",
            "desc": "()Lcom/aerospike/client/Record;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$GetArrayCommand",
            "file_name": "Batch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[Ljava/lang/String;[Lcom/aerospike/client/Operation;[Lcom/aerospike/client/Record;IZLcom/aerospike/client/command/BatchStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$GetArrayCommand",
            "file_name": "Batch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$GetArrayCommand",
            "file_name": "Batch.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$GetArrayCommand",
            "file_name": "Batch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/command/Batch$BatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$GetArrayCommand",
            "file_name": "Batch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/command/BatchStatus",
            "file_name": "BatchStatus.java",
            "func_name": "<init>",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchStatus",
            "file_name": "BatchStatus.java",
            "func_name": "batchKeyError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchStatus",
            "file_name": "BatchStatus.java",
            "func_name": "setRowError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchStatus",
            "file_name": "BatchStatus.java",
            "func_name": "getStatus",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/BatchStatus",
            "file_name": "BatchStatus.java",
            "func_name": "setException",
            "desc": "(Ljava/lang/RuntimeException;)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchStatus",
            "file_name": "BatchStatus.java",
            "func_name": "checkException",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateListCommand",
            "file_name": "Batch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;Ljava/util/List;Lcom/aerospike/client/command/BatchStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateListCommand",
            "file_name": "Batch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateListCommand",
            "file_name": "Batch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateListCommand",
            "file_name": "Batch.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateListCommand",
            "file_name": "Batch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateListCommand",
            "file_name": "Batch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/command/Batch$BatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateListCommand",
            "file_name": "Batch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/command/BatchExecutor",
            "file_name": "BatchExecutor.java",
            "func_name": "execute",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchExecutor",
            "file_name": "BatchExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/command/Batch$BatchCommand;Lcom/aerospike/client/command/BatchStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchExecutor",
            "file_name": "BatchExecutor.java",
            "func_name": "onComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchExecutor",
            "file_name": "BatchExecutor.java",
            "func_name": "isDone",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/BatchExecutor",
            "file_name": "BatchExecutor.java",
            "func_name": "waitTillComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchExecutor",
            "file_name": "BatchExecutor.java",
            "func_name": "notifyCompleted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ExistsCommand",
            "file_name": "ExistsCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/ExistsCommand",
            "file_name": "ExistsCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/ExistsCommand",
            "file_name": "ExistsCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/ExistsCommand",
            "file_name": "ExistsCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ExistsCommand",
            "file_name": "ExistsCommand.java",
            "func_name": "parseResult",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/command/ExistsCommand",
            "file_name": "ExistsCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/ExistsCommand",
            "file_name": "ExistsCommand.java",
            "func_name": "exists",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ReadListCommand",
            "file_name": "Batch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;Ljava/util/List;Lcom/aerospike/client/command/BatchStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ReadListCommand",
            "file_name": "Batch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ReadListCommand",
            "file_name": "Batch.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ReadListCommand",
            "file_name": "Batch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/command/Batch$BatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ReadListCommand",
            "file_name": "Batch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/command/SyncCommand",
            "file_name": "SyncCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;II)V"
        },
        {
            "class_name": "com/aerospike/client/command/SyncCommand",
            "file_name": "SyncCommand.java",
            "func_name": "execute",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/SyncCommand",
            "file_name": "SyncCommand.java",
            "func_name": "executeCommand",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/SyncCommand",
            "file_name": "SyncCommand.java",
            "func_name": "resetDeadline",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/command/SyncCommand",
            "file_name": "SyncCommand.java",
            "func_name": "sizeBuffer",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/SyncCommand",
            "file_name": "SyncCommand.java",
            "func_name": "retryBatch",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;IIJII)Z"
        },
        {
            "class_name": "com/aerospike/client/command/SyncCommand",
            "file_name": "SyncCommand.java",
            "func_name": "isSingle",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/SyncCommand",
            "file_name": "SyncCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/DeleteCommand",
            "file_name": "DeleteCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/DeleteCommand",
            "file_name": "DeleteCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/DeleteCommand",
            "file_name": "DeleteCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/DeleteCommand",
            "file_name": "DeleteCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/DeleteCommand",
            "file_name": "DeleteCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/DeleteCommand",
            "file_name": "DeleteCommand.java",
            "func_name": "parseResult",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/command/DeleteCommand",
            "file_name": "DeleteCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/DeleteCommand",
            "file_name": "DeleteCommand.java",
            "func_name": "existed",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Executor$ExecutorThread",
            "file_name": "Executor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/command/Executor;Lcom/aerospike/client/command/MultiCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Executor$ExecutorThread",
            "file_name": "Executor.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Executor$ExecutorThread",
            "file_name": "Executor.java",
            "func_name": "stop",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ParticleType",
            "file_name": "ParticleType.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/OperateCommand",
            "file_name": "OperateCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/Key;Lcom/aerospike/client/command/OperateArgs;)V"
        },
        {
            "class_name": "com/aerospike/client/command/OperateCommand",
            "file_name": "OperateCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/OperateCommand",
            "file_name": "OperateCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/OperateCommand",
            "file_name": "OperateCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/OperateCommand",
            "file_name": "OperateCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/OperateCommand",
            "file_name": "OperateCommand.java",
            "func_name": "handleNotFound",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/OperateCommand",
            "file_name": "OperateCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/RegisterCommand",
            "file_name": "RegisterCommand.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/RegisterCommand",
            "file_name": "RegisterCommand.java",
            "func_name": "register",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;[BLjava/lang/String;Lcom/aerospike/client/Language;)Lcom/aerospike/client/task/RegisterTask;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ExistsArrayCommand",
            "file_name": "Batch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[ZLcom/aerospike/client/command/BatchStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ExistsArrayCommand",
            "file_name": "Batch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ExistsArrayCommand",
            "file_name": "Batch.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ExistsArrayCommand",
            "file_name": "Batch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/command/Batch$BatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$ExistsArrayCommand",
            "file_name": "Batch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/command/FieldType",
            "file_name": "FieldType.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ScanExecutor",
            "file_name": "ScanExecutor.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ScanExecutor",
            "file_name": "ScanExecutor.java",
            "func_name": "scanPartitions",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/ScanPolicy;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lcom/aerospike/client/ScanCallback;Lcom/aerospike/client/query/PartitionTracker;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch",
            "file_name": "Batch.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/OperateArgs",
            "file_name": "OperateArgs.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToKeyValue",
            "desc": "(I[BII)Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToParticle",
            "desc": "(I[BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "estimateSizeUtf8",
            "desc": "(Ljava/lang/String;)I"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "stringToUtf8",
            "desc": "(Ljava/lang/String;[BI)I"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "utf8ToString",
            "desc": "([BIILjava/lang/StringBuilder;)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "utf8DigitsToInt",
            "desc": "([BII)I"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToHexString",
            "desc": "([BII)Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToObject",
            "desc": "([BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToLongValue",
            "desc": "([BII)Lcom/aerospike/client/Value;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToGeoJSON",
            "desc": "([BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToHLL",
            "desc": "([BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToNumber",
            "desc": "([BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToBigInteger",
            "desc": "([BII)Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToBool",
            "desc": "([BII)Z"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToDouble",
            "desc": "([BI)D"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "doubleToBytes",
            "desc": "(D[BI)V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "longToBytes",
            "desc": "(J[BI)V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "longToLittleBytes",
            "desc": "(J[BI)V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToLong",
            "desc": "([BI)J"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "littleBytesToLong",
            "desc": "([BI)J"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "intToBytes",
            "desc": "(I[BI)V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "intToLittleBytes",
            "desc": "(I[BI)V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToInt",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "littleBytesToInt",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bigUnsigned32ToLong",
            "desc": "([BI)J"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "shortToBytes",
            "desc": "(I[BI)V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "shortToLittleBytes",
            "desc": "(I[BI)V"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bytesToShort",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "littleBytesToShort",
            "desc": "([BI)I"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "bigSigned16ToShort",
            "desc": "([BI)S"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "intToVarBytes",
            "desc": "(I[BI)I"
        },
        {
            "class_name": "com/aerospike/client/command/Buffer",
            "file_name": "Buffer.java",
            "func_name": "varBytesToInt",
            "desc": "([BI)[I"
        },
        {
            "class_name": "com/aerospike/client/command/BatchNodeList",
            "file_name": "BatchNodeList.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchNodeList",
            "file_name": "BatchNodeList.java",
            "func_name": "generate",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Ljava/util/List;IILcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/command/BatchNodeList$IBatchStatus;)Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/command/BatchNodeList",
            "file_name": "BatchNodeList.java",
            "func_name": "findBatchNode",
            "desc": "(Ljava/util/List;Lcom/aerospike/client/cluster/Node;)Lcom/aerospike/client/command/BatchNode;"
        },
        {
            "class_name": "com/aerospike/client/command/Executor",
            "file_name": "Executor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;I)V"
        },
        {
            "class_name": "com/aerospike/client/command/Executor",
            "file_name": "Executor.java",
            "func_name": "addCommand",
            "desc": "(Lcom/aerospike/client/command/MultiCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Executor",
            "file_name": "Executor.java",
            "func_name": "execute",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/Executor",
            "file_name": "Executor.java",
            "func_name": "threadCompleted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Executor",
            "file_name": "Executor.java",
            "func_name": "stopThreads",
            "desc": "(Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Executor",
            "file_name": "Executor.java",
            "func_name": "isDone",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Executor",
            "file_name": "Executor.java",
            "func_name": "waitTillComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Executor",
            "file_name": "Executor.java",
            "func_name": "notifyCompleted",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "<init>",
            "desc": "(III)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setWrite",
            "desc": "(Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Operation$Type;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Bin;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setDelete",
            "desc": "(Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setTouch",
            "desc": "(Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setExists",
            "desc": "(Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setRead",
            "desc": "(Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;[Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setReadHeader",
            "desc": "(Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setOperate",
            "desc": "(Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;Lcom/aerospike/client/command/OperateArgs;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setUdf",
            "desc": "(Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[Lcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setBatchRead",
            "desc": "(Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Lcom/aerospike/client/command/BatchNode;[Ljava/lang/String;[Lcom/aerospike/client/Operation;I)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setBatchOperate",
            "desc": "(Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Lcom/aerospike/client/command/BatchNode;[Ljava/lang/String;[Lcom/aerospike/client/Operation;Lcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setBatchUDF",
            "desc": "(Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Lcom/aerospike/client/command/BatchNode;Ljava/lang/String;Ljava/lang/String;[BLcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "getBatchExpression",
            "desc": "(Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/command/BatchAttr;)Lcom/aerospike/client/exp/Expression;"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "getBatchFlags",
            "desc": "(Lcom/aerospike/client/policy/BatchPolicy;)B"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeBatchHeader",
            "desc": "(Lcom/aerospike/client/policy/Policy;II)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeBatchBinNames",
            "desc": "(Lcom/aerospike/client/Key;[Ljava/lang/String;Lcom/aerospike/client/command/BatchAttr;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeBatchOperations",
            "desc": "(Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;Lcom/aerospike/client/command/BatchAttr;Lcom/aerospike/client/exp/Expression;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeBatchRead",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/command/BatchAttr;Lcom/aerospike/client/exp/Expression;I)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeBatchWrite",
            "desc": "(Lcom/aerospike/client/Key;Lcom/aerospike/client/command/BatchAttr;Lcom/aerospike/client/exp/Expression;II)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeBatchFields",
            "desc": "(Lcom/aerospike/client/Key;II)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setScan",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/ScanPolicy;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;JLcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "setQuery",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/query/Statement;JZLcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "estimateKeySize",
            "desc": "(Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)I"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "estimateUdfSize",
            "desc": "(Ljava/lang/String;Ljava/lang/String;[B)I"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "estimateOperationSize",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "estimateReadOperationSize",
            "desc": "(Lcom/aerospike/client/Operation;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeHeaderWrite",
            "desc": "(Lcom/aerospike/client/policy/WritePolicy;III)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeHeaderReadWrite",
            "desc": "(Lcom/aerospike/client/policy/WritePolicy;IIII)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeHeaderRead",
            "desc": "(Lcom/aerospike/client/policy/Policy;IIIII)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeHeaderReadHeader",
            "desc": "(Lcom/aerospike/client/policy/Policy;III)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeKey",
            "desc": "(Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeReadOnlyOperations",
            "desc": "([Lcom/aerospike/client/Operation;I)I"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeOperation",
            "desc": "(Lcom/aerospike/client/Operation$Type;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeField",
            "desc": "(JI)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeFieldHeader",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "writeExpHeader",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "begin",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "end",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "compress",
            "desc": "(Lcom/aerospike/client/policy/Policy;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "skipKey",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "parseKey",
            "desc": "(ILcom/aerospike/client/query/BVal;)Lcom/aerospike/client/Key;"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "parseRecord",
            "desc": "(IIIZ)Lcom/aerospike/client/Record;"
        },
        {
            "class_name": "com/aerospike/client/command/Command",
            "file_name": "Command.java",
            "func_name": "batchInDoubt",
            "desc": "(ZI)Z"
        },
        {
            "class_name": "com/aerospike/client/command/ExecuteCommand",
            "file_name": "ExecuteCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[Lcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/command/ExecuteCommand",
            "file_name": "ExecuteCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/ExecuteCommand",
            "file_name": "ExecuteCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/ExecuteCommand",
            "file_name": "ExecuteCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/ExecuteCommand",
            "file_name": "ExecuteCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ExecuteCommand",
            "file_name": "ExecuteCommand.java",
            "func_name": "handleNotFound",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/ExecuteCommand",
            "file_name": "ExecuteCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateArrayCommand",
            "file_name": "Batch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;[Lcom/aerospike/client/BatchRecord;Lcom/aerospike/client/command/BatchAttr;Lcom/aerospike/client/command/BatchStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateArrayCommand",
            "file_name": "Batch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateArrayCommand",
            "file_name": "Batch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateArrayCommand",
            "file_name": "Batch.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateArrayCommand",
            "file_name": "Batch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateArrayCommand",
            "file_name": "Batch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/command/Batch$BatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$OperateArrayCommand",
            "file_name": "Batch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/command/ReadHeaderCommand",
            "file_name": "ReadHeaderCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/command/ReadHeaderCommand",
            "file_name": "ReadHeaderCommand.java",
            "func_name": "getNode",
            "desc": "()Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/command/ReadHeaderCommand",
            "file_name": "ReadHeaderCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/command/ReadHeaderCommand",
            "file_name": "ReadHeaderCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/ReadHeaderCommand",
            "file_name": "ReadHeaderCommand.java",
            "func_name": "parseResult",
            "desc": "(Lcom/aerospike/client/cluster/Connection;)V"
        },
        {
            "class_name": "com/aerospike/client/command/ReadHeaderCommand",
            "file_name": "ReadHeaderCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/command/ReadHeaderCommand",
            "file_name": "ReadHeaderCommand.java",
            "func_name": "getRecord",
            "desc": "()Lcom/aerospike/client/Record;"
        },
        {
            "class_name": "com/aerospike/client/command/BatchNode",
            "file_name": "BatchNode.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Node;II)V"
        },
        {
            "class_name": "com/aerospike/client/command/BatchNode",
            "file_name": "BatchNode.java",
            "func_name": "addKey",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$UDFCommand",
            "file_name": "Batch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[B[Lcom/aerospike/client/BatchRecord;Lcom/aerospike/client/command/BatchAttr;Lcom/aerospike/client/command/BatchStatus;)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$UDFCommand",
            "file_name": "Batch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$UDFCommand",
            "file_name": "Batch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$UDFCommand",
            "file_name": "Batch.java",
            "func_name": "parseRow",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$UDFCommand",
            "file_name": "Batch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$UDFCommand",
            "file_name": "Batch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/command/Batch$BatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/command/Batch$UDFCommand",
            "file_name": "Batch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryInteger",
            "file_name": "TestQueryInteger.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryInteger",
            "file_name": "TestQueryInteger.java",
            "func_name": "prepare",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryInteger",
            "file_name": "TestQueryInteger.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryInteger",
            "file_name": "TestQueryInteger.java",
            "func_name": "queryInteger",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryCollection",
            "file_name": "TestQueryCollection.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryCollection",
            "file_name": "TestQueryCollection.java",
            "func_name": "prepare",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryCollection",
            "file_name": "TestQueryCollection.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryCollection",
            "file_name": "TestQueryCollection.java",
            "func_name": "queryCollection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "prepare",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryAndOr",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryNot",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryLastUpdate",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryList1",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryList2",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryList3",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryMap1",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryMap3",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryMap4",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryMap5",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryMap6",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryDigestModulo",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryBinExists",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryBinType",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryDeviceSize",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "queryMemorySize",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterExp",
            "file_name": "TestQueryFilterExp.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryGeo",
            "file_name": "TestQueryGeo.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryGeo",
            "file_name": "TestQueryGeo.java",
            "func_name": "prepare",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryGeo",
            "file_name": "TestQueryGeo.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryGeo",
            "file_name": "TestQueryGeo.java",
            "func_name": "queryGeo1",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryKey",
            "file_name": "TestQueryKey.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryKey",
            "file_name": "TestQueryKey.java",
            "func_name": "prepare",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryKey",
            "file_name": "TestQueryKey.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryKey",
            "file_name": "TestQueryKey.java",
            "func_name": "queryKey",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryExecute",
            "file_name": "TestQueryExecute.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryExecute",
            "file_name": "TestQueryExecute.java",
            "func_name": "prepare",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryExecute",
            "file_name": "TestQueryExecute.java",
            "func_name": "destroy",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryExecute",
            "file_name": "TestQueryExecute.java",
            "func_name": "queryExecuteOperate",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryExecute",
            "file_name": "TestQueryExecute.java",
            "func_name": "queryExecuteOperateExp",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "prepare",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "querySetName",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "queryDouble",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "queryKeyString",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "queryKeyInt",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "queryKeyExists",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "queryVoidTime",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestQueryFilterSet",
            "file_name": "TestQueryFilterSet.java",
            "func_name": "queryTTL",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestIndex",
            "file_name": "TestIndex.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/test/sync/query/TestIndex",
            "file_name": "TestIndex.java",
            "func_name": "ctxRestore",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/TimeoutState",
            "file_name": "TimeoutState.java",
            "func_name": "<init>",
            "desc": "(JI)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "validateBegin",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/async/AsyncQueryValidate$BeginListener;Lcom/aerospike/client/cluster/Node;Ljava/lang/String;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "validate",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/async/AsyncQueryValidate$Listener;Lcom/aerospike/client/cluster/Node;Ljava/lang/String;JI)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$InboundHandler",
            "file_name": "NettyCommand.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$InboundHandler",
            "file_name": "NettyCommand.java",
            "func_name": "setCommand",
            "desc": "(Lcom/aerospike/client/async/NettyCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$InboundHandler",
            "file_name": "NettyCommand.java",
            "func_name": "setPool",
            "desc": "(Lcom/aerospike/client/cluster/Node$AsyncPool;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$InboundHandler",
            "file_name": "NettyCommand.java",
            "func_name": "clear",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$InboundHandler",
            "file_name": "NettyCommand.java",
            "func_name": "channelActive",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$InboundHandler",
            "file_name": "NettyCommand.java",
            "func_name": "channelRead",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$InboundHandler",
            "file_name": "NettyCommand.java",
            "func_name": "userEventTriggered",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$InboundHandler",
            "file_name": "NettyCommand.java",
            "func_name": "exceptionCaught",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/async/Monitor",
            "file_name": "Monitor.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/Monitor",
            "file_name": "Monitor.java",
            "func_name": "waitTillComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/Monitor",
            "file_name": "Monitor.java",
            "func_name": "notifyComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQuery",
            "file_name": "AsyncQuery.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncMultiExecutor;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/query/Statement;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQuery",
            "file_name": "AsyncQuery.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQuery",
            "file_name": "AsyncQuery.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQuery",
            "file_name": "AsyncQuery.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQuery",
            "file_name": "AsyncQuery.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQuery",
            "file_name": "AsyncQuery.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops$1",
            "file_name": "NettyEventLoops.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyEventLoops;Lcom/aerospike/client/async/NettyEventLoop;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops$1",
            "file_name": "NettyEventLoops.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncReadHeader",
            "file_name": "AsyncReadHeader.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/listener/RecordListener;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncReadHeader",
            "file_name": "AsyncReadHeader.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncReadHeader",
            "file_name": "AsyncReadHeader.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncReadHeader",
            "file_name": "AsyncReadHeader.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncReadHeader",
            "file_name": "AsyncReadHeader.java",
            "func_name": "parseResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncReadHeader",
            "file_name": "AsyncReadHeader.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncReadHeader",
            "file_name": "AsyncReadHeader.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncReadHeader",
            "file_name": "AsyncReadHeader.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/EventLoopBase",
            "file_name": "EventLoopBase.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventPolicy;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/EventLoopBase",
            "file_name": "EventLoopBase.java",
            "func_name": "getProcessSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/async/EventLoopBase",
            "file_name": "EventLoopBase.java",
            "func_name": "getQueueSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/async/EventLoopBase",
            "file_name": "EventLoopBase.java",
            "func_name": "getIndex",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/async/EventLoopBase",
            "file_name": "EventLoopBase.java",
            "func_name": "createState",
            "desc": "()Lcom/aerospike/client/async/EventState;"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer",
            "file_name": "HashedWheelTimer.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;JLjava/util/concurrent/TimeUnit;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer",
            "file_name": "HashedWheelTimer.java",
            "func_name": "start",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer",
            "file_name": "HashedWheelTimer.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer",
            "file_name": "HashedWheelTimer.java",
            "func_name": "addTimeout",
            "desc": "(Lcom/aerospike/client/async/HashedWheelTimer$HashedWheelTimeout;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchSequenceListener;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartitionExecutor$1",
            "file_name": "AsyncScanPartitionExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncScanPartitionExecutor;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartitionExecutor$1",
            "file_name": "AsyncScanPartitionExecutor.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyEventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/async/AsyncConnector$Listener;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "createConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "channelActive",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "writeAuth",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "read",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "readAuthHeader",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "readAuthBody",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "parseAuthBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "finish",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "addConnection",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector",
            "file_name": "NettyConnector.java",
            "func_name": "closeConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/RecordArrayListener;[Lcom/aerospike/client/Key;[Ljava/lang/String;[Lcom/aerospike/client/Operation;IZ)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[Ljava/lang/String;[Lcom/aerospike/client/Operation;Lcom/aerospike/client/listener/RecordSequenceListener;IZ)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;[ZLcom/aerospike/client/listener/BatchRecordSequenceListener;Lcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NioCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "timeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "processEvent",
            "desc": "(Ljava/nio/channels/SelectionKey;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "drainSingleHeader",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "drainSingleBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "drainMultiHeader",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "drainMultiBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "resetBuffer",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "recover",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "abort",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioRecover",
            "file_name": "NioRecover.java",
            "func_name": "close",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/EventLoopType",
            "file_name": "EventLoopType.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[B[Lcom/aerospike/client/BatchRecord;Lcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Lcom/aerospike/client/listener/ExistsSequenceListener;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnection",
            "file_name": "NettyConnection.java",
            "func_name": "<init>",
            "desc": "(Lio/netty/channel/socket/SocketChannel;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnection",
            "file_name": "NettyConnection.java",
            "func_name": "isValid",
            "desc": "(Ljava/nio/ByteBuffer;)Z"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnection",
            "file_name": "NettyConnection.java",
            "func_name": "isOpen",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnection",
            "file_name": "NettyConnection.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$AsyncBatchCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$AsyncBatchCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$AsyncBatchCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$AsyncBatchCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "retryBatch",
            "desc": "(Ljava/lang/Runnable;J)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$AsyncBatchCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$AsyncBatchCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$AsyncBatchCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExists",
            "file_name": "AsyncExists.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/listener/ExistsListener;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExists",
            "file_name": "AsyncExists.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExists",
            "file_name": "AsyncExists.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExists",
            "file_name": "AsyncExists.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExists",
            "file_name": "AsyncExists.java",
            "func_name": "parseResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExists",
            "file_name": "AsyncExists.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExists",
            "file_name": "AsyncExists.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExists",
            "file_name": "AsyncExists.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate$BeginHandler",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncQueryValidate$BeginListener;Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate$BeginHandler",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "onSuccess",
            "desc": "(Ljava/util/Map;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate$BeginHandler",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnection",
            "file_name": "AsyncConnection.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnection",
            "file_name": "AsyncConnection.java",
            "func_name": "getLastUsed",
            "desc": "()J"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnection",
            "file_name": "AsyncConnection.java",
            "func_name": "updateLastUsed",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[B[ZLcom/aerospike/client/listener/BatchRecordSequenceListener;Lcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Lcom/aerospike/client/listener/ExistsSequenceListener;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "execute",
            "desc": "([Lcom/aerospike/client/async/AsyncMultiCommand;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "executeValidate",
            "desc": "([Lcom/aerospike/client/async/AsyncMultiCommand;ILjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "executeValidateCommand",
            "desc": "(Lcom/aerospike/client/async/AsyncMultiCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "childSuccess",
            "desc": "(Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "queryComplete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "childFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "reset",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "initFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartition",
            "file_name": "AsyncQueryPartition.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncMultiExecutor;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/query/Statement;JLcom/aerospike/client/query/PartitionTracker;Lcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartition",
            "file_name": "AsyncQueryPartition.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartition",
            "file_name": "AsyncQueryPartition.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartition",
            "file_name": "AsyncQueryPartition.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartition",
            "file_name": "AsyncQueryPartition.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartition",
            "file_name": "AsyncQueryPartition.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchRecordSequenceListener;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/EventState",
            "file_name": "EventState.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$3",
            "file_name": "NettyCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyCommand;Lcom/aerospike/client/AerospikeException;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$3",
            "file_name": "NettyCommand.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$2",
            "file_name": "NettyCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$2",
            "file_name": "NettyCommand.java",
            "func_name": "operationComplete",
            "desc": "(Lio/netty/channel/ChannelFuture;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$1",
            "file_name": "NettyCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyCommand;JLcom/aerospike/client/async/NettyCommand$InboundHandler;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand$1",
            "file_name": "NettyCommand.java",
            "func_name": "initChannel",
            "desc": "(Lio/netty/channel/socket/SocketChannel;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchRecordArrayListener;[Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;Lcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchRecordSequenceListener;[Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;Lcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "batchKeyError",
            "desc": "(Lcom/aerospike/client/Key;ILcom/aerospike/client/AerospikeException;ZZ)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop$2",
            "file_name": "NioEventLoop.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NioEventLoop;Lcom/aerospike/client/async/ScheduleTask;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop$2",
            "file_name": "NioEventLoop.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop$1",
            "file_name": "NioEventLoop.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NioEventLoop;Lcom/aerospike/client/async/ScheduleTask;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop$1",
            "file_name": "NioEventLoop.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatchExecutor",
            "file_name": "AsyncBatchExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatchExecutor",
            "file_name": "AsyncBatchExecutor.java",
            "func_name": "execute",
            "desc": "([Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatchExecutor",
            "file_name": "AsyncBatchExecutor.java",
            "func_name": "executeBatchRetry",
            "desc": "([Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;Ljava/lang/Runnable;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatchExecutor",
            "file_name": "AsyncBatchExecutor.java",
            "func_name": "childSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatchExecutor",
            "file_name": "AsyncBatchExecutor.java",
            "func_name": "childFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatchExecutor",
            "file_name": "AsyncBatchExecutor.java",
            "func_name": "batchKeyError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatchExecutor",
            "file_name": "AsyncBatchExecutor.java",
            "func_name": "setRowError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatchExecutor",
            "file_name": "AsyncBatchExecutor.java",
            "func_name": "getStatus",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NioEventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/async/AsyncConnector$Listener;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "createConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "processEvent",
            "desc": "(Ljava/nio/channels/SelectionKey;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "finishConnect",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "writeAuth",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "write",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "read",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "readAuthHeader",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "readAuthBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "finish",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "putByteBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "addConnection",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnector",
            "file_name": "NioConnector.java",
            "func_name": "closeConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchRecordArrayListener;[Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[BLcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[Ljava/lang/String;[Lcom/aerospike/client/Operation;[Lcom/aerospike/client/Record;IZ)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyCommand;Lcom/aerospike/client/async/AsyncCommand;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "queueError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "executeCommandFromDelayQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "executeCommand",
            "desc": "(JI)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "initBootstrap",
            "desc": "(Lio/netty/bootstrap/Bootstrap;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/async/NettyEventLoop;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "setTimeoutTask",
            "desc": "(JI)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "channelActive",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "restoreTimeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "writeAuth",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "writeCommand",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "writeByteBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "read",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "readAuthHeader",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "readAuthBody",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "parseAuthBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "readSingleHeader",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "readSingleBody",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "parseSingleBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "readMultiHeader",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "readMultiBody",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "timeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "totalTimeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "recoverConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "finish",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "onNetworkError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "onBackoffError",
            "desc": "(Lcom/aerospike/client/AerospikeException$Backoff;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "onServerTimeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "onDeviceOverload",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "retryServerError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "retry",
            "desc": "(Lcom/aerospike/client/AerospikeException;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "onApplicationError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "onFatalError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "notifyFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "addError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "closeKeepConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "putConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "closeDropConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "closeConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "closeFromDelayQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "logError",
            "desc": "(Ljava/lang/String;Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyCommand",
            "file_name": "NettyCommand.java",
            "func_name": "<clinit>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/EventLoopStats",
            "file_name": "EventLoopStats.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;)V"
        },
        {
            "class_name": "com/aerospike/client/async/EventLoopStats",
            "file_name": "EventLoopStats.java",
            "func_name": "toString",
            "desc": "()Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/Policy;II)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "parseProto",
            "desc": "(J)I"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "initBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "sizeBuffer",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "putBuffer",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "getBuffer",
            "desc": "(I)[B"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "resizeBuffer",
            "desc": "([BI)[B"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "validateHeaderSize",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "parseCommandResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "stop",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "retryBatch",
            "desc": "(Ljava/lang/Runnable;J)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncCommand",
            "file_name": "AsyncCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartitionExecutor",
            "file_name": "AsyncScanPartitionExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/ScanPolicy;Lcom/aerospike/client/listener/RecordSequenceListener;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lcom/aerospike/client/query/PartitionTracker;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartitionExecutor",
            "file_name": "AsyncScanPartitionExecutor.java",
            "func_name": "scanPartitions",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartitionExecutor",
            "file_name": "AsyncScanPartitionExecutor.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartitionExecutor",
            "file_name": "AsyncScanPartitionExecutor.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/listener/WriteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;[Lcom/aerospike/client/Bin;Lcom/aerospike/client/Operation$Type;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "parseResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncWrite",
            "file_name": "AsyncWrite.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventPolicy;Ljava/nio/channels/spi/SelectorProvider;IZLjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "execute",
            "desc": "(Ljava/lang/Runnable;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "executeBatchRetry",
            "desc": "(Ljava/lang/Runnable;Lcom/aerospike/client/async/AsyncCommand;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "schedule",
            "desc": "(Lcom/aerospike/client/async/ScheduleTask;JLjava/util/concurrent/TimeUnit;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "createConnector",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/async/AsyncConnector$Listener;)Lcom/aerospike/client/async/AsyncConnector;"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "inEventLoop",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "createByteBuffer",
            "desc": "(I)Ljava/nio/ByteBuffer;"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "getByteBuffer",
            "desc": "()Ljava/nio/ByteBuffer;"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "putByteBuffer",
            "desc": "(Ljava/nio/ByteBuffer;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "runCommands",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "registerCommands",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "runScheduled",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "tryDelayQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "executeFromDelayQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop",
            "file_name": "NioEventLoop.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/ScheduleTask",
            "file_name": "ScheduleTask.java",
            "func_name": "<init>",
            "desc": "(Ljava/lang/Runnable;)V"
        },
        {
            "class_name": "com/aerospike/client/async/ScheduleTask",
            "file_name": "ScheduleTask.java",
            "func_name": "setDeadline",
            "desc": "(JLjava/util/concurrent/TimeUnit;)V"
        },
        {
            "class_name": "com/aerospike/client/async/ScheduleTask",
            "file_name": "ScheduleTask.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover$1",
            "file_name": "NettyRecover.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyRecover;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover$1",
            "file_name": "NettyRecover.java",
            "func_name": "operationComplete",
            "desc": "(Lio/netty/channel/ChannelFuture;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$InboundHandler",
            "file_name": "NettyConnector.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyConnector;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$InboundHandler",
            "file_name": "NettyConnector.java",
            "func_name": "channelActive",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$InboundHandler",
            "file_name": "NettyConnector.java",
            "func_name": "channelRead",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$InboundHandler",
            "file_name": "NettyConnector.java",
            "func_name": "userEventTriggered",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$InboundHandler",
            "file_name": "NettyConnector.java",
            "func_name": "exceptionCaught",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover$InboundHandler",
            "file_name": "NettyRecover.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyRecover;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover$InboundHandler",
            "file_name": "NettyRecover.java",
            "func_name": "channelActive",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover$InboundHandler",
            "file_name": "NettyRecover.java",
            "func_name": "channelRead",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover$InboundHandler",
            "file_name": "NettyRecover.java",
            "func_name": "userEventTriggered",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover$InboundHandler",
            "file_name": "NettyRecover.java",
            "func_name": "exceptionCaught",
            "desc": "(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Throwable;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartitionExecutor",
            "file_name": "AsyncQueryPartitionExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;Lcom/aerospike/client/query/PartitionTracker;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartitionExecutor",
            "file_name": "AsyncQueryPartitionExecutor.java",
            "func_name": "queryPartitions",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartitionExecutor",
            "file_name": "AsyncQueryPartitionExecutor.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartitionExecutor",
            "file_name": "AsyncQueryPartitionExecutor.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate$Handler",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncQueryValidate$Listener;Ljava/lang/String;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate$Handler",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "onSuccess",
            "desc": "(Ljava/util/Map;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryValidate$Handler",
            "file_name": "AsyncQueryValidate.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncIndexTask$1",
            "file_name": "AsyncIndexTask.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncIndexTask;Ljava/lang/String;Lcom/aerospike/client/listener/TaskStatusListener;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncIndexTask$1",
            "file_name": "AsyncIndexTask.java",
            "func_name": "onSuccess",
            "desc": "(Ljava/util/Map;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncIndexTask$1",
            "file_name": "AsyncIndexTask.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$1",
            "file_name": "NettyConnector.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyConnector;Lcom/aerospike/client/async/NettyConnector$InboundHandler;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$1",
            "file_name": "NettyConnector.java",
            "func_name": "initChannel",
            "desc": "(Lio/netty/channel/socket/SocketChannel;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncOperate",
            "file_name": "AsyncOperate.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/listener/RecordListener;Lcom/aerospike/client/Key;Lcom/aerospike/client/command/OperateArgs;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncOperate",
            "file_name": "AsyncOperate.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncOperate",
            "file_name": "AsyncOperate.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncOperate",
            "file_name": "AsyncOperate.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncOperate",
            "file_name": "AsyncOperate.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncOperate",
            "file_name": "AsyncOperate.java",
            "func_name": "handleNotFound",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncOperate",
            "file_name": "AsyncOperate.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$2",
            "file_name": "NettyConnector.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyConnector;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyConnector$2",
            "file_name": "NettyConnector.java",
            "func_name": "operationComplete",
            "desc": "(Lio/netty/channel/ChannelFuture;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/listener/InfoListener;Lcom/aerospike/client/policy/InfoPolicy;Lcom/aerospike/client/cluster/Node;[Ljava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "createPolicy",
            "desc": "(Lcom/aerospike/client/policy/InfoPolicy;)Lcom/aerospike/client/policy/Policy;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "parseResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncInfoCommand",
            "file_name": "AsyncInfoCommand.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiCommand",
            "file_name": "AsyncMultiCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/policy/Policy;II)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiCommand",
            "file_name": "AsyncMultiCommand.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiCommand",
            "file_name": "AsyncMultiCommand.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiCommand",
            "file_name": "AsyncMultiCommand.java",
            "func_name": "parseResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiCommand",
            "file_name": "AsyncMultiCommand.java",
            "func_name": "parseRecord",
            "desc": "()Lcom/aerospike/client/Record;"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoops",
            "file_name": "NioEventLoops.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventPolicy;IZLjava/lang/String;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoops",
            "file_name": "NioEventLoops.java",
            "func_name": "getArray",
            "desc": "()[Lcom/aerospike/client/async/NioEventLoop;"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoops",
            "file_name": "NioEventLoops.java",
            "func_name": "getSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoops",
            "file_name": "NioEventLoops.java",
            "func_name": "get",
            "desc": "(I)Lcom/aerospike/client/async/NioEventLoop;"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoops",
            "file_name": "NioEventLoops.java",
            "func_name": "next",
            "desc": "()Lcom/aerospike/client/async/NioEventLoop;"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoops",
            "file_name": "NioEventLoops.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;Lcom/aerospike/client/listener/ExistsArrayListener;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsArrayExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnector",
            "file_name": "AsyncConnector.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoopBase;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/async/AsyncConnector$Listener;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnector",
            "file_name": "AsyncConnector.java",
            "func_name": "execute",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnector",
            "file_name": "AsyncConnector.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnector",
            "file_name": "AsyncConnector.java",
            "func_name": "timeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnector",
            "file_name": "AsyncConnector.java",
            "func_name": "success",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnector",
            "file_name": "AsyncConnector.java",
            "func_name": "fail",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnector",
            "file_name": "AsyncConnector.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchRecordSequenceListener;[Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[BLcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "batchKeyError",
            "desc": "(Lcom/aerospike/client/Key;ILcom/aerospike/client/AerospikeException;ZZ)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$UDFSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer$HashedWheelBucket",
            "file_name": "HashedWheelTimer.java",
            "func_name": "addTimeout",
            "desc": "(Lcom/aerospike/client/async/HashedWheelTimer$HashedWheelTimeout;)V"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer$HashedWheelBucket",
            "file_name": "HashedWheelTimer.java",
            "func_name": "expireTimeouts",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer$HashedWheelBucket",
            "file_name": "HashedWheelTimer.java",
            "func_name": "remove",
            "desc": "(Lcom/aerospike/client/async/HashedWheelTimer$HashedWheelTimeout;)Lcom/aerospike/client/async/HashedWheelTimer$HashedWheelTimeout;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/RecordSequenceListener;[Lcom/aerospike/client/Key;[Ljava/lang/String;[Lcom/aerospike/client/Operation;IZ)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$GetSequenceExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyTlsContext",
            "file_name": "NettyTlsContext.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/policy/TlsPolicy;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyTlsContext",
            "file_name": "NettyTlsContext.java",
            "func_name": "createHandler",
            "desc": "(Lio/netty/channel/socket/SocketChannel;)Lio/netty/handler/ssl/SslHandler;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyTlsContext",
            "file_name": "NettyTlsContext.java",
            "func_name": "filterCipherSuites",
            "desc": "(Ljava/lang/Iterable;Ljava/util/List;Ljava/util/Set;)[Ljava/lang/String;"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer$HashedWheelTimeout",
            "file_name": "HashedWheelTimer.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/TimerTask;)V"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer$HashedWheelTimeout",
            "file_name": "HashedWheelTimer.java",
            "func_name": "active",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer$HashedWheelTimeout",
            "file_name": "HashedWheelTimer.java",
            "func_name": "cancel",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/HashedWheelTimer$HashedWheelTimeout",
            "file_name": "HashedWheelTimer.java",
            "func_name": "expire",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchRecordSequenceListener;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchOperateListListener;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateListExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NioCommand;Lcom/aerospike/client/async/AsyncCommand;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "queueError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "executeCommandFromDelayQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "executeCommand",
            "desc": "(JI)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "setTimeoutTask",
            "desc": "(JI)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "processEvent",
            "desc": "(Ljava/nio/channels/SelectionKey;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "finishConnect",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "restoreTimeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "writeAuth",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "writeCommand",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "write",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "read",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "readAuthHeader",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "readAuthBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "readSingleHeader",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "readSingleBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "readMultiHeader",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "readMultiBody",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "parseGroupHeader",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "parseGroupBody",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "timeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "totalTimeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "recoverConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "finish",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "onNetworkError",
            "desc": "(Lcom/aerospike/client/AerospikeException;Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "onServerTimeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "onDeviceOverload",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "retry",
            "desc": "(Lcom/aerospike/client/AerospikeException;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "onApplicationError",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "notifyFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "addError",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "complete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "fail",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "closeConnection",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "closeFromDelayQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand",
            "file_name": "NioCommand.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ExistsArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/Throttle",
            "file_name": "Throttle.java",
            "func_name": "<init>",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/async/Throttle",
            "file_name": "Throttle.java",
            "func_name": "waitForSlot",
            "desc": "(I)Z"
        },
        {
            "class_name": "com/aerospike/client/async/Throttle",
            "file_name": "Throttle.java",
            "func_name": "addSlot",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/async/Throttle",
            "file_name": "Throttle.java",
            "func_name": "getAvailable",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryExecutor",
            "file_name": "AsyncQueryExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/listener/RecordSequenceListener;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/QueryPolicy;Lcom/aerospike/client/query/Statement;[Lcom/aerospike/client/cluster/Node;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryExecutor",
            "file_name": "AsyncQueryExecutor.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryExecutor",
            "file_name": "AsyncQueryExecutor.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/listener/WriteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "parseResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncTouch",
            "file_name": "AsyncTouch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/listener/ExecuteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;Ljava/lang/String;Ljava/lang/String;[Lcom/aerospike/client/Value;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "handleNotFound",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncExecute",
            "file_name": "AsyncExecute.java",
            "func_name": "parseEndResult",
            "desc": "()Ljava/lang/Object;"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "<init>",
            "desc": "(Ljava/net/InetSocketAddress;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "registerConnect",
            "desc": "(Lcom/aerospike/client/async/NioEventLoop;Lcom/aerospike/client/async/INioCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "finishConnect",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "attach",
            "desc": "(Lcom/aerospike/client/async/INioCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "registerWrite",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "write",
            "desc": "(Ljava/nio/ByteBuffer;)Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "registerRead",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "read",
            "desc": "(Ljava/nio/ByteBuffer;)Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "isValid",
            "desc": "(Ljava/nio/ByteBuffer;)Z"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "unregister",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NioConnection",
            "file_name": "NioConnection.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/listener/RecordListener;Lcom/aerospike/client/policy/Policy;Lcom/aerospike/client/Key;Lcom/aerospike/client/cluster/Partition;Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "parseResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "handleNotFound",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "handleUdfError",
            "desc": "(I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncRead",
            "file_name": "AsyncRead.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;[Lcom/aerospike/client/Key;[Lcom/aerospike/client/Operation;[Lcom/aerospike/client/BatchRecord;Lcom/aerospike/client/command/BatchAttr;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "setInDoubt",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$OperateRecordArrayCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoops$1",
            "file_name": "NioEventLoops.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NioEventLoops;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoops$1",
            "file_name": "NioEventLoops.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/EventPolicy",
            "file_name": "EventPolicy.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$3",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncMultiExecutor;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$3",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$3",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$1",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncMultiExecutor;[Lcom/aerospike/client/async/AsyncMultiCommand;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$1",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "onSuccess",
            "desc": "(J)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$1",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$2",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncMultiExecutor;Lcom/aerospike/client/async/AsyncMultiCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$2",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncMultiExecutor$2",
            "file_name": "AsyncMultiExecutor.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadListExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchListListener;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadListExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadListExecutor",
            "file_name": "AsyncBatch.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand$1",
            "file_name": "NioCommand.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NioCommand;Lcom/aerospike/client/AerospikeException;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioCommand$1",
            "file_name": "NioCommand.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/Throttles",
            "file_name": "Throttles.java",
            "func_name": "<init>",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/async/Throttles",
            "file_name": "Throttles.java",
            "func_name": "waitForSlot",
            "desc": "(II)Z"
        },
        {
            "class_name": "com/aerospike/client/async/Throttles",
            "file_name": "Throttles.java",
            "func_name": "addSlot",
            "desc": "(II)V"
        },
        {
            "class_name": "com/aerospike/client/async/Throttles",
            "file_name": "Throttles.java",
            "func_name": "getAvailable",
            "desc": "(I)I"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/listener/DeleteListener;Lcom/aerospike/client/policy/WritePolicy;Lcom/aerospike/client/Key;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "isWrite",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "getNode",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;)Lcom/aerospike/client/cluster/Node;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "parseResult",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "prepareRetry",
            "desc": "(Z)Z"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncDelete",
            "file_name": "AsyncDelete.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops",
            "file_name": "NettyEventLoops.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventPolicy;Lio/netty/channel/EventLoopGroup;Lcom/aerospike/client/async/EventLoopType;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops",
            "file_name": "NettyEventLoops.java",
            "func_name": "getEventLoopType",
            "desc": "(Lio/netty/channel/EventLoopGroup;)Lcom/aerospike/client/async/EventLoopType;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops",
            "file_name": "NettyEventLoops.java",
            "func_name": "get",
            "desc": "(I)Lcom/aerospike/client/async/NettyEventLoop;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops",
            "file_name": "NettyEventLoops.java",
            "func_name": "getArray",
            "desc": "()[Lcom/aerospike/client/async/NettyEventLoop;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops",
            "file_name": "NettyEventLoops.java",
            "func_name": "getSize",
            "desc": "()I"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops",
            "file_name": "NettyEventLoops.java",
            "func_name": "next",
            "desc": "()Lcom/aerospike/client/async/NettyEventLoop;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoops",
            "file_name": "NettyEventLoops.java",
            "func_name": "close",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartitionExecutor$1",
            "file_name": "AsyncQueryPartitionExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncQueryPartitionExecutor;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncQueryPartitionExecutor$1",
            "file_name": "AsyncQueryPartitionExecutor.java",
            "func_name": "run",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncBatchExecutor;Lcom/aerospike/client/command/BatchNode;Lcom/aerospike/client/policy/BatchPolicy;Lcom/aerospike/client/listener/BatchSequenceListener;Ljava/util/List;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "createCommand",
            "desc": "(Lcom/aerospike/client/command/BatchNode;)Lcom/aerospike/client/async/AsyncBatch$AsyncBatchCommand;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch$ReadSequenceCommand",
            "file_name": "AsyncBatch.java",
            "func_name": "generateBatchNodes",
            "desc": "()Ljava/util/List;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/NettyCommand;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "timeout",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "channelActive",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "writeAuth",
            "desc": "([B)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "drain",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "drainSingleHeader",
            "desc": "(Lio/netty/buffer/ByteBuf;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "drainSingleBody",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "drainMultiHeader",
            "desc": "(Lio/netty/buffer/ByteBuf;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "drainMultiBody",
            "desc": "(Lio/netty/buffer/ByteBuf;)Z"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "recover",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "abort",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyRecover",
            "file_name": "NettyRecover.java",
            "func_name": "close",
            "desc": "(Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventPolicy;Lio/netty/channel/EventLoop;Lcom/aerospike/client/async/NettyEventLoops;I)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "get",
            "desc": "()Lio/netty/channel/EventLoop;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "execute",
            "desc": "(Ljava/lang/Runnable;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "executeBatchRetry",
            "desc": "(Ljava/lang/Runnable;Lcom/aerospike/client/async/AsyncCommand;J)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "schedule",
            "desc": "(Lcom/aerospike/client/async/ScheduleTask;JLjava/util/concurrent/TimeUnit;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "createConnector",
            "desc": "(Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/async/AsyncConnector$Listener;)Lcom/aerospike/client/async/AsyncConnector;"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "inEventLoop",
            "desc": "()Z"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "tryDelayQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/NettyEventLoop",
            "file_name": "NettyEventLoop.java",
            "func_name": "executeFromDelayQueue",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnectorExecutor",
            "file_name": "AsyncConnectorExecutor.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/cluster/Cluster;Lcom/aerospike/client/cluster/Node;IILcom/aerospike/client/async/Monitor;Ljava/util/concurrent/atomic/AtomicInteger;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnectorExecutor",
            "file_name": "AsyncConnectorExecutor.java",
            "func_name": "onSuccess",
            "desc": "(Lcom/aerospike/client/async/AsyncConnector;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnectorExecutor",
            "file_name": "AsyncConnectorExecutor.java",
            "func_name": "onFailure",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnectorExecutor",
            "file_name": "AsyncConnectorExecutor.java",
            "func_name": "complete",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncConnectorExecutor",
            "file_name": "AsyncConnectorExecutor.java",
            "func_name": "eventLoopComplete",
            "desc": "(Lcom/aerospike/client/async/Monitor;Ljava/util/concurrent/atomic/AtomicInteger;)V"
        },
        {
            "class_name": "com/aerospike/client/async/NioEventLoop$CloseException",
            "file_name": "NioEventLoop.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncIndexTask",
            "file_name": "AsyncIndexTask.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/IAerospikeClient;Ljava/lang/String;Ljava/lang/String;Z)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncIndexTask",
            "file_name": "AsyncIndexTask.java",
            "func_name": "queryStatus",
            "desc": "(Lcom/aerospike/client/async/EventLoop;Lcom/aerospike/client/policy/InfoPolicy;Lcom/aerospike/client/cluster/Node;Lcom/aerospike/client/listener/TaskStatusListener;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartition",
            "file_name": "AsyncScanPartition.java",
            "func_name": "<init>",
            "desc": "(Lcom/aerospike/client/async/AsyncMultiExecutor;Lcom/aerospike/client/policy/ScanPolicy;Lcom/aerospike/client/listener/RecordSequenceListener;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;JLcom/aerospike/client/query/PartitionTracker;Lcom/aerospike/client/query/PartitionTracker$NodePartitions;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartition",
            "file_name": "AsyncScanPartition.java",
            "func_name": "getLatencyType",
            "desc": "()Lcom/aerospike/client/metrics/LatencyType;"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartition",
            "file_name": "AsyncScanPartition.java",
            "func_name": "writeBuffer",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartition",
            "file_name": "AsyncScanPartition.java",
            "func_name": "parseRow",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartition",
            "file_name": "AsyncScanPartition.java",
            "func_name": "onSuccess",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncScanPartition",
            "file_name": "AsyncScanPartition.java",
            "func_name": "onFailure",
            "desc": "(Lcom/aerospike/client/AerospikeException;)V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch",
            "file_name": "AsyncBatch.java",
            "func_name": "<init>",
            "desc": "()V"
        },
        {
            "class_name": "com/aerospike/client/async/AsyncBatch",
            "file_name": "AsyncBatch.java",
            "func_name": "onRecord",
            "desc": "(Lcom/aerospike/client/listener/BatchRecordSequenceListener;Lcom/aerospike/client/BatchRecord;I)V"
        }
    ]
}