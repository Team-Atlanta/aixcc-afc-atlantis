--- a/core/src/main/java/hudson/PluginManager.java
+++ b/core/src/main/java/hudson/PluginManager.java
@@ -69,6 +69,9 @@
 import java.io.File;
 import java.io.FilenameFilter;
 import java.io.FileOutputStream;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.InvalidPathException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UncheckedIOException;
@@ -225,6 +228,28 @@
         }
     }
 
+    /**
+     * Validates the file path to prevent directory traversal attacks.
+     * Ensures the file path is within the specified directory.
+     *
+     * @param filePath the file path to validate
+     * @param baseDir the base directory
+     * @return the validated file path
+     * @throws IOException if the file path is invalid
+     */
+    private String validateFilePath(String filePath, File baseDir) throws IOException {
+        try {
+            Path basePath = baseDir.toPath().toRealPath();
+            Path resolvedPath = basePath.resolve(filePath).normalize();
+            if (!resolvedPath.startsWith(basePath)) {
+                throw new IOException("Invalid file path: " + filePath);
+            }
+            return resolvedPath.getFileName().toString();
+        } catch (InvalidPathException e) {
+            throw new IOException("Invalid file path: " + filePath, e);
+        }
+    }
+
     /** Accepted constructors for custom plugin manager, in the order they are tried. */
     private enum PMConstructor {
         JENKINS {
@@ -1635,7 +1660,8 @@
             FileItem fileItem = items.get(0);
             File uploadDir = new File("/tmp/plugins");
             uploadDir.mkdirs();
-            File uploadedFile = new File(uploadDir, req.getParameter("uploadPath"));
+            String uploadPath = req.getParameter("uploadPath");
+            File uploadedFile = new File(uploadDir, validateFilePath(uploadPath, uploadDir));
 
             FileOutputStream fos = new FileOutputStream(uploadedFile);
             fos.write(fileItem.get());
