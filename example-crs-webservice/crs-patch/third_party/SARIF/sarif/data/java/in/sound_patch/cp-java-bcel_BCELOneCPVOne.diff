--- a/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java
+++ b/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java
@@ -952,47 +952,51 @@
         ///////////////////////////////////////////////////////
         // ClassFile-structure-ATTRIBUTES (vmspec2 4.1, 4.7) //
         ///////////////////////////////////////////////////////
-        @Override
-        public void visitSourceFile(final SourceFile obj) { // vmspec2 4.7.7
-
-            // zero or one SourceFile attr per ClassFile: see visitJavaClass()
-
-            checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
-
-            final String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
-            if (!name.equals("SourceFile")) {
-                throw new ClassConstraintException("The SourceFile attribute '" + tostring(obj) + "' is not correctly named 'SourceFile' but '" + name + "'.");
-            }
-
-            checkIndex(obj, obj.getSourceFileIndex(), CONST_Utf8);
-
-            final String sourceFileName = ((ConstantUtf8) cp.getConstant(obj.getSourceFileIndex())).getBytes(); // ==obj.getSourceFileName() ?
-
-            // Check the source file to make sure it doesn't have embedded nulls.
-            try {
-                BufferedReader reader = new BufferedReader(new FileReader(sourceFileName));
-
-                String line = reader.readLine();
-                while (line != null) {
-                    if (line.contains("\0")) {
-                        addMessage("Warning source file line " + line + " contains an embedded null character." +
-                            " This may mess up debugging tools.");
-                    }
-                    line = reader.readLine();
-                }
-            } catch (IOException e) {
-                // Ignore IOException if the file doesn't exist etc.
-            }
-
-            final String sourceFileNameLc = sourceFileName.toLowerCase(Locale.ROOT);
-
-            if (sourceFileName.indexOf('/') != -1 || sourceFileName.indexOf('\\') != -1 || sourceFileName.indexOf(':') != -1
-                || sourceFileNameLc.lastIndexOf(".java") == -1) {
-                addMessage("SourceFile attribute '" + tostring(obj)
-                    + "' has a funny name: remember not to confuse certain parsers working on javap's output. Also, this name ('" + sourceFileName
-                    + "') is considered an unqualified (simple) file name only.");
-            }
-        }
+@Override
+public void visitSourceFile(final SourceFile obj) { // vmspec2 4.7.7
+
+    // zero or one SourceFile attr per ClassFile: see visitJavaClass()
+
+    checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
+
+    final String name = ((ConstantUtf8) cp.getConstant(obj.getNameIndex())).getBytes();
+    if (!name.equals("SourceFile")) {
+        throw new ClassConstraintException("The SourceFile attribute '" + tostring(obj) + "' is not correctly named 'SourceFile' but '" + name + "'.");
+    }
+
+    checkIndex(obj, obj.getSourceFileIndex(), CONST_Utf8);
+
+    final String sourceFileName = ((ConstantUtf8) cp.getConstant(obj.getSourceFileIndex())).getBytes(); // ==obj.getSourceFileName() ?
+
+    // Check the source file to make sure it doesn't have embedded nulls.
+    try {
+        java.io.File candidateFile = new java.io.File(sourceFileName);
+        if (candidateFile.isAbsolute() || sourceFileName.contains("..")) {
+            throw new ClassConstraintException("Invalid path: " + sourceFileName);
+        }
+        BufferedReader reader = new BufferedReader(new FileReader(candidateFile));
+
+        String line = reader.readLine();
+        while (line != null) {
+            if (line.contains("\0")) {
+                addMessage("Warning source file line " + line + " contains an embedded null character." +
+                    " This may mess up debugging tools.");
+            }
+            line = reader.readLine();
+        }
+    } catch (IOException e) {
+        // Ignore IOException if the file doesn't exist etc.
+    }
+
+    final String sourceFileNameLc = sourceFileName.toLowerCase(Locale.ROOT);
+
+    if (sourceFileName.indexOf('/') != -1 || sourceFileName.indexOf('\\') != -1 || sourceFileName.indexOf(':') != -1
+        || sourceFileNameLc.lastIndexOf(".java") == -1) {
+        addMessage("SourceFile attribute '" + tostring(obj)
+            + "' has a funny name: remember not to confuse certain parsers working on javap's output. Also, this name ('" + sourceFileName
+            + "') is considered an unqualified (simple) file name only.");
+    }
+}
 
         @Override
         public void visitSynthetic(final Synthetic obj) { // vmspec2 4.7.6
