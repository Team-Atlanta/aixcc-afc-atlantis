diff --git a/lib/client-core/src/main/java/org/apache/olingo/client/core/communication/request/v4/AsyncRequestWrapperImpl.java b/lib/client-core/src/main/java/org/apache/olingo/client/core/communication/request/v4/AsyncRequestWrapperImpl.java
index 7aef8a9e0..d7c0f185e 100644
--- a/lib/client-core/src/main/java/org/apache/olingo/client/core/communication/request/v4/AsyncRequestWrapperImpl.java
+++ b/lib/client-core/src/main/java/org/apache/olingo/client/core/communication/request/v4/AsyncRequestWrapperImpl.java
@@ -20,6 +20,7 @@ package org.apache.olingo.client.core.communication.request.v4;
 
 import java.io.IOException;
 import java.net.URI;
+import java.util.Objects;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.apache.commons.lang3.ArrayUtils;
@@ -84,6 +85,7 @@ public class AsyncRequestWrapperImpl<R extends ODataResponse> extends AbstractRe
 
     // target uri
     this.uri = odataRequest.getURI();
+    Objects.requireNonNull(this.uri, "Target URI can't be null");
 
     HttpClient _httpClient = odataClient.getConfiguration().getHttpClientFactory().createHttpClient(method, this.uri);
     if (odataClient.getConfiguration().isGzipCompression()) {
@@ -132,6 +134,19 @@ public class AsyncRequestWrapperImpl<R extends ODataResponse> extends AbstractRe
     return executeHttpRequest(httpClient, this.request);
   }
 
+  private URI checkLocation(URI uri) {
+    if (!this.uri.getScheme().equals(uri.getScheme())) {
+      throw new AsyncRequestException("Unexpected scheme in the Location header");
+    }
+    if (!this.uri.getHost().equals(uri.getHost())) {
+      throw new AsyncRequestException("Unexpected host name in the Location header");
+    }
+    if (this.uri.getPort() != uri.getPort()) {
+      throw new AsyncRequestException("Unexpected port in the Location header");
+    }
+    return uri;
+  }
+
   public class AsyncResponseWrapperImpl implements AsyncResponseWrapper<R> {
 
     protected URI location = null;
@@ -213,6 +228,10 @@ public class AsyncRequestWrapperImpl<R extends ODataResponse> extends AbstractRe
       return response;
     }
 
+    URI createLocation(String string) {
+      return checkLocation(URI.create(string));
+    }
+
     /**
      * {@inheritDoc}
      */
@@ -259,7 +278,7 @@ public class AsyncRequestWrapperImpl<R extends ODataResponse> extends AbstractRe
     private void retrieveMonitorDetails(final HttpResponse res) {
       Header[] headers = res.getHeaders(HeaderName.location.toString());
       if (ArrayUtils.isNotEmpty(headers)) {
-        this.location = URI.create(headers[0].getValue());
+        this.location = createLocation(headers[0].getValue());
       } else {
         throw new AsyncRequestException(
                 "Invalid async request response. Monitor URL '" + headers[0].getValue() + "'");
