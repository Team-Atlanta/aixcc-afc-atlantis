# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2025-03-13T23:55:34+00:00

from __future__ import annotations

from http.client import HTTPException
import os
import secrets
from typing import Annotated
from uuid import UUID

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from urllib3.exceptions import MaxRetryError, NewConnectionError

from .models.types import (
    SARIFBroadcast,
    Status,
    Task,
    StatusState,
    StatusTasksState,
)
from my_crs.crs_manager.crs_manager import CRSManager
from my_crs.openapi_client.api.ping_api import PingApi, TypesPingResponse
from my_crs.openapi_client.api_client import ApiClient
from my_crs.openapi_client.configuration import Configuration
from my_crs.crs_manager.log_config import setup_filebeat

app = FastAPI(
    title="Example CRS API",
    contact={},
    version="1.0",
    servers=[{"url": "/"}],
)

security = HTTPBasic()

# Initialize CRSManager class
crs_manager = CRSManager(True)
setup_filebeat()

def check_auth(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):
    """
    Reference: https://fastapi.tiangolo.com/advanced/security/http-basic-auth/
    """
    current_username_bytes = credentials.username.encode("utf8")
    correct_username_bytes = bytes(os.getenv("CRS_KEY_ID"), "utf8")
    is_correct_username = secrets.compare_digest(
        current_username_bytes, correct_username_bytes
    )

    current_password_bytes = credentials.password.encode("utf8")
    correct_password_bytes = bytes(os.getenv("CRS_KEY_TOKEN"), "utf8")
    is_correct_password = secrets.compare_digest(
        current_password_bytes, correct_password_bytes
    )

    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username


@app.get("/status/", response_model=Status, tags=["status"])
def get_status_(
    credentials: Annotated[HTTPBasicCredentials, Depends(check_auth)],
) -> Status:
    """
    CRS Status
    """

    def is_competition_api_ready():
        is_ready = False
        configuration = Configuration(
            host=os.getenv("COMPETITION_URL"),
            username=os.getenv("COMPETITION_API_KEY_ID"),
            password=os.getenv("COMPETITION_API_KEY_TOKEN"),
        )
        api_client = ApiClient(
            configuration=configuration,
            header_name="ContentType",
            header_value="application/json",
        )
        api = PingApi(api_client=api_client)

        response = None
        try:
            response: TypesPingResponse = api.v1_ping_get()
        except (MaxRetryError, NewConnectionError) as e:
            is_ready = False

        if isinstance(response, TypesPingResponse):
            if response.status:
                is_ready = True

        return is_ready

    ready: bool = is_competition_api_ready()
    details = {}
    tasks = StatusTasksState(
        canceled=crs_manager.count_state("canceled"),
        errored=crs_manager.count_state("errored"),
        failed=crs_manager.count_state("failed"),
        pending=crs_manager.count_state("pending"),
        processing=crs_manager.count_state("running"),
        succeeded=crs_manager.count_state("succeeded"),
        waiting=crs_manager.count_state("waiting"),
    )
    state = StatusState(tasks=tasks)
    version = os.getenv("IMAGE_VERSION")
    # Get the last reset time, default to 0 if not set
    since = int(crs_manager.redis_client.get("since") or 0)
    return Status(
        details=details, ready=ready, since=since, state=state, version=version
    )


@app.delete("/status/", response_model=str, tags=["status"])
def delete_status_(
    credentials: Annotated[HTTPBasicCredentials, Depends(check_auth)],
) -> str:
    """
    Reset status stats
    """
    crs_manager.reset_stats()
    return "RESET"


@app.post("/v1/sarif/", response_model=str, tags=["sarif"])
def post_v1_sarif_(
    credentials: Annotated[HTTPBasicCredentials, Depends(check_auth)],
    body: SARIFBroadcast,
) -> str:
    """
    Submit Sarif Broadcast
    """
    crs_manager.invoke_process_sarif(body)
    return "Processing SARIFs..."


@app.post(
    "/v1/task/",
    response_model=None,
    responses={"202": {"model": str}},
    tags=["task"],
)
def post_v1_task_(
    credentials: Annotated[HTTPBasicCredentials, Depends(check_auth)],
    body: Task,
) -> Optional[str]:
    """
    Submit Task
    """
    crs_manager.invoke_process_task(body)
    return "Processing tasks.."


@app.delete("/v1/task/", response_model=str, tags=["task"])
def delete_v1_task_(
    credentials: Annotated[HTTPBasicCredentials, Depends(check_auth)],
) -> str:
    """
    Cancel Tasks
    """
    crs_manager.invoke_cancel_task_all(0)
    return "Processing cancel all task..."


@app.delete("/v1/task/{task_id}/", response_model=str, tags=["task"])
def delete_v1_task_task_id_(
    credentials: Annotated[HTTPBasicCredentials, Depends(check_auth)],
    task_id: UUID,
) -> str:
    """
    Cancel Task
    """
    crs_manager.invoke_cancel_task(task_id, 0)
    return "Processing cancel task..."
