from collections.abc import Sequence

class LlvmFdpEncoder:
    def __init__(self) -> None: ...
    def produce_byte_in_range_unchecked(
        self, value: int, min: int, max: int
    ) -> None: ...
    def produce_char_in_range_unchecked(
        self, value: int, min: int, max: int
    ) -> None: ...
    def produce_short_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_unsigned_short_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_int_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_unsigned_int_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_long_long_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_unsigned_long_long_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_byte_unchecked(self, value: int) -> None: ...
    def produce_char_unchecked(self, value: int) -> None: ...
    def produce_short_unchecked(self, value: int) -> None: ...
    def produce_unsigned_short_unchecked(self, value: int) -> None: ...
    def produce_int_unchecked(self, value: int) -> None: ...
    def produce_unsigned_int_unchecked(self, value: int) -> None: ...
    def produce_long_long_unchecked(self, value: int) -> None: ...
    def produce_unsigned_long_long_unchecked(self, value: int) -> None: ...
    def produce_bool_unchecked(self, value: bool) -> None: ...
    def produce_float_in_range_unchecked(
        self,
        value: float,
        min: float,
        max: float,
    ) -> None: ...
    def produce_double_in_range_unchecked(
        self,
        value: float,
        min: float,
        max: float,
    ) -> None: ...
    def produce_float_unchecked(self, value: float) -> None: ...
    def produce_double_unchecked(self, value: float) -> None: ...
    def produce_probability_float_unchecked(self, value: float) -> None: ...
    def produce_probability_double_unchecked(self, value: float) -> None: ...
    def produce_enum_unchecked(self, value: int, max_value: int) -> None: ...
    def produce_bytes_unchecked(self, value: bytes) -> None: ...
    def produce_bytes_with_terminator_unchecked(
        self,
        value: bytes,
        terminator: int,
    ) -> None: ...
    def produce_remaining_bytes_unchecked(self, value: bytes) -> None: ...
    def produce_remaining_bytes_as_string_unchecked(self, value: bytes) -> None: ...
    def produce_bytes_as_string_unchecked(
        self,
        value: bytes,
        num_bytes: int,
    ) -> None: ...
    def produce_random_length_string_with_max_length_unchecked(
        self,
        value: bytes,
        max_length: int,
    ) -> None: ...
    def produce_random_length_string_unchecked(self, value: bytes) -> None: ...
    def produce_picked_value_index_in_array_unchecked(
        self,
        value: int,
        length: int,
    ) -> None: ...
    def produce_byte_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_char_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_short_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_unsigned_short_in_range(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_int_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_unsigned_int_in_range(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_long_long_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_unsigned_long_long_in_range(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_byte(self, value: int) -> None: ...
    def produce_char(self, value: int) -> None: ...
    def produce_short(self, value: int) -> None: ...
    def produce_unsigned_short(self, value: int) -> None: ...
    def produce_int(self, value: int) -> None: ...
    def produce_unsigned_int(self, value: int) -> None: ...
    def produce_long_long(self, value: int) -> None: ...
    def produce_unsigned_long_long(self, value: int) -> None: ...
    def produce_bool(self, value: bool) -> None: ...
    def produce_float_in_range(self, value: float, min: float, max: float) -> None: ...
    def produce_double_in_range(self, value: float, min: float, max: float) -> None: ...
    def produce_float(self, value: float) -> None: ...
    def produce_double(self, value: float) -> None: ...
    def produce_probability_float(self, value: float) -> None: ...
    def produce_probability_double(self, value: float) -> None: ...
    def produce_enum(self, value: int, max_value: int) -> None: ...
    def produce_bytes(self, value: bytes, num_bytes: int) -> None: ...
    def produce_bytes_with_terminator(
        self,
        value: bytes,
        num_bytes: int,
        terminator: int,
    ) -> None: ...
    def produce_remaining_bytes(self, value: bytes) -> None: ...
    def produce_remaining_bytes_as_string(self, value: bytes) -> None: ...
    def produce_bytes_as_string(self, value: bytes, num_bytes: int) -> None: ...
    def produce_random_length_string_with_max_length(
        self,
        value: bytes,
        max_length: int,
    ) -> None: ...
    def produce_random_length_string(self, value: bytes) -> None: ...
    def produce_picked_value_index_in_array(
        self,
        value: int,
        length: int,
    ) -> None: ...
    def mark_remaining_bytes(self, value: int) -> None: ...
    def finalize(self) -> bytes: ...

class JazzerFdpEncoder:
    def __init__(self) -> None: ...
    def produce_jbyte_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_jchar_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_jshort_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_jint_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_jlong_in_range_unchecked(
        self,
        value: int,
        min: int,
        max: int,
    ) -> None: ...
    def produce_jbyte_unchecked(self, value: int) -> None: ...
    def produce_jchar_unchecked(self, value: int) -> None: ...
    def produce_jshort_unchecked(self, value: int) -> None: ...
    def produce_jint_unchecked(self, value: int) -> None: ...
    def produce_jlong_unchecked(self, value: int) -> None: ...
    def produce_jbool_unchecked(self, value: bool) -> None: ...
    def produce_regular_jfloat_in_range_unchecked(
        self,
        value: float,
        min: float,
        max: float,
    ) -> None: ...
    def produce_regular_jdouble_in_range_unchecked(
        self,
        value: float,
        min: float,
        max: float,
    ) -> None: ...
    def produce_regular_jfloat_unchecked(self, value: float) -> None: ...
    def produce_regular_jdouble_unchecked(self, value: float) -> None: ...
    def produce_jfloat_unchecked(self, value: float) -> None: ...
    def produce_jdouble_unchecked(self, value: float) -> None: ...
    def produce_probability_jfloat_unchecked(self, value: float) -> None: ...
    def produce_probability_jdouble_unchecked(self, value: float) -> None: ...
    def produce_jbytes_unchecked(self, value: bytes) -> None: ...
    def produce_jchars_unchecked(self, values: Sequence[int]) -> None: ...
    def produce_jshorts_unchecked(self, values: Sequence[int]) -> None: ...
    def produce_jints_unchecked(self, values: Sequence[int]) -> None: ...
    def produce_jlongs_unchecked(self, values: Sequence[int]) -> None: ...
    def produce_jbools_unchecked(self, values: Sequence[bool]) -> None: ...
    def produce_remaining_as_jbytes_unchecked(self, value: bytes) -> None: ...
    def produce_ascii_string_unchecked(
        self,
        value: str,
        max_length: int,
    ) -> None: ...
    def produce_remaining_as_ascii_string_unchecked(self, value: str) -> None: ...
    def produce_jstring_unchecked(self, value: str, max_length: int) -> None: ...
    def produce_remaining_as_jstring_unchecked(self, value: str) -> None: ...
    def produce_picked_value_index_in_jarray_unchecked(
        self,
        value: int,
        length: int,
    ) -> None: ...
    def produce_picked_value_indexes_in_jarray_unchecked(
        self,
        values: Sequence[int],
        length: int,
    ) -> None: ...
    def produce_jbyte_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_jchar_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_jshort_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_jint_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_jlong_in_range(self, value: int, min: int, max: int) -> None: ...
    def produce_jbyte(self, value: int) -> None: ...
    def produce_jchar(self, value: int) -> None: ...
    def produce_jshort(self, value: int) -> None: ...
    def produce_jint(self, value: int) -> None: ...
    def produce_jlong(self, value: int) -> None: ...
    def produce_jbool(self, value: bool) -> None: ...
    def produce_regular_jfloat_in_range(
        self,
        value: float,
        min: float,
        max: float,
    ) -> None: ...
    def produce_regular_jdouble_in_range(
        self,
        value: float,
        min: float,
        max: float,
    ) -> None: ...
    def produce_regular_jfloat(self, value: float) -> None: ...
    def produce_regular_jdouble(self, value: float) -> None: ...
    def produce_jfloat(self, value: float) -> None: ...
    def produce_jdouble(self, value: float) -> None: ...
    def produce_probability_jfloat(self, value: float) -> None: ...
    def produce_probability_jdouble(self, value: float) -> None: ...
    def produce_jbytes(self, value: bytes, max_length: int) -> None: ...
    def produce_jchars(self, values: Sequence[int], max_length: int) -> None: ...
    def produce_jshorts(self, values: Sequence[int], max_length: int) -> None: ...
    def produce_jints(self, values: Sequence[int], max_length: int) -> None: ...
    def produce_jlongs(self, values: Sequence[int], max_length: int) -> None: ...
    def produce_jbools(self, values: Sequence[bool], max_length: int) -> None: ...
    def produce_remaining_as_jbytes(self, value: bytes) -> None: ...
    def produce_ascii_string(self, value: str, max_length: int) -> None: ...
    def produce_remaining_as_ascii_string(self, value: str) -> None: ...
    def produce_jstring(self, value: str, max_length: int) -> None: ...
    def produce_remaining_as_jstring(self, value: str) -> None: ...
    def produce_picked_value_index_in_jarray(
        self,
        value: int,
        length: int,
    ) -> None: ...
    def produce_picked_value_indexes_in_jarray(
        self,
        values: Sequence[int],
        length: int,
    ) -> None: ...
    def mark_remaining_bytes(self, value: int) -> None: ...
    def finalize(self) -> bytes: ...
