description: |-
  Loops, excessive recursion, deliberate time-consuming operations occured by user-controlled input.

  - Find: Loops, recursion, sleep using user input for control flow, including
  TimeUnit and recursive calls.
  - Or, Find regex parsing or matching, and check if it can cause slowdown (MUST CHECK THE REGEX PATTERN VALUE!!)

  ```java

  // Infinite loop with user-controlled condition
  int count = Integer.parseInt(request.getParameter("count"));
  while(count > 0) {
      process();  // BUG: missing count-- causes infinite loop
  }

  // Sleep based on user input
  String delayStr = request.getParameter("delay");
  Thread.sleep(Long.parseLong(delayStr));  // BUG: user-controlled delay

  // TimeUnit sleep
  TimeUnit.SECONDS.sleep(Long.parseLong(delayStr));  // BUG: TimeUnit sleep

  // Recursive calls
  int depth = Integer.parseInt(request.getParameter("depth"));
  recursiveMethod(depth);  // BUG: user-controlled recursion depth

  // Regex with catastrophic backtracking
  String text = request.getParameter("text");  // User-controlled
  Pattern.compile("(a+)+").matcher(text).matches();  // Vulnerable pattern

  // Slow Regex processing with user-controllable input
  String text = request.getParameter("text"); // User-controlled (e.g, 99999999999999999999999999999999999999999999999...)
  Pattern.compile("-?\\d{1,19}(?:\\.\\d*)?").matcher(text).matches();  // This can lead slowdown and timed out
  ```

exploit: |-
  1. Locate loop/sleep/regex with user-controlled input
    1.1. If it's about regex, MUST check the pattern
  2. Provide input causing excessive execution time

  ```java
  int count = 1;  // Any positive number
  while(count > 0) {
      System.out.println("loop");  // Infinite loop - missing count--
  }
  // OR
  Thread.sleep(Long.MAX_VALUE);  // Excessive sleep duration
  // OR
  TimeUnit.HOURS.sleep(24);  // TimeUnit variant
  // OR
  Pattern.compile("(a+)+").matcher("aaaaaaaaaaaaaaaaaaaaX").matches();  // Catastrophic backtracking
  // OR
  Pattern.compile("-?\\d{1,19}(?:\\.\\d*)?").matcher("99999999999999999999999999999999999999999999999").matches();  // Slow Regex processing
  ```
