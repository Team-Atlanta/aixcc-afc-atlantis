description: |-
  Objects deserialized from untrusted data without validation.

  Find: ObjectInputStream.readObject() with external data, including custom streams and wrapped streams.
  ```java
  byte[] data = getUntrustedData();
  ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));
  Object obj = ois.readObject();  // BUG: deserializes malicious objects

  // Custom ObjectInputStream
  class CustomOIS extends ObjectInputStream {
      protected Object readObjectOverride() throws IOException {
          return super.readObject();  // BUG: still vulnerable
      }
  }

  // Wrapped stream
  InputStream wrapped = wrapStream(untrustedData);
  new ObjectInputStream(wrapped).readObject();  // BUG: wrapped but unsafe
  ```

exploit: |-
  1. Locate ObjectInputStream with external data
  2. Provide serialized jaz.Zer class

  ```java
  byte[] payload = {(byte)0xac, (byte)0xed, 0x00, 0x05, 0x73, 0x72,
                    0x00, 0x07, 'j','a','z','.','Z','e','r',
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a,
                    0x02, 0x00, 0x00, 0x78, 0x70};
  ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(payload));
  ois.readObject();  // Triggers detection

  // OR with custom stream
  CustomOIS customOis = new CustomOIS(new ByteArrayInputStream(payload));
  customOis.readObject();  // Also triggers detection
  ```
