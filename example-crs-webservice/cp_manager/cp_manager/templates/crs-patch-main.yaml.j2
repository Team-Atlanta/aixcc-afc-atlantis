apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ name }}
  namespace: crs-webservice
  labels:
    app: "crs-patch-main"
    task_id: {{ task_id }}
    node_type: {{ node_type }}
    {% if extra_labels %}
    {% for key, value in extra_labels.items() %}
    {{ key }}: {{ value }}
    {% endfor %}
    {% endif %}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "crs-patch-main"
      task_id: {{ task_id }}
      node_type: {{ node_type }}
      {% if extra_labels %}
      {% for key, value in extra_labels.items() %}
      {{ key }}: {{ value }}
      {% endfor %}
      {% endif %}
  template:
    metadata:
      labels:
        app: "crs-patch-main"
        task_id: {{ task_id }}
        node_type: {{ node_type }}
        {% if extra_labels %}
        {% for key, value in extra_labels.items() %}
        {{ key }}: {{ value }}
        {% endfor %}
        {% endif %}
    spec:
      imagePullSecrets:
      - name: registry-secret
      serviceAccountName: k8s-full-control
      volumes:
        - name: shared-crs-fs-volume
          persistentVolumeClaim:
            claimName: shared-crs-fs
        - name: tarball-fs-volume
          persistentVolumeClaim:
            claimName: tarball-fs
        - name: registry-config
          secret:
            secretName: registry-secret
      restartPolicy: Always
      containers:
        - name: crs-patch-main
          image: {{ registry }}/crs-patch-main:{{image_version}}
          resources:
            limits:
              memory: "100Gi"
          volumeMounts:
            - name: shared-crs-fs-volume
              mountPath: /shared-crs-fs
            - name: tarball-fs-volume
              mountPath: /tarball-fs
              readOnly: true
            - name: registry-config
              mountPath: /root/.docker/config.json
              subPath: .dockerconfigjson
          securityContext:
            privileged: true
          {% if env_vars %}
          env:
            {% for key, value in env_vars.items() %}
            - name: {{ key }}
              value: "{{ value }}"
            {% endfor %}
          {% endif %}
          {% if resources %}
          resources:
            {{ resources | to_nice_yaml(indent=12) }}
          {% endif %}
      {% if node_selector %}
      nodeSelector:
        {{ node_selector | to_nice_yaml(indent=8) }}
      {% endif %}
      {% if tolerations %}
      tolerations:
        {{ tolerations | to_nice_yaml(indent=8) }}
      {% endif %}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ name }}
  namespace: crs-webservice
  labels:
    app: "crs-patch-main"
    task_id: {{ task_id }}
    node_type: {{ node_type }}
spec:
  selector:
    app: "crs-patch-main"
    task_id: {{ task_id }}
    node_type: {{ node_type }}
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
  type: {{ service_type | default("ClusterIP") }}

