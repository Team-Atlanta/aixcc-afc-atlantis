# generated by fastapi-codegen:
#   filename:  vapi-openapi.json
#   timestamp: 2025-03-14T21:10:25+00:00

from __future__ import annotations

from libCRS import install_otel_logger

install_otel_logger()


from typing import Union
from uuid import UUID, uuid4

from fastapi import FastAPI

from .models.types import (
    Error,
    PatchSubmission,
    PatchSubmissionResponse,
    POVSubmission,
    POVSubmissionResponse,
    SubmissionStatus,
    Sarif,
    SarifAssessmentBroadcast,
    SarifAssessmentSubmission,
)


import os
import signal
import subprocess
from pathlib import Path
from cp_manager.redis_util import RedisUtil, DUMMY_UUID

CUR_DIR = Path(os.path.dirname(__file__))
redis_util = RedisUtil()
os.environ["VERIFIER_HEAD_WORKDIR"] = "/verifier-head-workdir/"
os.environ["VERIFIER_BASE_WORKDIR"] = "/verifier-base-workdir/"
signal.signal(signal.SIGCHLD, signal.SIG_IGN)


def run_bg_cp_manager(cmd, env=os.environ):
    try:
        subprocess.run(
            ["/bin/bash", "-c", f"python3 -m {cmd} &"],
            check=False,
            cwd=str(CUR_DIR.parent),
            env=env,
        )
    except:
        pass


# Compile and Launch
run_bg_cp_manager("cp_manager.cp_manager")


app = FastAPI(
    title="VAPI",
    contact={},
    version="1.1",
    servers=[{"url": "/"}],
)


@app.post(
    "/submit/patch/pov/{pov_id}",
    response_model=PatchSubmissionResponse,
    responses={
        "400": {"model": Error},
        "401": {"model": Error},
        "404": {"model": Error},
        "500": {"model": Error},
    },
)
def post_submit_patch_pov_pov_id(
    pov_id: UUID, body: PatchSubmission = ...
) -> Union[PatchSubmissionResponse, Error]:
    patch_id = redis_util.create_patch_uuid()
    patch_task_key = redis_util.to_patch_key(patch_id)
    redis_util.write(patch_task_key, body.model_dump_json())
    patch_result_key = redis_util.to_patch_capi_key(patch_id)
    redis_util.write(
        patch_result_key,
        PatchSubmissionResponse(
            patch_id=DUMMY_UUID, status=SubmissionStatus.SubmissionStatusAccepted
        ).model_dump_json(),
    )
    pov_of_patch = redis_util.to_pov_of_patch_key(patch_id)
    redis_util.write(pov_of_patch, str(pov_id))
    run_bg_cp_manager(
        f"cp_manager.submit_patch {patch_id}",
        env=os.environ
        | {
            "CRS_SERVICE_NAME": "cp-manager",
            "CRS_ACTION_CATEGORY": "scoring_submission",
            "CRS_ACTION_NAME": "submit_patch",
        },
    )
    return PatchSubmissionResponse(
        patch_id=patch_id, status=SubmissionStatus.SubmissionStatusAccepted
    )


@app.get(
    "/submit/patch/{patch_id}",
    response_model=PatchSubmissionResponse,
    responses={
        "400": {"model": Error},
        "401": {"model": Error},
        "404": {"model": Error},
        "500": {"model": Error},
    },
)
def get_submit_patch_patch_id(
    patch_id: UUID,
) -> Union[PatchSubmissionResponse, Error]:
    patch_result_key = redis_util.to_patch_capi_key(str(patch_id))
    patch_result = redis_util.read(patch_result_key)
    if patch_result != None:
        return PatchSubmissionResponse.model_validate_json(patch_result)


@app.post(
    "/submit/pov/",
    response_model=POVSubmissionResponse,
    responses={
        "400": {"model": Error},
        "401": {"model": Error},
        "404": {"model": Error},
        "500": {"model": Error},
    },
)
def post_submit_pov_(
    body: POVSubmission,
) -> Union[POVSubmissionResponse, Error]:
    pov_id = redis_util.create_pov_uuid()
    pov_task_key = redis_util.to_pov_key(pov_id)
    redis_util.write(pov_task_key, body.model_dump_json())
    pov_result_key = redis_util.to_pov_capi_key(pov_id)
    redis_util.write(
        pov_result_key,
        POVSubmissionResponse(
            pov_id=DUMMY_UUID, status=SubmissionStatus.SubmissionStatusAccepted
        ).model_dump_json(),
    )
    run_bg_cp_manager(
        f"cp_manager.submit_pov {pov_id}",
        env=os.environ
        | {
            "CRS_SERVICE_NAME": "cp-manager",
            "CRS_ACTION_CATEGORY": "scoring_submission",
            "CRS_ACTION_NAME": "submit_pov",
        },
    )
    return POVSubmissionResponse(
        pov_id=pov_id, status=SubmissionStatus.SubmissionStatusAccepted
    )


@app.get(
    "/submit/pov/{pov_id}",
    response_model=POVSubmissionResponse,
    responses={
        "400": {"model": Error},
        "401": {"model": Error},
        "404": {"model": Error},
        "500": {"model": Error},
    },
)
def get_submit_pov_pov_id(pov_id: UUID) -> Union[POVSubmissionResponse, Error]:
    return redis_util.get_pov_submission_response(pov_id)


@app.post(
    "/broadcast/sarif/",
    response_model=None,
    responses={
        "400": {"model": Error},
        "401": {"model": Error},
        "404": {"model": Error},
        "500": {"model": Error},
    },
)
def post_broadcast_sarif_(body: SarifAssessmentBroadcast) -> Optional[Error]:
    key = redis_util.to_sarif_broadcast_key(body.sarif_id)
    redis_util.write(key, body.model_dump_json())
    run_bg_cp_manager(
        f"cp_manager.broadcast_sarif {body.sarif_id}",
        env=os.environ
        | {
            "CRS_SERVICE_NAME": "cp-manager",
            "CRS_ACTION_CATEGORY": "program_analysis",
            "CRS_ACTION_NAME": "sarif_assessment",
        },
    )


@app.post(
    "/submit/sarif/",
    response_model=None,
    responses={
        "400": {"model": Error},
        "401": {"model": Error},
        "404": {"model": Error},
        "500": {"model": Error},
    },
)
def post_submit_sarif_(body: SarifAssessmentSubmission) -> Optional[Error]:
    added = redis_util.add_sarif_submission(body.sarif_id, body)
    if not added:
        return Error(message="Sarif submission already exists")
    run_bg_cp_manager(
        f"cp_manager.submit_sarif {body.sarif_id}",
        env=os.environ
        | {
            "CRS_SERVICE_NAME": "cp-manager",
            "CRS_ACTION_CATEGORY": "scoring_submission",
            "CRS_ACTION_NAME": "submit_sarif_assessment",
        },
    )


@app.post(
    "/task/sarif/",
    response_model=None,
    responses={
        "400": {"model": Error},
        "401": {"model": Error},
        "404": {"model": Error},
        "500": {"model": Error},
    },
)
def post_task_sarif_(body: Sarif) -> Optional[Error]:
    key = redis_util.to_sarif_key(body.sarif_id)
    redis_util.write(key, body.model_dump_json())
    run_bg_cp_manager(
        f"cp_manager.task_sarif {key}",
        env=os.environ
        | {
            "CRS_SERVICE_NAME": "cp-manager",
            "CRS_ACTION_CATEGORY": "program_analysis",
            "CRS_ACTION_NAME": "sarif_assessment",
        },
    )
