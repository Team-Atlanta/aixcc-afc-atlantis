# generated by fastapi-codegen:
#   filename:  vapi-openapi.json
#   timestamp: 2025-05-20T23:01:31+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, constr


class Error(BaseModel):
    fields: Optional[Dict[str, str]] = None
    message: str


class Assessment(Enum):
    AssessmentCorrect = "correct"
    AssessmentIncorrect = "incorrect"


class POVSubmission(BaseModel):
    finder: constr(max_length=4096) = Field(..., description="Finder of this PoV")
    fuzzer_name: constr(max_length=4096) = Field(
        ..., description="Fuzz Tooling fuzzer that exercises this vuln\n\n4KiB max size"
    )
    sanitizer: constr(max_length=4096) = Field(
        ...,
        description="Fuzz Tooling Sanitizer that exercises this vuln\n\n4KiB max size",
    )
    testcase: str = Field(
        ...,
        description="Base64 encoded vuln trigger\n\n2MiB max size before Base64 encoding",
    )


class SubmissionStatus(Enum):
    SubmissionStatusAccepted = "accepted"
    SubmissionStatusPassed = "passed"
    SubmissionStatusFailed = "failed"
    SubmissionStatusDeadlineExceeded = "deadline_exceeded"
    SubmissionStatusErrored = "errored"
    SubmissionStatusDuplicated = "duplicated"


class PatchSubmission(BaseModel):
    patched_again_pov_ids: List[str] = Field(
        ..., description="POV IDs patched before but the given patch prevents again"
    )
    patch: str = Field(
        ...,
        description="Base64 encoded patch in unified diff format\n\n100KiB max size before Base64 encoding",
    )


class PatchSubmissionResponse(BaseModel):
    functionality_tests_passing: Optional[bool] = Field(
        None, description="null indicates the tests have not been run"
    )
    patch_id: UUID
    status: SubmissionStatus


class SarifAssessmentSubmission(BaseModel):
    assessment: Assessment
    description: constr(max_length=131072) = Field(
        ..., description="Plain text reasoning for the assessment\n\n128KiB max size"
    )
    sarif_id: UUID
    pov_id: Optional[UUID] = None


class SarifAssessmentBroadcast(BaseModel):
    analysis_result: Dict[str, Any] = Field(
        ...,
        description="Analysis result in form of object\n# TODO: Fix fields\n128KiB max size",
    )
    sarif_id: UUID
    fuzzer_name: constr(max_length=4096) = Field(
        ..., description="Fuzz Tooling fuzzer that exercises this vuln\n\n4KiB max size"
    )


class Sarif(BaseModel):
    metadata: Dict[str, Any] = Field(
        ...,
        description="String to string map containing data that should be attached to outputs like log messages and OpenTelemetry trace attributes for traceability",
    )
    sarif: Dict[str, Any] = Field(
        ..., description="SARIF Report compliant with provided schema"
    )
    sarif_id: UUID


class POVSubmissionResponse(BaseModel):
    pov_id: UUID
    status: SubmissionStatus