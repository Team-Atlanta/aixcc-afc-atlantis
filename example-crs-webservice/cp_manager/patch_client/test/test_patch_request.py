# coding: utf-8

"""
    CRS Patch Generation API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from patch_client.models.patch_request import PatchRequest

class TestPatchRequest(unittest.TestCase):
    """PatchRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PatchRequest:
        """Test PatchRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PatchRequest`
        """
        model = PatchRequest()
        if include_optional:
            return PatchRequest(
                project_name = '',
                blobs = [
                    patch_client.models.blob_info.BlobInfo(
                        harness_name = '', 
                        sanitizer_name = '', 
                        blob_data = '', )
                    ],
                pov_id = '',
                sarif_report = '',
                type = 'full'
            )
        else:
            return PatchRequest(
                project_name = '',
                blobs = [
                    patch_client.models.blob_info.BlobInfo(
                        harness_name = '', 
                        sanitizer_name = '', 
                        blob_data = '', )
                    ],
                pov_id = '',
                sarif_report = '',
                type = 'full',
        )
        """

    def testPatchRequest(self):
        """Test PatchRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
